{
  "address": "0x983DD2F808b583433eAD7ba0953Ca73de253B276",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "PRBMathSD59x18__Exp2InputTooBig",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "PRBMathSD59x18__LogInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__MulInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__MulOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "ToInt256CastOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "number",
          "type": "int256"
        }
      ],
      "name": "ToUint256CastOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityRemoved",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referralId",
          "type": "uint256"
        }
      ],
      "name": "ReferralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment",
          "name": "wholePayment",
          "type": "tuple"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "basePairAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nonces",
          "type": "uint256[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "newNonces",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        }
      ],
      "name": "computeFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment",
          "name": "payment",
          "type": "tuple"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment",
          "name": "lpPayment",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inPair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippage",
          "type": "uint256"
        }
      ],
      "name": "estimateOutAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPairs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getClaimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "getClaimableRewardsAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nonces",
          "type": "uint256[]"
        }
      ],
      "name": "getClaimableRewardsByNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getReferrer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWEDU",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardsReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "taxRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalTradeVolume",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLiq",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "contract Governance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract LpToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairsCount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairsData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sellVolume",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyVolume",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpRewardsPershare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradeRewardsPershare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLiq",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsReserve",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment",
          "name": "inPayment",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "outPairAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slippage",
          "type": "uint256"
        }
      ],
      "name": "registerAndSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liqRemoval",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment",
          "name": "inPayment",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "outPairAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slippage",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "tokenIsListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensPairAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradeableTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referrerId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d837c0aca03d0633b3bf9d1e78295fc5b1d12b1b555135783c1c5481aad04df",
  "receipt": {
    "to": null,
    "from": "0x8D0739d9D0d49aFCF8d101416cD2759Bf8922013",
    "contractAddress": "0x983DD2F808b583433eAD7ba0953Ca73de253B276",
    "transactionIndex": 1,
    "gasUsed": "77796360",
    "logsBloom": "0x00000040000000000000000000000000000000000000000000800001000040040000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000100000000000000000400000000000080000000000000000000000000000002000000000000000000000040200000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x55be9da5783929443626df408b0662d0232c43d22837c6829b6d6371b442016f",
    "transactionHash": "0x8d837c0aca03d0633b3bf9d1e78295fc5b1d12b1b555135783c1c5481aad04df",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 42576,
        "transactionHash": "0x8d837c0aca03d0633b3bf9d1e78295fc5b1d12b1b555135783c1c5481aad04df",
        "address": "0x983DD2F808b583433eAD7ba0953Ca73de253B276",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x55be9da5783929443626df408b0662d0232c43d22837c6829b6d6371b442016f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 42576,
        "transactionHash": "0x8d837c0aca03d0633b3bf9d1e78295fc5b1d12b1b555135783c1c5481aad04df",
        "address": "0xA5D059a825C5af7337b9a19E06F60bf31D996dBa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000983dd2f808b583433ead7ba0953ca73de253b276"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x55be9da5783929443626df408b0662d0232c43d22837c6829b6d6371b442016f"
      }
    ],
    "blockNumber": 42576,
    "cumulativeGasUsed": "77796360",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "a6fcc9a791278cbba6b985878983ee32",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMathSD59x18__Exp2InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMathSD59x18__LogInputTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__MulInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__MulOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"ToInt256CastOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"number\",\"type\":\"int256\"}],\"name\":\"ToUint256CastOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityRemoved\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralId\",\"type\":\"uint256\"}],\"name\":\"ReferralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment\",\"name\":\"wholePayment\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePairAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"newNonces\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"computeFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment\",\"name\":\"lpPayment\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"estimateOutAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getClaimableRewardsAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"getClaimableRewardsByNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWEDU\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTradeVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiq\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contract Governance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract LpToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairsCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairsData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sellVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpRewardsPershare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeRewardsPershare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment\",\"name\":\"inPayment\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"outPairAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"registerAndSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liqRemoval\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment\",\"name\":\"inPayment\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"outPairAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenIsListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeableTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity((address,uint256,uint256))\":{\"params\":{\"wholePayment\":\"Payment details for adding liquidity.\"}},\"basePairAddr()\":{\"returns\":{\"_0\":\"Returns the basePair address.\"}},\"claimRewards(uint256[])\":{\"params\":{\"nonces\":\"The desired SFTs to claim from.\"}},\"computeFeePercent(address,uint256)\":{\"details\":\"The more a pair is sold, the higher the feePercent. This is computed based on the pair's sales relative to the provided liquidity in other pairs.\",\"params\":{\"inAmount\":\"The input amount for which the feePercent is being computed.\",\"pairAddress\":\"The address of the pair for which the feePercent is being computed.\"},\"returns\":{\"feePercent\":\"The computed feePercent based on the input amount and the pair's sales.\"}},\"createPair((address,uint256,uint256))\":{\"details\":\"The first pair becomes the base pair -- For now, called by only owner..when DAO is implemented, DAO can call this\",\"returns\":{\"pairAddress\":\"Address of the newly created pair.\"}},\"estimateOutAmount(address,address,uint256,uint256)\":{\"details\":\"The function calculates the amount of output tokens after applying the dynamic fee and slippage.\",\"params\":{\"inAmount\":\"The amount of input tokens.\",\"inPair\":\"The address of the input pair.\",\"outPair\":\"The address of the output pair.\",\"slippage\":\"The maximum allowable slippage percentage (e.g., 50 for 0.5%).\"},\"returns\":{\"amountOut\":\"The estimated amount of output tokens.\"}},\"getAllPairs()\":{\"returns\":{\"_0\":\"Array of pair addresses.\"}},\"getClaimableRewardsByNonces(uint256[])\":{\"params\":{\"nonces\":\"Array of nonces to compute claimable rewards for.\"},\"returns\":{\"totalClaimable\":\"Total claimable rewards for all provided nonces.\"}},\"getReferrer(address)\":{\"params\":{\"userAddress\":\"The address of the user.\"},\"returns\":{\"referrerAddress\":\"The address of the referrer, address(0) if none.\",\"referrerId\":\"The ID of the referrer, 0 if none.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pairsCount()\":{\"returns\":{\"_0\":\"count the total count of listed pairs.\"}},\"removeLiquidity(uint256,uint256)\":{\"params\":{\"liqRemoval\":\"The amount of LP tokens to burn.\",\"nonce\":\"The SFT nonce representing the LP tokens to burn.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"swap((address,uint256,uint256),address,uint256)\":{\"params\":{\"inPayment\":\"Payment details for the trade.\",\"outPairAddr\":\"Address of the output pair.\",\"slippage\":\"Maximum slippage allowed.\"}},\"tradeableTokens()\":{\"returns\":{\"_0\":\"Array of pair addresses.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMathSD59x18__Exp2InputTooBig(int256)\":[{\"notice\":\"Emitted when the input is greater than 192.\"}],\"PRBMathSD59x18__LogInputTooSmall(int256)\":[{\"notice\":\"Emitted when the input is less than or equal to zero.\"}],\"PRBMathSD59x18__MulInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__MulOverflow(uint256)\":[{\"notice\":\"Emitted when the intermediary absolute result overflows SD59x18.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"ToInt256CastOverflow(uint256)\":[{\"notice\":\"Emitted when trying to convert a uint256 number that doesn't fit within int256.\"}],\"ToUint256CastOverflow(int256)\":[{\"notice\":\"Emitted when trying to convert an int256 number that doesn't fit within uint256.\"}]},\"kind\":\"user\",\"methods\":{\"addLiquidity((address,uint256,uint256))\":{\"notice\":\"Adds liquidity to a pair.\"},\"claimRewards(uint256[])\":{\"notice\":\"Claims rewards for a user across all pairs in which they hold LP tokens.\"},\"computeFeePercent(address,uint256)\":{\"notice\":\"Computes the feePercent based on the pair's sales against the liquidity provided in other pairs.\"},\"createPair((address,uint256,uint256))\":{\"notice\":\"Creates a new pair.\"},\"estimateOutAmount(address,address,uint256,uint256)\":{\"notice\":\"Estimates the amount of output tokens to receive for a given input amount, considering slippage.\"},\"getAllPairs()\":{\"notice\":\"Returns the list of all pairs.\"},\"getClaimableRewardsByNonces(uint256[])\":{\"notice\":\"Computes claimable rewards for a list of nonces.\"},\"getReferrer(address)\":{\"notice\":\"Gets the referrer and referrer ID of a user.\"},\"removeLiquidity(uint256,uint256)\":{\"notice\":\"Removes liquidity from a pair and claims the corresponding rewards.\"},\"swap((address,uint256,uint256),address,uint256)\":{\"notice\":\"Executes a trade between two pairs.\"},\"tradeableTokens()\":{\"notice\":\"Returns the list of all trade token addreses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/router/Router.sol\":\"Router\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/ADexToken/ADEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\nimport { ADexInfo } from \\\"./AdexInfo.sol\\\";\\n\\n/**\\n * @title ADEX\\n * @dev ERC20 token representing the Academy-DEX base token. This token is mintable only upon deployment,\\n * with the total supply set to the maximum defined in the `AdexInfo` library. The token is burnable\\n * and is controlled by the owner of the contract.\\n */\\ncontract ADEX is ERC20, Ownable, ERC20Burnable {\\n\\t/**\\n\\t * @dev Initializes the ERC20 token with the name \\\"Academy-DEX-BaseToken\\\" and symbol \\\"ADEX\\\".\\n\\t * Mints the maximum supply of tokens to the contract owner.\\n\\t */\\n\\tconstructor() ERC20(\\\"Academy-DEX-BaseToken\\\", \\\"ADEX\\\") {\\n\\t\\t// Mint the maximum supply to the contract owner.\\n\\t\\t_mint(owner(), ADexInfo.MAX_SUPPLY);\\n\\t}\\n}\\n\",\"keccak256\":\"0x928ecbda741529c86fc74635f1be14cc94a21587869ef2205fa3fbb6c340fc90\",\"license\":\"MIT\"},\"contracts/ADexToken/AdexEmission.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\n\\n/// @notice Emitted when trying to convert a uint256 number that doesn't fit within int256.\\nerror ToInt256CastOverflow(uint256 number);\\n\\n/// @notice Emitted when trying to convert an int256 number that doesn't fit within uint256.\\nerror ToUint256CastOverflow(int256 number);\\n\\n/**\\n * @notice Safely casts a uint256 to int256.\\n * @param x The uint256 number to cast.\\n * @return result The int256 representation of the given uint256.\\n * @dev Reverts with ToInt256CastOverflow if the input number is larger than int256's max value.\\n */\\nfunction toInt256(uint256 x) pure returns (int256 result) {\\n\\tif (x > uint256(type(int256).max)) {\\n\\t\\trevert ToInt256CastOverflow(x);\\n\\t}\\n\\tresult = int256(x);\\n}\\n\\n/**\\n * @notice Safely casts an int256 to uint256.\\n * @param x The int256 number to cast.\\n * @return result The uint256 representation of the given int256.\\n * @dev Reverts with ToUint256CastOverflow if the input number is negative.\\n */\\nfunction toUint256(int256 x) pure returns (uint256 result) {\\n\\tif (x < 0) {\\n\\t\\trevert ToUint256CastOverflow(x);\\n\\t}\\n\\tresult = uint256(x);\\n}\\n\\n/**\\n * @title AdexEmission\\n * @dev A library for calculating the emission of tokens over time based on an epoch model with a decay rate.\\n * @dev Uses PRBMathSD59x18 library for fixed-point math operations.\\n */\\nlibrary AdexEmission {\\n\\tusing PRBMathSD59x18 for int256;\\n\\n\\t/// @dev The decay rate per epoch, represented with 18 decimals (0.9998).\\n\\tint256 private constant DECAY_RATE = 9998e14;\\n\\n\\t/// @dev Initial emission at epoch 0.\\n\\tint256 private constant E0 = 2729727036845720116116;\\n\\n\\t/**\\n\\t * @notice Computes the emission at a specific epoch.\\n\\t * @param epoch The epoch for which to compute the emission.\\n\\t * @return The emission value at the given epoch.\\n\\t */\\n\\tfunction atEpoch(uint256 epoch) internal pure returns (uint256) {\\n\\t\\tint256 decayFactor = PRBMathSD59x18.pow(DECAY_RATE, toInt256(epoch));\\n\\t\\treturn toUint256((E0 * decayFactor) / 1e18);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Computes the total emission over a range of epochs.\\n\\t * @param epochStart The starting epoch.\\n\\t * @param epochEnd The ending epoch.\\n\\t * @return The total emission through the epoch range.\\n\\t * @dev The function computes the emission using the formula:\\n\\t * E0 * (0.9998^epochStart \\u2212 0.9998^epochEnd) / ln(0.9998)\\n\\t */\\n\\tfunction throughEpochRange(\\n\\t\\tuint256 epochStart,\\n\\t\\tuint256 epochEnd\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(epochEnd > epochStart, \\\"Invalid epoch range\\\");\\n\\n\\t\\tint256 startFactor = epochDecayFactor(epochStart);\\n\\t\\tint256 endFactor = epochDecayFactor(epochEnd);\\n\\n\\t\\tint256 totalEmission = (E0 * (startFactor - endFactor)) /\\n\\t\\t\\tDECAY_RATE.ln();\\n\\n\\t\\t// Return the absolute value of totalEmission as uint256\\n\\t\\treturn toUint256(totalEmission * -1);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Computes the emission over a time range within a specific epoch.\\n\\t * @param epoch The epoch during which the time range occurs.\\n\\t * @param timeRange The duration of the time range.\\n\\t * @param epochLength The total length of the epoch.\\n\\t * @return The total emission over the specified time range.\\n\\t */\\n\\tfunction throughTimeRange(\\n\\t\\tuint256 epoch,\\n\\t\\tuint256 timeRange,\\n\\t\\tuint256 epochLength\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn (atEpoch(epoch) * timeRange) / epochLength;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Computes the decay factor for a given epoch.\\n\\t * @param epoch The epoch for which to compute the decay factor.\\n\\t * @return The decay factor for the specified epoch.\\n\\t */\\n\\tfunction epochDecayFactor(uint256 epoch) private pure returns (int256) {\\n\\t\\treturn\\n\\t\\t\\tPRBMathSD59x18.pow(\\n\\t\\t\\t\\tDECAY_RATE,\\n\\t\\t\\t\\t// Extrapolate epoch to size with decimal places of DECAY_RATE\\n\\t\\t\\t\\ttoInt256(epoch) * 1e18\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xea028c07d7c3ff5ff3b5a284321cdf4a8b617d40bab071843b375ca164886222\",\"license\":\"MIT\"},\"contracts/ADexToken/AdexInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/**\\n * @title ADexInfo\\n * @dev A library providing constants related to the Academy-DEX token (ADEX), including its\\n * decimal precision, maximum supply, and various fund allocations.\\n */\\nlibrary ADexInfo {\\n\\t/// @dev The number of decimal places the ADEX token uses (18 decimals).\\n\\tuint256 public constant DECIMALS = 18;\\n\\n\\t/// @dev Represents 1 unit of ADEX in its smallest denomination, taking into account the DECIMALS constant.\\n\\tuint256 public constant ONE = 10 ** DECIMALS;\\n\\n\\t/// @dev The maximum supply of the ADEX token, which is 21 million tokens.\\n\\tuint256 public constant MAX_SUPPLY = 21_000_000 * ONE;\\n\\n\\t/**\\n\\t * @dev The amount of ADEX tokens allocated for ecosystem distribution.\\n\\t * This amount is set to 13.65 million tokens plus an additional fractional amount.\\n\\t */\\n\\tuint256 public constant ECOSYSTEM_DISTRIBUTION_FUNDS =\\n\\t\\t(13_650_000 * ONE) + 2_248_573_618_499_339;\\n\\n\\t/// @dev The initial liquidity provision for the ADEX token, set to 1 million tokens.\\n\\tuint256 public constant INTIAL_LIQUIDITY = 1_000_000 * ONE;\\n\\n\\t/**\\n\\t * @dev The amount of ADEX tokens allocated for the Initial Coin Offering (ICO).\\n\\t * This is calculated as the remaining tokens after subtracting ecosystem distribution\\n\\t * funds and initial liquidity from the maximum supply.\\n\\t */\\n\\tuint256 public constant ICO_FUNDS =\\n\\t\\tMAX_SUPPLY - ECOSYSTEM_DISTRIBUTION_FUNDS - INTIAL_LIQUIDITY;\\n}\\n\",\"keccak256\":\"0x5fc7f1e45435e24f487f1ad3203d00f5aede6ae3eae698c2228cb6ed3ac02b6d\",\"license\":\"MIT\"},\"contracts/common/Amm.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Amm {\\n\\tfunction calculateKConstant(\\n\\t\\tuint256 firstTokenAmt,\\n\\t\\tuint256 secondTokenAmt\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn firstTokenAmt * secondTokenAmt;\\n\\t}\\n\\n\\tfunction quote(\\n\\t\\tuint256 firstTokenAmount,\\n\\t\\tuint256 firstTokenReserve,\\n\\t\\tuint256 secondTokenReserve\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn (firstTokenAmount * secondTokenReserve) / firstTokenReserve;\\n\\t}\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn quote(amountIn, reserveIn + amountIn, reserveOut);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0dc4954af8d679148ea9400064c994e8588a26ed72480d414eb9ef0d51817353\",\"license\":\"MIT\"},\"contracts/common/Epochs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title Epochs and Periods Management Library\\n/// @notice Provides functions to manage and calculate epochs and periods based on a genesis timestamp and epoch length.\\n/// @dev The epoch length is specified in seconds, and the period is calculated as 30 epochs.\\nlibrary Epochs {\\n\\t// Struct to store epoch management parameters\\n\\tstruct Storage {\\n\\t\\tuint256 genesis; // The genesis timestamp\\n\\t\\tuint256 epochLength; // Length of each epoch in seconds\\n\\t}\\n\\n\\t// Initialization Functions\\n\\n\\t/// @notice Initializes the storage with the current timestamp as the genesis and sets the epoch length.\\n\\t/// @param self The storage struct to initialize.\\n\\t/// @param _epochLength The length of an epoch in seconds.\\n\\t/// @dev This function should be called in the contract constructor to set the initial genesis timestamp and epoch length.\\n\\tfunction initialize(Storage storage self, uint256 _epochLength) internal {\\n\\t\\tself.genesis = block.timestamp;\\n\\t\\tself.epochLength = _epochLength;\\n\\n\\t\\trequire(self.epochLength > 0, \\\"Invalid Epoch length\\\");\\n\\t}\\n\\n\\t// View Functions\\n\\n\\t/// @notice Returns the current epoch based on the genesis timestamp and epoch length.\\n\\t/// @param self The storage struct containing the genesis timestamp and epoch length.\\n\\t/// @return The current epoch number.\\n\\t/// @dev The epoch is calculated by dividing the time elapsed since genesis by the epoch length in seconds.\\n\\tfunction currentEpoch(\\n\\t\\tStorage storage self\\n\\t) internal view returns (uint256) {\\n\\t\\treturn computeEpoch(self, block.timestamp);\\n\\t}\\n\\n\\tfunction computeEpoch(\\n\\t\\tStorage storage self,\\n\\t\\tuint256 timestamp\\n\\t) internal view returns (uint256) {\\n\\t\\trequire(self.genesis > 0, \\\"Invalid genesis timestamp\\\");\\n\\t\\trequire(timestamp > 0, \\\"Invalid timestamp\\\");\\n\\t\\trequire(self.epochLength > 0, \\\"Invalid Epoch length\\\");\\n\\n\\t\\treturn (timestamp - self.genesis) / self.epochLength;\\n\\t}\\n\\n\\tfunction epochEdgeTimestamps(\\n\\t\\tStorage memory self,\\n\\t\\tuint256 epoch\\n\\t) internal pure returns (uint256 epochStart, uint256 epochEnd) {\\n\\t\\tepochStart = self.genesis + (epoch * self.epochLength);\\n\\t\\tepochEnd = epochStart + self.epochLength - 1;\\n\\t}\\n}\\n\",\"keccak256\":\"0xbbfe2505164746e81b8c858fd8a70e48c18b4c7b8ddcd3625e91241367ce1da6\",\"license\":\"MIT\"},\"contracts/common/libs/Fee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./Math.sol\\\";\\nimport \\\"./Number.sol\\\";\\n\\nlibrary FeeUtil {\\n\\tusing Number for uint256;\\n\\n\\t/// @dev The maximum percentage value, represented with 2 decimal places (100.00%).\\n\\tuint256 constant MAX_PERCENT = 100_00;\\n\\n\\t/// @dev Struct to hold the different fee values: burn, referrer, and liquidity providers.\\n\\tstruct Values {\\n\\t\\tuint256 toBurnValue; // The portion of the fee that will be burned.\\n\\t\\tuint256 referrerValue; // The portion of the fee allocated to the referrer.\\n\\t\\tuint256 liqProvidersValue; // The portion of the fee allocated to liquidity providers.\\n\\t}\\n\\n\\t/// @dev Balance factor used for calculating ratios, with up to three decimal places of precision.\\n\\tuint64 constant RATIO_BALANCE_FACTOR = 1_000;\\n\\n\\t/// @dev Minimum fee percentage (0.10%).\\n\\tuint64 constant MIN_FEE = 10;\\n\\n\\t/// @dev First fee threshold percentage (0.30%).\\n\\tuint64 constant FIRST_FEE = 30;\\n\\n\\t/// @dev Second fee threshold percentage (3.00%).\\n\\tuint64 constant SECOND_FEE = 3_00;\\n\\n\\t/// @dev Maximum fee percentage (100.00%).\\n\\tuint64 constant THIRD_FEE = uint64(MAX_PERCENT);\\n\\n\\t/**\\n\\t * @notice Calculates the fee percentage based on the total sales of a pair, total liquidity, and the number of pairs.\\n\\t * @param pairTotalSales The total sales amount for the pair.\\n\\t * @param totalLiq The total liquidity across all pairs.\\n\\t * @param pairsCount The number of pairs.\\n\\t * @return percent The calculated fee percentage.\\n\\t */\\n\\tfunction feePercent(\\n\\t\\tuint256 pairTotalSales,\\n\\t\\tuint256 totalLiq,\\n\\t\\tuint64 pairsCount\\n\\t) internal pure returns (uint256 percent) {\\n\\t\\tuint64 ratio = _pairRatio(pairTotalSales, totalLiq, pairsCount);\\n\\n\\t\\t(\\n\\t\\t\\tuint64 minIn,\\n\\t\\t\\tuint64 maxIn,\\n\\t\\t\\tuint64 minOut,\\n\\t\\t\\tuint64 maxOut\\n\\t\\t) = _getInterValues(ratio, pairsCount);\\n\\n\\t\\tpercent = MathUtil.linearInterpolation(\\n\\t\\t\\tminIn,\\n\\t\\t\\tmaxIn,\\n\\t\\t\\tratio,\\n\\t\\t\\tminOut,\\n\\t\\t\\tmaxOut\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the interpolation values based on the ratio and the number of pairs.\\n\\t * @param ratio The calculated pair ratio.\\n\\t * @param pairsCount The number of pairs.\\n\\t * @return minIn The minimum input for interpolation.\\n\\t * @return maxIn The maximum input for interpolation.\\n\\t * @return minOut The minimum output for interpolation.\\n\\t * @return maxOut The maximum output for interpolation.\\n\\t */\\n\\tfunction _getInterValues(\\n\\t\\tuint256 ratio,\\n\\t\\tuint64 pairsCount\\n\\t)\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns (uint64 minIn, uint64 maxIn, uint64 minOut, uint64 maxOut)\\n\\t{\\n\\t\\tminIn = 1;\\n\\t\\tmaxIn = RATIO_BALANCE_FACTOR;\\n\\t\\tminOut = MIN_FEE;\\n\\t\\tmaxOut = FIRST_FEE;\\n\\n\\t\\tuint64 MAX_RATIO_BALANCE_FACTOR = _maxRatioBalanceFactor(pairsCount);\\n\\n\\t\\tuint64 count = 0;\\n\\t\\twhile (ratio > maxIn) {\\n\\t\\t\\tminIn = maxIn + 1;\\n\\t\\t\\tminOut = maxOut + 1;\\n\\n\\t\\t\\tif (count == 0) {\\n\\t\\t\\t\\tmaxIn = MAX_RATIO_BALANCE_FACTOR / 5;\\n\\t\\t\\t\\tmaxOut = SECOND_FEE;\\n\\t\\t\\t} else if (count == 1) {\\n\\t\\t\\t\\tmaxIn = MAX_RATIO_BALANCE_FACTOR;\\n\\t\\t\\t\\tmaxOut = THIRD_FEE;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\n\\t\\t\\t\\t\\t\\\"FeeUtil._getInterValues: max call depth for interpolation values\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates the maximum ratio balance factor based on the number of pairs.\\n\\t * @param pairsCount The number of pairs.\\n\\t * @return max The maximum ratio balance factor.\\n\\t */\\n\\tfunction _maxRatioBalanceFactor(\\n\\t\\tuint64 pairsCount\\n\\t) private pure returns (uint64 max) {\\n\\t\\tmax = pairsCount * RATIO_BALANCE_FACTOR;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Computes the pair ratio based on total sales, total liquidity, and the number of pairs.\\n\\t * @param pairTotalSales The total sales amount for the pair.\\n\\t * @param totalLiq The total liquidity across all pairs.\\n\\t * @param pairsCount The number of pairs.\\n\\t * @return ratio The computed pair ratio.\\n\\t */\\n\\tfunction _pairRatio(\\n\\t\\tuint256 pairTotalSales,\\n\\t\\tuint256 totalLiq,\\n\\t\\tuint64 pairsCount\\n\\t) private pure returns (uint64 ratio) {\\n\\t\\tuint256 value = (pairTotalSales * RATIO_BALANCE_FACTOR) /\\n\\t\\t\\t_liqRatio(totalLiq, pairsCount);\\n\\t\\tratio = value.clamp(1, _maxRatioBalanceFactor(pairsCount));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Computes the liquidity ratio, which is the total sales divided by the number of pairs.\\n\\t * @param sales The total sales amount.\\n\\t * @param pairsCount The number of pairs.\\n\\t * @return gRatio The computed liquidity ratio.\\n\\t */\\n\\tfunction _liqRatio(\\n\\t\\tuint256 sales,\\n\\t\\tuint64 pairsCount\\n\\t) private pure returns (uint256 gRatio) {\\n\\t\\trequire(pairsCount > 0, \\\"FeeUtil: no available pairs\\\");\\n\\n\\t\\tgRatio = sales / pairsCount;\\n\\t\\tif (gRatio <= 1) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Computes the total fee shares.\\n\\t * @param self The Values struct containing the fee shares.\\n\\t * @return The total fee value.\\n\\t */\\n\\tfunction total(Values memory self) internal pure returns (uint256) {\\n\\t\\treturn self.toBurnValue + self.referrerValue + self.liqProvidersValue;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Splits the fee into shares for burning, referrer, and liquidity providers.\\n\\t * @param fee The total fee amount.\\n\\t * @return A Values struct with the split values.\\n\\t */\\n\\tfunction splitFee(uint256 fee) internal pure returns (Values memory) {\\n\\t\\tuint256 toBurnValue = (fee * 5_00) / MAX_PERCENT; // 5%\\n\\t\\tuint256 referrerValue = (fee * 2_00) / MAX_PERCENT; // 2%\\n\\t\\tuint256 liqProvidersValue = fee - toBurnValue - referrerValue;\\n\\n\\t\\treturn Values(toBurnValue, referrerValue, liqProvidersValue);\\n\\t}\\n}\\n\",\"keccak256\":\"0x43ebd3c8a6659fa11b2c28943934bcec5669d56fca08e71008c3f73801412034\",\"license\":\"MIT\"},\"contracts/common/libs/Math.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary MathUtil {\\n\\t/// out = (minOut * (maxIn - currentIn) + maxOut * (currentIn - minIn)) / (maxIn - minIn)\\n\\t/// https://en.wikipedia.org/wiki/LinearInterpolation\\n\\tfunction linearInterpolation(\\n\\t\\tuint256 minIn,\\n\\t\\tuint256 maxIn,\\n\\t\\tuint256 currentIn,\\n\\t\\tuint256 minOut,\\n\\t\\tuint256 maxOut\\n\\t) internal pure returns (uint256) {\\n\\t\\tif (currentIn < minIn || currentIn > maxIn) {\\n\\t\\t\\trevert(\\\"Math.linearInterpolation: Invalid values\\\");\\n\\t\\t}\\n\\n\\t\\tuint256 minOutWeighted = minOut * (maxIn - currentIn);\\n\\t\\tuint256 maxOutWeighted = maxOut * (currentIn - minIn);\\n\\t\\tuint256 inDiff = maxIn - minIn;\\n\\n\\t\\treturn (minOutWeighted + maxOutWeighted) / inDiff;\\n\\t}\\n}\\n\",\"keccak256\":\"0x74d46feaf93a836c38a6dfd5499971c312d241cdba33839f25f37d216b8ac0c1\",\"license\":\"MIT\"},\"contracts/common/libs/Number.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Number {\\n\\t/// @notice Restrict a value to a certain interval (Inspired by the `clamp` method in Rust number types).\\n\\t/// @dev Returns `max` if `self` is greater than `max`, and `min` if `self` is less than `min`.\\n\\t///      Otherwise, returns `self`.\\n\\t/// @param self The value to be clamped.\\n\\t/// @param min The minimum value allowed.\\n\\t/// @param max The maximum value allowed.\\n\\t/// @return clamped The clamped value.\\n\\t/// @dev Panics if `min > max`.\\n\\tfunction clamp(\\n\\t\\tuint256 self,\\n\\t\\tuint64 min,\\n\\t\\tuint64 max\\n\\t) internal pure returns (uint64 clamped) {\\n\\t\\tassert(min <= max);\\n\\t\\tif (self < min) {\\n\\t\\t\\tclamped = min;\\n\\t\\t} else if (self > max) {\\n\\t\\t\\tclamped = max;\\n\\t\\t} else {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tclamped := self\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Takes a specific amount from a value, reducing the original value and returning the taken amount.\\n\\t/// @dev If `value` is greater than or equal to `amount`, it subtracts `amount` from `value` and returns `amount`.\\n\\t///      If `value` is less than `amount`, it returns all of `value` and sets `value` to 0.\\n\\t/// @param value The original value, which will be reduced by the taken amount.\\n\\t/// @param amount The amount to be taken from `value`.\\n\\t/// @return remaining The remaining value after the amount is taken.\\n\\t/// @return taken The actual amount taken.\\n\\tfunction take(\\n\\t\\tuint256 value,\\n\\t\\tuint256 amount\\n\\t) internal pure returns (uint256 remaining, uint256 taken) {\\n\\t\\trequire(amount <= value, \\\"Invalid take amount\\\");\\n\\n\\t\\ttaken = amount;\\n\\t\\tremaining = value - amount;\\n\\t}\\n}\\n\",\"keccak256\":\"0xb42a8c4d6be9415ebc920221a765d0a2f0b7932402263bbf10bcd6194d5d3c76\",\"license\":\"MIT\"},\"contracts/common/libs/Slippage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Slippage {\\n\\tuint256 constant MAX_PERCENTAGE = 100_00;\\n\\n\\tfunction _checkSlippage(uint256 slippage) private pure returns (uint256) {\\n\\t\\tif (slippage < 1 || slippage > MAX_PERCENTAGE) {\\n\\t\\t\\trevert(\\\"Invalid slippage value\\\");\\n\\t\\t}\\n\\n\\t\\treturn MAX_PERCENTAGE - slippage;\\n\\t}\\n\\n\\tfunction compute(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 slippage\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn (amount * _checkSlippage(slippage)) / MAX_PERCENTAGE;\\n\\t}\\n}\\n\",\"keccak256\":\"0x36826bc6f26a64cf828533937fcec13c961404cc6eaf03089da2e2406b11f338\",\"license\":\"MIT\"},\"contracts/common/libs/TokenPayments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SFT } from \\\"../../modules/SFT.sol\\\";\\nimport { WEDU } from \\\"./WEDU.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nstruct TokenPayment {\\n\\taddress token;\\n\\tuint256 amount;\\n\\tuint256 nonce;\\n}\\n\\nlibrary TokenPayments {\\n\\tusing Address for address;\\n\\n\\tfunction receiveToken(TokenPayment memory payment) internal {\\n\\t\\treceiveToken(payment, msg.sender);\\n\\t}\\n\\n\\tfunction receiveToken(TokenPayment memory payment, address from) internal {\\n\\t\\tif (msg.value > 0) {\\n\\t\\t\\t// Native payment (ETH)\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tpayment.amount == msg.value,\\n\\t\\t\\t\\t\\\"TokenPayments: ETH amount mismatch\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tfrom == msg.sender,\\n\\t\\t\\t\\t\\\"TokenPayments: Native payment must be from caller\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Wrap EDU into WEDU\\n\\t\\t\\tWEDU(payable(payment.token)).deposit{ value: msg.value }();\\n\\t\\t} else if (payment.nonce == 0) {\\n\\t\\t\\t// ERC20 payment\\n\\t\\t\\tIERC20(payment.token).transferFrom(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tpayment.amount\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\t// SFT payment\\n\\t\\t\\tSFT(payment.token).safeTransferFrom(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tpayment.nonce,\\n\\t\\t\\t\\tpayment.amount,\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction sendToken(TokenPayment memory payment, address to) internal {\\n\\t\\tif (payment.nonce == 0) {\\n\\t\\t\\tbool shouldMoveEthBalance = false;\\n\\t\\t\\tif (!to.isContract()) {\\n\\t\\t\\t\\tuint256 beforeBal = address(this).balance;\\n\\n\\t\\t\\t\\t// Try to withdraw ETH assuming payment.token is WEDU\\n\\t\\t\\t\\t(shouldMoveEthBalance, ) = payment.token.call(\\n\\t\\t\\t\\t\\tabi.encodeWithSignature(\\\"withdraw(uint256)\\\", payment.amount)\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Checks to ensure balance movements\\n\\t\\t\\t\\tif (shouldMoveEthBalance) {\\n\\t\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t\\t(beforeBal + payment.amount) == address(this).balance,\\n\\t\\t\\t\\t\\t\\t\\\"Failed to withdraw WEDU\\\"\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (shouldMoveEthBalance) {\\n\\t\\t\\t\\tpayable(to).transfer(payment.amount);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tIERC20(payment.token).transfer(to, payment.amount);\\n\\t\\t\\t}\\n\\t\\t} else if (payment.nonce == 0) {\\n\\t\\t\\t// ERC20 payment\\n\\t\\t\\tIERC20(payment.token).transfer(to, payment.amount);\\n\\t\\t} else {\\n\\t\\t\\t// SFT payment\\n\\t\\t\\tSFT(payment.token).safeTransferFrom(\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tto,\\n\\t\\t\\t\\tpayment.nonce,\\n\\t\\t\\t\\tpayment.amount,\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction approve(TokenPayment memory payment, address to) internal {\\n\\t\\tif (payment.nonce == 0) {\\n\\t\\t\\t// ERC20 approval\\n\\t\\t\\tIERC20(payment.token).approve(to, payment.amount);\\n\\t\\t} else {\\n\\t\\t\\t// SFT approval\\n\\t\\t\\tSFT(payment.token).setApprovalForAll(to, true);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x7cd10b1717007cc3be7aab187eb548191e612ddea972e7ce9cac20e3e1c6c4a1\",\"license\":\"MIT\"},\"contracts/common/libs/WEDU.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @title WEDU (Wrapped EduChain) Token\\n/// @notice This contract wraps EduChain (EDU) native tokens into ERC20-compliant WEDU tokens.\\ncontract WEDU is ERC20 {\\n    \\n    /// @notice Constructor initializes the ERC20 token with name and symbol.\\n    constructor() ERC20(\\\"Wrapped EduChain\\\", \\\"WEDU\\\") {}\\n\\n    /// @notice Fallback function to receive EDU and automatically wrap it into WEDU.\\n    /// The received EDU will be wrapped as WEDU and credited to the sender.\\n    receive() external payable {\\n        deposit();\\n    }\\n\\n    /// @notice Wraps EDU into WEDU tokens. The amount of WEDU minted equals the amount of EDU sent.\\n    /// @dev This function mints WEDU tokens equivalent to the amount of EDU sent by the user.\\n    function deposit() public payable {\\n        _mint(msg.sender, msg.value);\\n    }\\n\\n    /// @notice Unwraps WEDU tokens back into EDU.\\n    /// @param amount The amount of WEDU tokens to unwrap.\\n    /// @dev This function burns the specified amount of WEDU tokens and sends the equivalent amount of EDU to the user.\\n    function withdraw(uint256 amount) public {\\n        require(balanceOf(msg.sender) >= amount, \\\"WEDU: Insufficient balance\\\");\\n        _burn(msg.sender, amount);\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    /// @notice Allows an approved spender to use WEDU tokens on behalf of the sender.\\n    /// @param owner The address of the token owner.\\n    /// @param spender The address of the spender allowed to use the tokens.\\n    /// @dev This function mints WEDU tokens to the owner and approves the spender to use the minted tokens.\\n    function receiveForSpender(address owner, address spender) public payable {\\n        _mint(owner, msg.value);\\n        _approve(owner, spender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0xd2a66249f1bc04375c7067d47e2edf948d9dd0affa8c9300c4b78174826b1b41\",\"license\":\"MIT\"},\"contracts/common/utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nfunction isERC20(address tokenAddress) returns (bool) {\\n\\tif (address(0) == tokenAddress) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t(bool success, bytes memory name) = tokenAddress.call(\\n\\t\\tabi.encodeWithSignature(\\\"name()\\\")\\n\\t);\\n\\trequire(success, \\\"Unable to check low level call for token address\\\");\\n\\n\\treturn name.length > 0;\\n}\\n\",\"keccak256\":\"0xcfbdbd53e3abe5819b6040075577afb51e41dec5f9a4136c4c0baee09cedb0fa\",\"license\":\"MIT\"},\"contracts/governance/DeployGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport { Epochs } from \\\"../common/Epochs.sol\\\";\\nimport { Governance } from \\\"./Governance.sol\\\";\\n\\nlibrary DeployGovernance {\\n\\tfunction newGovernance(\\n\\t\\taddress lpToken,\\n\\t\\taddress adex,\\n\\t\\tEpochs.Storage memory epochs\\n\\t) external returns (Governance) {\\n\\t\\taddress caller = msg.sender;\\n\\t\\t(bool success, bytes memory owner) = caller.call(\\n\\t\\t\\tabi.encodeWithSignature(\\\"owner()\\\")\\n\\t\\t);\\n\\n\\t\\taddress feeCollector = success && owner.length > 0\\n\\t\\t\\t? abi.decode(owner, (address))\\n\\t\\t\\t: caller;\\n\\t\\treturn new Governance(lpToken, adex, epochs, feeCollector);\\n\\t}\\n}\\n\",\"keccak256\":\"0x2bb06c08c8b4bde7ea8315e246ea466889cdca917fe857608b286246dda99078\",\"license\":\"MIT\"},\"contracts/governance/DeployLaunchPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport { LaunchPair } from \\\"./LaunchPair.sol\\\";\\n\\nlibrary DeployLaunchPair {\\n\\tfunction newLaunchPair(address _lpToken) external returns (LaunchPair) {\\n\\t\\treturn new LaunchPair(_lpToken);\\n\\t}\\n}\\n\",\"keccak256\":\"0xb2ec8a8ab891f32ef44eec079673b2e5df58fd671754039b9ffa2f7cefaf3bef\",\"license\":\"MIT\"},\"contracts/governance/GToken/GToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { GToken } from \\\"./GTokenAttributes.sol\\\";\\nimport { SFT } from \\\"../../modules/SFT.sol\\\";\\nimport { TokenPayment } from \\\"../../common/libs/TokenPayments.sol\\\";\\n\\nstruct GTokensBalance {\\n\\tuint256 nonce;\\n\\tuint256 amount;\\n\\tGToken.Attributes attributes;\\n}\\n\\nuint256 constant GTOKEN_MINT_AMOUNT = 1;\\n\\n/// @title GTokens Contract\\n/// @notice This contract handles the minting of governance tokens (GTokens) used in the ADEX platform.\\n/// @dev The contract extends a semi-fungible token (SFT) and uses GToken attributes for staking.\\ncontract GTokens is SFT {\\n\\tusing GToken for GToken.Attributes;\\n\\n\\tuint256 private _totalStakeWeight;\\n\\tuint256 private _totalLpAmount;\\n\\n\\t/// @notice Constructor to initialize the GTokens contract.\\n\\t/// @dev Sets the name and symbol of the SFT for GTokens.\\n\\tconstructor() SFT(\\\"ADEX Governance Token\\\", \\\"GTADEX\\\") {}\\n\\n\\t/// @notice Mints a new GToken for the given address.\\n\\t/// @dev The function encodes GToken attributes and mints the token with those attributes.\\n\\t/// @param to The address that will receive the minted GToken.\\n\\t/// @param rewardPerShare The reward per share at the time of minting.\\n\\t/// @param epochsLocked The number of epochs for which the LP tokens are locked.\\n\\t/// @param lpAmount The amount of LP tokens staked.\\n\\t/// @param currentEpoch The current epoch when the GToken is minted.\\n\\t/// @param lpPayments An array of TokenPayment structs representing the LP token payments.\\n\\t/// @return uint256 The token ID of the newly minted GToken.\\n\\tfunction mintGToken(\\n\\t\\taddress to,\\n\\t\\tuint256 rewardPerShare,\\n\\t\\tuint256 epochsLocked,\\n\\t\\tuint256 lpAmount,\\n\\t\\tuint256 currentEpoch,\\n\\t\\tTokenPayment[] memory lpPayments\\n\\t) external onlyOwner returns (uint256) {\\n\\t\\t// Create GToken attributes and compute the stake weight\\n\\t\\tbytes memory attributes = abi.encode(\\n\\t\\t\\tGToken\\n\\t\\t\\t\\t.Attributes({\\n\\t\\t\\t\\t\\tlpPayments: lpPayments,\\n\\t\\t\\t\\t\\trewardPerShare: rewardPerShare,\\n\\t\\t\\t\\t\\tepochStaked: currentEpoch,\\n\\t\\t\\t\\t\\tlastClaimEpoch: currentEpoch,\\n\\t\\t\\t\\t\\tepochsLocked: epochsLocked,\\n\\t\\t\\t\\t\\tlpAmount: lpAmount,\\n\\t\\t\\t\\t\\tstakeWeight: 0\\n\\t\\t\\t\\t})\\n\\t\\t\\t\\t.computeStakeWeight() // Compute stake weight based on LP amount and epochs locked\\n\\t\\t);\\n\\n\\t\\t// Mint the GToken with the specified attributes and return the token ID\\n\\t\\treturn _mint(to, GTOKEN_MINT_AMOUNT, attributes);\\n\\t}\\n\\n\\tfunction update(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 amount,\\n\\t\\tGToken.Attributes memory attr\\n\\t) external onlyOwner returns (uint256) {\\n\\t\\trequire(amount <= GTOKEN_MINT_AMOUNT, \\\"GToken: Invalid update amount\\\");\\n\\t\\treturn super.update(user, nonce, amount, abi.encode(attr));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the governance token balance and attributes for a specific user at a given nonce.\\n\\t * @dev This function checks if the user has a Semi-Fungible Token (SFT) at the provided nonce.\\n\\t * If the user does not have a balance at the specified nonce, the function will revert with an error.\\n\\t * The function then returns the governance balance for the user at that nonce.\\n\\t *\\n\\t * @param user The address of the user whose balance is being queried.\\n\\t * @param nonce The nonce for the specific GToken to retrieve.\\n\\t *\\n\\t * @return GTokensBalance A struct containing the nonce, amount, and attributes of the GToken.\\n\\t *\\n\\t * Requirements:\\n\\t * - The user must have a GToken balance at the specified nonce.\\n\\t */\\n\\tfunction getBalanceAt(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce\\n\\t) public view returns (GTokensBalance memory) {\\n\\t\\trequire(\\n\\t\\t\\thasSFT(user, nonce),\\n\\t\\t\\t\\\"No GToken balance found at nonce for user\\\"\\n\\t\\t);\\n\\n\\t\\treturn\\n\\t\\t\\tGTokensBalance({\\n\\t\\t\\t\\tnonce: nonce,\\n\\t\\t\\t\\tamount: balanceOf(user, nonce),\\n\\t\\t\\t\\tattributes: abi.decode(\\n\\t\\t\\t\\t\\t_getRawTokenAttributes(nonce),\\n\\t\\t\\t\\t\\t(GToken.Attributes)\\n\\t\\t\\t\\t)\\n\\t\\t\\t});\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves the entire GToken balance and attributes for a specific user.\\n\\t * @dev This function queries all Semi-Fungible Tokens (SFTs) held by the user and decodes\\n\\t * the attributes for each GToken.\\n\\t *\\n\\t * @param user The address of the user whose balances are being queried.\\n\\t *\\n\\t * @return GTokensBalance[] An array of structs, each containing the nonce, amount, and attributes\\n\\t * of the user's GTokens.\\n\\t */\\n\\tfunction getGTokenBalance(\\n\\t\\taddress user\\n\\t) public view returns (GTokensBalance[] memory) {\\n\\t\\tSftBalance[] memory _sftBals = _sftBalance(user);\\n\\t\\tGTokensBalance[] memory balance = new GTokensBalance[](_sftBals.length);\\n\\n\\t\\tfor (uint256 i = 0; i < _sftBals.length; i++) {\\n\\t\\t\\tSftBalance memory _sftBal = _sftBals[i];\\n\\n\\t\\t\\tbalance[i] = GTokensBalance({\\n\\t\\t\\t\\tnonce: _sftBal.nonce,\\n\\t\\t\\t\\tamount: _sftBal.amount,\\n\\t\\t\\t\\tattributes: abi.decode(_sftBal.attributes, (GToken.Attributes))\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\tfunction totalStakeWeight() public view returns (uint256) {\\n\\t\\treturn _totalStakeWeight;\\n\\t}\\n\\n\\tfunction totalLpAmount() public view returns (uint256) {\\n\\t\\treturn _totalLpAmount;\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal override {\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n\\t\\tfor (uint256 i; i < ids.length; i++) {\\n\\t\\t\\tuint256 id = ids[i];\\n\\t\\t\\tGToken.Attributes memory attr = abi.decode(\\n\\t\\t\\t\\t_getRawTokenAttributes(id),\\n\\t\\t\\t\\t(GToken.Attributes)\\n\\t\\t\\t);\\n\\n\\t\\t\\tif (from == address(0) && to != address(0)) {\\n\\t\\t\\t\\t// We are minting, so increease staking weight\\n\\t\\t\\t\\t_totalStakeWeight += attr.stakeWeight;\\n\\t\\t\\t\\t_totalLpAmount += attr.lpAmount;\\n\\t\\t\\t} else if (from != address(0) && to == address(0)) {\\n\\t\\t\\t\\t// We are burning, so decrease staking weight\\n\\t\\t\\t\\t_totalStakeWeight -= attr.stakeWeight;\\n\\t\\t\\t\\t_totalLpAmount -= attr.lpAmount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x736bbc49f539a82f2c6eacf1420babf01b7ba9e2988524d1f495f29ba010030a\",\"license\":\"MIT\"},\"contracts/governance/GToken/GTokenAttributes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { TokenPayment } from \\\"../../common/libs/TokenPayments.sol\\\";\\nimport { MathUtil } from \\\"../../common/libs/Math.sol\\\";\\n\\n/// @title GToken Library\\n/// @notice This library provides functions for managing GToken attributes, including staking, claiming rewards, and calculating stake weights and rewards.\\nlibrary GToken {\\n\\t/// @dev Attributes struct holds the data related to a participant's stake in the GToken contract.\\n\\tstruct Attributes {\\n\\t\\tuint256 rewardPerShare;\\n\\t\\tuint256 epochStaked;\\n\\t\\tuint256 epochsLocked;\\n\\t\\tuint256 lastClaimEpoch;\\n\\t\\tuint256 lpAmount;\\n\\t\\tuint256 stakeWeight;\\n\\t\\tTokenPayment[] lpPayments;\\n\\t}\\n\\n\\t// Constants for lock periods and percentage loss calculations\\n\\tuint256 public constant MIN_EPOCHS_LOCK = 30;\\n\\tuint256 public constant MAX_EPOCHS_LOCK = 1080;\\n\\tuint256 public constant MIN_EPOCHS_LOCK_PERCENT_LOSS = 55e4; // 55% in basis points\\n\\tuint256 public constant MAX_EPOCHS_LOCK_PERCENT_LOSS = 15e4; // 15% in basis points\\n\\tuint256 public constant MAX_PERCENT_LOSS = 100e4; // 100% in basis points\\n\\n\\t/// @notice Computes the stake weight based on the amount of LP tokens and the epochs locked.\\n\\t/// @param self The Attributes struct of the participant.\\n\\t/// @return The updated Attributes struct with the computed stake weight.\\n\\tfunction computeStakeWeight(\\n\\t\\tAttributes memory self\\n\\t) internal pure returns (Attributes memory) {\\n\\t\\tuint256 epochsLocked = self.epochsLocked;\\n\\n\\t\\trequire(\\n\\t\\t\\tMIN_EPOCHS_LOCK <= epochsLocked && epochsLocked <= MAX_EPOCHS_LOCK,\\n\\t\\t\\t\\\"GToken: Invalid epochsLocked\\\"\\n\\t\\t);\\n\\n\\t\\t// Calculate stake weight based on LP amount and epochs locked\\n\\t\\tself.stakeWeight = self.lpAmount * epochsLocked;\\n\\n\\t\\treturn self;\\n\\t}\\n\\n\\t/// @notice Calculates the number of epochs that have elapsed since staking.\\n\\t/// @param self The Attributes struct of the participant.\\n\\t/// @param currentEpoch The current epoch.\\n\\t/// @return The number of epochs elapsed since staking.\\n\\tfunction epochsElapsed(\\n\\t\\tAttributes memory self,\\n\\t\\tuint256 currentEpoch\\n\\t) internal pure returns (uint256) {\\n\\t\\tif (currentEpoch <= self.epochStaked) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treturn currentEpoch - self.epochStaked;\\n\\t}\\n\\n\\t/// @notice Calculates the number of epochs remaining until the stake is unlocked.\\n\\t/// @param self The Attributes struct of the participant.\\n\\t/// @param currentEpoch The current epoch.\\n\\t/// @return The number of epochs remaining until unlock.\\n\\tfunction epochsLeft(\\n\\t\\tAttributes memory self,\\n\\t\\tuint256 currentEpoch\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 elapsed = epochsElapsed(self, currentEpoch);\\n\\t\\tif (elapsed >= self.epochsLocked) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treturn self.epochsLocked - elapsed;\\n\\t}\\n\\n\\t/// @notice Calculates the user's vote power based on the locked GToken amount and remaining epochs.\\n\\t/// @param self The Attributes struct of the participant.\\n\\t/// @return The calculated vote power as a uint256.\\n\\t/// @dev see https://wiki.sovryn.com/en/governance/about-sovryn-governance\\n\\tfunction votePower(\\n\\t\\tAttributes memory self,\\n\\t\\tuint256 currentEpoch\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 xPow = (MAX_EPOCHS_LOCK - epochsLeft(self, currentEpoch)) ** 2;\\n\\t\\tuint256 mPow = MAX_EPOCHS_LOCK ** 2;\\n\\n\\t\\tuint256 voteWeight = ((9 * xPow) / mPow) - 1;\\n\\n\\t\\treturn self.lpAmount * voteWeight;\\n\\t}\\n\\n\\t/// @notice Calculates the number of epochs since the last reward claim.\\n\\t/// @param self The Attributes struct of the participant.\\n\\t/// @return The number of epochs since the last claim.\\n\\tfunction epochsUnclaimed(\\n\\t\\tAttributes memory self\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn self.epochsLocked - self.lastClaimEpoch;\\n\\t}\\n\\n\\t/// @notice Calculates the amount of value to keep based on epochs elapsed and locked.\\n\\t/// @param self The Attributes struct of the participant.\\n\\t/// @param value The total value amount.\\n\\t/// @param currentEpoch The current epoch.\\n\\t/// @return The amount of value to keep after applying penalties.\\n\\tfunction valueToKeep(\\n\\t\\tAttributes memory self,\\n\\t\\tuint256 value,\\n\\t\\tuint256 currentEpoch\\n\\t) internal pure returns (uint256) {\\n\\t\\t// Calculate percentage loss based on epochs locked\\n\\t\\tuint256 epochsLockedPercentLoss = MathUtil.linearInterpolation(\\n\\t\\t\\tMIN_EPOCHS_LOCK,\\n\\t\\t\\tMAX_EPOCHS_LOCK,\\n\\t\\t\\tself.epochsLocked,\\n\\t\\t\\tMIN_EPOCHS_LOCK_PERCENT_LOSS,\\n\\t\\t\\tMAX_EPOCHS_LOCK_PERCENT_LOSS\\n\\t\\t);\\n\\n\\t\\t// Calculate the percentage of the value to keep after penalties\\n\\t\\tuint256 percentLost = epochsElapsedPercentLoss(\\n\\t\\t\\tepochsElapsed(self, currentEpoch),\\n\\t\\t\\tepochsLockedPercentLoss,\\n\\t\\t\\tself.epochsLocked\\n\\t\\t);\\n\\n\\t\\tuint256 percentToKeep = MAX_PERCENT_LOSS - percentLost;\\n\\t\\treturn (value * percentToKeep) / MAX_PERCENT_LOSS;\\n\\t}\\n\\n\\t/// @notice Calculates the percentage loss of the reward based on elapsed epochs.\\n\\t/// @param elapsed The number of epochs elapsed since staking.\\n\\t/// @param lockedPercentLoss The percentage loss based on epochs locked.\\n\\t/// @param locked The total epochs locked.\\n\\t/// @return The percentage loss based on epochs elapsed.\\n\\tfunction epochsElapsedPercentLoss(\\n\\t\\tuint256 elapsed,\\n\\t\\tuint256 lockedPercentLoss,\\n\\t\\tuint256 locked\\n\\t) private pure returns (uint256) {\\n\\t\\tuint256 remainingTime = elapsed > locked ? 0 : locked - elapsed;\\n\\n\\t\\treturn\\n\\t\\t\\tMathUtil.linearInterpolation(\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\tlocked,\\n\\t\\t\\t\\tremainingTime,\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\tlockedPercentLoss\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x71cebaca791b1950a08f80927aee09ad3f4e9e40af04a2fb2e38d297c139487d\",\"license\":\"MIT\"},\"contracts/governance/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport { TokenPayment, TokenPayments, IERC20 } from \\\"../common/libs/TokenPayments.sol\\\";\\nimport { GTokens, GToken, GTOKEN_MINT_AMOUNT } from \\\"./GToken/GToken.sol\\\";\\nimport { Epochs } from \\\"../common/Epochs.sol\\\";\\n\\nimport \\\"../router/IRouter.sol\\\";\\nimport \\\"../common/libs/Number.sol\\\";\\nimport \\\"../common/utils.sol\\\";\\n\\nimport { LpToken } from \\\"../modules/LpToken.sol\\\";\\nimport { DeployLaunchPair, LaunchPair } from \\\"./DeployLaunchPair.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary NewGTokens {\\n\\tfunction create() external returns (GTokens) {\\n\\t\\treturn new GTokens();\\n\\t}\\n}\\n\\n/// @title Governance Contract\\n/// @notice This contract handles the governance process by allowing users to lock LP tokens and mint GTokens.\\n/// @dev This contract interacts with the GTokens library and manages LP token payments.\\ncontract Governance is ERC1155Holder, Ownable {\\n\\tusing TokenPayments for TokenPayment;\\n\\tusing Epochs for Epochs.Storage;\\n\\tusing GToken for GToken.Attributes;\\n\\tusing Number for uint256;\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\n\\tuint256 constant REWARDS_DIVISION_SAFETY_CONSTANT = 1e18;\\n\\n\\t// Constants for minimum and maximum LP tokens that can be locked\\n\\tuint256 public constant MIN_LP_TOKENS = 1;\\n\\tuint256 public constant MAX_LP_TOKENS = 10;\\n\\n\\tstruct TokenListing {\\n\\t\\tuint256 yesVote; // Number of yes votes\\n\\t\\tuint256 noVote; // Number of no votes\\n\\t\\tuint256 totalLpAmount; // Total LP amount locked for the listing\\n\\t\\tuint256 endEpoch; // Epoch when the listing proposal ends\\n\\t\\taddress owner; // The owner proposing the listing\\n\\t\\tTokenPayment securityLpPayment;\\n\\t\\tTokenPayment tradeTokenPayment; // The token proposed for trading\\n\\t\\tuint256 campaignId; // launchPair campaign ID\\n\\t}\\n\\n\\t// This could be set by governance\\n\\tuint256 public constant LISTING_FEE = 20e18;\\n\\n\\t// Reward per share for governance users\\n\\tuint256 public rewardPerShare;\\n\\tuint256 public rewardsReserve;\\n\\n\\tuint256 public protocolFees;\\n\\taddress immutable protocolFeesCollector;\\n\\n\\t// Instance of GTokens contract\\n\\tGTokens public immutable gtokens;\\n\\n\\t// Address of the LP token contract\\n\\taddress public immutable lpTokenAddress;\\n\\n\\t// Address of the Base token contract\\n\\taddress public immutable adexTokenAddress;\\n\\tIRouter private immutable _router;\\n\\n\\t// Storage for epochs management\\n\\tEpochs.Storage public epochs;\\n\\n\\t// Mapping of user to their active votes on token listings\\n\\tmapping(address => EnumerableSet.UintSet) private _userVotes;\\n\\n\\t// Mapping of user to the token they voted for\\n\\tmapping(address => address) public userVote;\\n\\n\\t// The current active listing\\n\\tTokenListing public activeListing;\\n\\n\\t// Mapping of token owner to their proposed listing\\n\\tmapping(address => TokenListing) public pairOwnerListing;\\n\\n\\tLaunchPair public launchPair;\\n\\n\\t/// @notice Constructor to initialize the Governance contract.\\n\\t/// @param _lpToken The address of the LP token contract.\\n\\t/// @param _adex The address of the ADEX token contract.\\n\\t/// @param epochs_ The epochs storage instance for managing epochs.\\n\\t/// @param protocolFeesCollector_ The address to collect protocol fees.\\n\\tconstructor(\\n\\t\\taddress _lpToken,\\n\\t\\taddress _adex,\\n\\t\\tEpochs.Storage memory epochs_,\\n\\t\\taddress protocolFeesCollector_\\n\\t) {\\n\\t\\tlpTokenAddress = _lpToken;\\n\\t\\tadexTokenAddress = _adex;\\n\\n\\t\\tgtokens = NewGTokens.create();\\n\\t\\tlaunchPair = DeployLaunchPair.newLaunchPair(_lpToken);\\n\\t\\tepochs = epochs_;\\n\\n\\t\\t_router = IRouter(msg.sender);\\n\\n\\t\\trequire(\\n\\t\\t\\tprotocolFeesCollector_ != address(0),\\n\\t\\t\\t\\\"Invalid Protocol Fees collector\\\"\\n\\t\\t);\\n\\t\\tprotocolFeesCollector = protocolFeesCollector_;\\n\\t}\\n\\n\\tfunction currentEpoch() public view returns (uint256) {\\n\\t\\treturn epochs.currentEpoch();\\n\\t}\\n\\n\\tfunction takeProtocolFees() external {\\n\\t\\taddress caller = msg.sender;\\n\\t\\trequire(caller == protocolFeesCollector, \\\"Not allowed\\\");\\n\\n\\t\\tIERC20(adexTokenAddress).transfer(protocolFeesCollector, protocolFees);\\n\\t\\tprotocolFees = 0;\\n\\t}\\n\\n\\t/// @notice Internal function to validate if a TokenPayment is a valid LP token payment.\\n\\t/// @param payment The TokenPayment struct to validate.\\n\\t/// @return bool indicating if the payment is valid.\\n\\tfunction _isValidLpPayment(\\n\\t\\tTokenPayment memory payment\\n\\t) internal view returns (bool) {\\n\\t\\treturn\\n\\t\\t\\tpayment.nonce > 0 &&\\n\\t\\t\\tpayment.token == lpTokenAddress &&\\n\\t\\t\\tpayment.amount > 0;\\n\\t}\\n\\n\\tfunction _addReward(TokenPayment calldata payment) private {\\n\\t\\tuint256 rewardAmount = payment.amount;\\n\\t\\trequire(\\n\\t\\t\\trewardAmount > 0,\\n\\t\\t\\t\\\"Governance: Reward amount must be greater than zero\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tpayment.token == adexTokenAddress,\\n\\t\\t\\t\\\"Governance: Invalid reward payment\\\"\\n\\t\\t);\\n\\t\\tpayment.receiveToken();\\n\\n\\t\\tuint256 protocolAmount;\\n\\t\\t(rewardAmount, protocolAmount) = rewardAmount.take(\\n\\t\\t\\t(rewardAmount * 3) / 10\\n\\t\\t); // 30% for protocol fee\\n\\n\\t\\tuint256 totalStakeWeight = gtokens.totalStakeWeight();\\n\\t\\t// We will receive rewards regardless of if Governance staking has begun\\n\\t\\tif (totalStakeWeight > 0) {\\n\\t\\t\\trewardPerShare +=\\n\\t\\t\\t\\t(rewardAmount * REWARDS_DIVISION_SAFETY_CONSTANT) /\\n\\t\\t\\t\\ttotalStakeWeight;\\n\\t\\t}\\n\\n\\t\\tprotocolFees += protocolAmount;\\n\\t\\trewardsReserve += rewardAmount;\\n\\t}\\n\\n\\t/// @notice Function to enter governance by locking LP tokens and minting GTokens.\\n\\t/// @param receivedPayments The array of TokenPayment structs sent by the user.\\n\\t/// @param epochsLocked The number of epochs the LP tokens will be locked for.\\n\\tfunction enterGovernance(\\n\\t\\tTokenPayment[] calldata receivedPayments,\\n\\t\\tuint256 epochsLocked\\n\\t) external returns (uint256) {\\n\\t\\tif (rewardPerShare == 0 && rewardsReserve > 0) {\\n\\t\\t\\t// First staker when there's reward must lock for max lock time\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tepochsLocked == GToken.MAX_EPOCHS_LOCK,\\n\\t\\t\\t\\t\\\"Governance: First stakers must lock for max epoch\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Count valid LP token payments\\n\\t\\tuint256 paymentsCount = 0;\\n\\t\\tfor (uint256 i = 0; i < receivedPayments.length; i++) {\\n\\t\\t\\tif (_isValidLpPayment(receivedPayments[i])) {\\n\\t\\t\\t\\tpaymentsCount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Ensure the number of valid payments is within allowed limits\\n\\t\\trequire(\\n\\t\\t\\tMIN_LP_TOKENS <= paymentsCount && paymentsCount <= MAX_LP_TOKENS,\\n\\t\\t\\t\\\"Governance: Invalid LpPayments sent\\\"\\n\\t\\t);\\n\\n\\t\\t// Build and receive valid LP token payments\\n\\t\\tTokenPayment[] memory lpPayments = new TokenPayment[](paymentsCount);\\n\\t\\tuint256 lpIndex = 0;\\n\\t\\tuint256 lpAmount = 0;\\n\\t\\tuint256 adexAmount = 0;\\n\\t\\tfor (uint256 i = 0; i < receivedPayments.length; i++) {\\n\\t\\t\\tTokenPayment memory payment = receivedPayments[i];\\n\\t\\t\\tif (_isValidLpPayment(payment)) {\\n\\t\\t\\t\\tpayment.receiveToken();\\n\\n\\t\\t\\t\\tlpAmount += payment.amount;\\n\\t\\t\\t\\tlpPayments[lpIndex] = payment;\\n\\n\\t\\t\\t\\tLpToken.LpAttributes memory attr = LpToken(lpTokenAddress)\\n\\t\\t\\t\\t\\t.getBalanceAt(address(this), payment.nonce)\\n\\t\\t\\t\\t\\t.attributes;\\n\\t\\t\\t\\tif (attr.tradeToken == adexTokenAddress) {\\n\\t\\t\\t\\t\\tadexAmount += payment.amount;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tlpIndex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (msg.sender != address(this)) {\\n\\t\\t\\t// ADEX is first class token in the DEX, so All GTokens holders must possess sufficient amount based on liq they provided\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t((adexAmount * 100) / lpAmount) >= 10, // 10% for now\\n\\t\\t\\t\\t\\\"Not enough ADEX liquidity used\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Mint GTokens for the user\\n\\t\\treturn\\n\\t\\t\\tgtokens.mintGToken(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\trewardPerShare,\\n\\t\\t\\t\\tepochsLocked,\\n\\t\\t\\t\\tlpAmount,\\n\\t\\t\\t\\tepochs.currentEpoch(),\\n\\t\\t\\t\\tlpPayments\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Receives rewards from the owner (typically Router Contract) and updates rewardPerShare and rewardsReserve.\\n\\t * @param payment The TokenPayment struct containing the reward details.\\n\\t *\\n\\t * The function will:\\n\\t * - Require that the reward amount is greater than zero.\\n\\t * - Require that the token in the payment is the ADEX token.\\n\\t * - Transfer the reward tokens to the contract.\\n\\t * - Update the `rewardPerShare` based on the `rewardAmount` and `totalStakeWeight`.\\n\\t * - Update the `rewardsReserve` with the received reward amount.\\n\\t *\\n\\t * @dev This function reverts if the reward amount is zero or if the payment token is invalid.\\n\\t *\\n\\t * Reverts with:\\n\\t * - \\\"Governance: Reward amount must be greater than zero\\\" if the reward amount is zero.\\n\\t * - \\\"Governance: Invalid payment\\\" if the payment token is not the ADEX token.\\n\\t */\\n\\tfunction receiveRewards(TokenPayment calldata payment) external onlyOwner {\\n\\t\\t_addReward(payment);\\n\\t}\\n\\n\\tfunction _calculateClaimableReward(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce\\n\\t)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256 claimableReward, GToken.Attributes memory attributes)\\n\\t{\\n\\t\\tattributes = gtokens.getBalanceAt(user, nonce).attributes;\\n\\n\\t\\t// Calculate the difference in reward per share since the last claim\\n\\t\\tuint256 rewardDifference = rewardPerShare - attributes.rewardPerShare;\\n\\n\\t\\tclaimableReward =\\n\\t\\t\\t(attributes.stakeWeight * rewardDifference) /\\n\\t\\t\\tREWARDS_DIVISION_SAFETY_CONSTANT;\\n\\t}\\n\\n\\t/// @notice Allows a user to claim their accumulated rewards based on their current stake.\\n\\t/// @dev This function will transfer the calculated claimable reward to the user,\\n\\t/// update the user's reward attributes, and decrease the rewards reserve.\\n\\t/// @param nonce The specific nonce representing a unique staking position of the user.\\n\\t/// @return Updated staking attributes for the user after claiming the reward.\\n\\tfunction claimRewards(uint256 nonce) external returns (uint256) {\\n\\t\\taddress user = msg.sender;\\n\\t\\t(\\n\\t\\t\\tuint256 claimableReward,\\n\\t\\t\\tGToken.Attributes memory attributes\\n\\t\\t) = _calculateClaimableReward(user, nonce);\\n\\t\\tuint256[] memory nonces = _getLpNonces(attributes);\\n\\t\\t(uint256 lpRewardsClaimed, uint256[] memory newLpNonces) = _router\\n\\t\\t\\t.claimRewards(nonces);\\n\\n\\t\\tuint256 total = claimableReward + lpRewardsClaimed;\\n\\t\\trequire(total > 0, \\\"Governance: No rewards to claim\\\");\\n\\n\\t\\tif (claimableReward > 0) {\\n\\t\\t\\t// Reduce the rewards reserve by the claimed amount\\n\\t\\t\\trewardsReserve -= claimableReward;\\n\\t\\t\\t// Update user's rewardPerShare to the current rewardPerShare\\n\\t\\t\\tattributes.rewardPerShare = rewardPerShare;\\n\\t\\t\\tattributes.lastClaimEpoch = epochs.currentEpoch();\\n\\t\\t}\\n\\n\\t\\tif (lpRewardsClaimed > 0) {\\n\\t\\t\\tfor (uint256 i = 0; i < newLpNonces.length; i++) {\\n\\t\\t\\t\\tattributes.lpPayments[i].nonce = newLpNonces[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Transfer the claimable reward to the user\\n\\t\\tIERC20(adexTokenAddress).transfer(user, total);\\n\\n\\t\\treturn gtokens.update(user, nonce, GTOKEN_MINT_AMOUNT, attributes);\\n\\t}\\n\\n\\tfunction increaseEpochsLocked(\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 extraEpochs\\n\\t) external returns (GToken.Attributes memory attributes) {\\n\\t\\taddress user = msg.sender;\\n\\n\\t\\t{\\n\\t\\t\\tuint256 claimableReward;\\n\\n\\t\\t\\t(claimableReward, attributes) = _calculateClaimableReward(\\n\\t\\t\\t\\tuser,\\n\\t\\t\\t\\tnonce\\n\\t\\t\\t);\\n\\n\\t\\t\\tif (claimableReward > 0) {\\n\\t\\t\\t\\tnonce = this.claimRewards(nonce);\\n\\t\\t\\t\\tattributes = gtokens.getBalanceAt(user, nonce).attributes;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tattributes.epochsLocked += extraEpochs;\\n\\t\\tif (attributes.epochsLocked > GToken.MAX_EPOCHS_LOCK) {\\n\\t\\t\\tattributes.epochsLocked = GToken.MAX_EPOCHS_LOCK;\\n\\t\\t}\\n\\n\\t\\tgtokens.update(user, nonce, GTOKEN_MINT_AMOUNT, attributes);\\n\\t}\\n\\n\\tfunction _getLpNonces(\\n\\t\\tGToken.Attributes memory attributes\\n\\t) internal pure returns (uint256[] memory nonces) {\\n\\t\\tuint256 totalNonces = attributes.lpPayments.length;\\n\\t\\tnonces = new uint256[](totalNonces);\\n\\t\\tfor (uint256 i = 0; i < totalNonces; i++) {\\n\\t\\t\\tnonces[i] = attributes.lpPayments[i].nonce;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getClaimableRewards(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce\\n\\t) external view returns (uint256 totalClaimable) {\\n\\t\\tGToken.Attributes memory attributes;\\n\\n\\t\\t(totalClaimable, attributes) = _calculateClaimableReward(user, nonce);\\n\\n\\t\\tuint256[] memory nonces = _getLpNonces(attributes);\\n\\t\\ttotalClaimable += _router.getClaimableRewardsByNonces(nonces);\\n\\t}\\n\\n\\t/// @notice Exits governance by burning GTokens and unlocking the user's staked LP tokens.\\n\\t/// @param nonce The nonce representing the user's specific staking position.\\n\\tfunction exitGovernance(uint256 nonce) external {\\n\\t\\taddress user = msg.sender;\\n\\n\\t\\t// Retrieve the user's GToken attributes for the specified nonce\\n\\t\\tGToken.Attributes memory attributes = gtokens\\n\\t\\t\\t.getBalanceAt(user, nonce)\\n\\t\\t\\t.attributes;\\n\\n\\t\\t// Calculate the amount of LP tokens to return to the user\\n\\t\\tuint256 lpAmountToReturn = attributes.valueToKeep(\\n\\t\\t\\tattributes.lpAmount,\\n\\t\\t\\tattributes.epochsElapsed(epochs.currentEpoch())\\n\\t\\t);\\n\\t\\tTokenPayment[] memory lpPayments = attributes.lpPayments;\\n\\t\\t// Process each LP payment associated with the staking position\\n\\t\\tfor (uint256 i; i < lpPayments.length; i++) {\\n\\t\\t\\tTokenPayment memory lpPayment = lpPayments[i];\\n\\n\\t\\t\\t// Adjust the LP payment amount based on the remaining LP amount to return\\n\\t\\t\\tif (lpAmountToReturn == 0) {\\n\\t\\t\\t\\tlpPayment.amount = 0;\\n\\t\\t\\t\\tlpPayment.nonce = 0;\\n\\t\\t\\t} else if (lpAmountToReturn > lpPayment.amount) {\\n\\t\\t\\t\\tlpAmountToReturn -= lpPayment.amount;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlpPayment.amount = lpAmountToReturn;\\n\\t\\t\\t\\tlpAmountToReturn = 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Transfer the LP tokens back to the user if there's an amount to return\\n\\t\\t\\tif (lpPayment.amount > 0) {\\n\\t\\t\\t\\tLpToken(lpTokenAddress).safeTransferFrom(\\n\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\tuser,\\n\\t\\t\\t\\t\\tlpPayment.nonce,\\n\\t\\t\\t\\t\\tlpPayment.amount,\\n\\t\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Burn the user's GToken by setting the amount to 0\\n\\t\\tgtokens.update(user, nonce, 0, attributes);\\n\\t}\\n\\n\\t/// @notice Proposes a new pair listing by submitting the required listing fee and GToken payment.\\n\\t/// @param listingFeePayment The payment details for the listing fee.\\n\\t/// @param securityPayment The ADEX payment as security deposit\\n\\t/// @param tradeTokenPayment The the trade token to be listed with launchPair distribution amount, if any.\\n\\tfunction proposeNewPairListing(\\n\\t\\tTokenPayment calldata listingFeePayment,\\n\\t\\tTokenPayment calldata securityPayment,\\n\\t\\tTokenPayment calldata tradeTokenPayment\\n\\t) external {\\n\\t\\t_endVoting();\\n\\n\\t\\taddress tradeToken = tradeTokenPayment.token;\\n\\n\\t\\t// Ensure there is no active listing proposal\\n\\t\\trequire(\\n\\t\\t\\tpairOwnerListing[msg.sender].owner == address(0) &&\\n\\t\\t\\t\\tactiveListing.owner == address(0),\\n\\t\\t\\t\\\"Governance: Previous proposal not completed\\\"\\n\\t\\t);\\n\\n\\t\\t// Validate the trade token and ensure it is not already listed\\n\\t\\trequire(\\n\\t\\t\\tisERC20(tradeToken) && !_router.tokenIsListed(tradeToken),\\n\\t\\t\\t\\\"Governance: Invalid Trade token\\\"\\n\\t\\t);\\n\\t\\t// Check if the correct listing fee amount is provided\\n\\t\\trequire(\\n\\t\\t\\tlistingFeePayment.amount == LISTING_FEE,\\n\\t\\t\\t\\\"Governance: Invalid sent listing fee\\\"\\n\\t\\t);\\n\\t\\t// Add the listing fee to the rewards pool\\n\\t\\t_addReward(listingFeePayment);\\n\\n\\t\\trequire(\\n\\t\\t\\t_isValidLpPaymentForListing(securityPayment),\\n\\t\\t\\t\\\"Governance: Invalid LP Payment for proposal\\\"\\n\\t\\t);\\n\\t\\tsecurityPayment.receiveToken();\\n\\n\\t\\trequire(\\n\\t\\t\\ttradeTokenPayment.amount > 0,\\n\\t\\t\\t\\\"Governance: Must send potential initial liquidity\\\"\\n\\t\\t);\\n\\t\\ttradeTokenPayment.receiveToken();\\n\\n\\t\\t// Update the active listing with the new proposal details\\n\\t\\tactiveListing.owner = msg.sender;\\n\\t\\tactiveListing.tradeTokenPayment = tradeTokenPayment;\\n\\t\\tactiveListing.securityLpPayment = securityPayment;\\n\\t\\tactiveListing.endEpoch = currentEpoch() + 7;\\n\\t}\\n\\n\\t/// @notice Validates the LP payment for the listing based on the total ADEX amount in liquidity.\\n\\t/// @param payment The payment details for the LP.\\n\\t/// @return bool indicating if the LP payment is valid.\\n\\tfunction _isValidLpPaymentForListing(\\n\\t\\tTokenPayment calldata payment\\n\\t) private view returns (bool) {\\n\\t\\t// Ensure the payment token is the correct GToken contract\\n\\t\\tif (payment.token != lpTokenAddress) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Retrieve the GToken attributes for the specified nonce\\n\\t\\tLpToken.LpAttributes memory attributes = LpToken(lpTokenAddress)\\n\\t\\t\\t.getBalanceAt(msg.sender, payment.nonce)\\n\\t\\t\\t.attributes;\\n\\n\\t\\treturn\\n\\t\\t\\tattributes.tradeToken == adexTokenAddress &&\\n\\t\\t\\tpayment.amount >= 1_000e18;\\n\\t}\\n\\n\\tfunction _checkProposalPass(\\n\\t\\tuint256 value,\\n\\t\\tuint256 thresholdValue\\n\\t) private pure returns (bool) {\\n\\t\\treturn thresholdValue > 0 && value >= (thresholdValue * 86) / 100;\\n\\t}\\n\\n\\tfunction _returnListingDeposits(TokenListing memory listing) internal {\\n\\t\\tlisting.securityLpPayment.sendToken(listing.owner);\\n\\n\\t\\tif (listing.tradeTokenPayment.amount > 0) {\\n\\t\\t\\tlisting.tradeTokenPayment.sendToken(listing.owner);\\n\\t\\t}\\n\\t\\tdelete pairOwnerListing[msg.sender];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Progresses the new pair listing process for the calling address.\\n\\t *         This function handles the various stages of the listing, including\\n\\t *         voting, launch pad campaign, and liquidity provision.\\n\\t */\\n\\tfunction progressNewPairListing() external {\\n\\t\\t// Retrieve the token listing associated with the caller's address.\\n\\t\\tTokenListing storage listing = pairOwnerListing[msg.sender];\\n\\n\\t\\t// If no listing is found for the sender, end the current voting session.\\n\\t\\tif (listing.owner == address(0)) {\\n\\t\\t\\t_endVoting(); // End the current voting session if no valid listing exists.\\n\\t\\t\\tlisting = pairOwnerListing[msg.sender]; // Refresh listing after ending the vote.\\n\\t\\t}\\n\\n\\t\\t// Ensure that a valid listing exists after the potential refresh.\\n\\t\\trequire(listing.owner != address(0), \\\"No listing found\\\");\\n\\n\\t\\t// Check if the proposal passes both the total LP amount and the voting requirements.\\n\\t\\tbool passedForTotalGTokenLp = _checkProposalPass(\\n\\t\\t\\tlisting.totalLpAmount,\\n\\t\\t\\tgtokens.totalLpAmount()\\n\\t\\t);\\n\\t\\tbool passedForYesVotes = _checkProposalPass(\\n\\t\\t\\tlisting.yesVote,\\n\\t\\t\\tlisting.yesVote + listing.noVote\\n\\t\\t);\\n\\t\\tif (!(passedForTotalGTokenLp && passedForYesVotes)) {\\n\\t\\t\\t// If the proposal did not pass, return the deposits to the listing owner.\\n\\t\\t\\t_returnListingDeposits(listing);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Handle the launch pad and price discovery stages.\\n\\t\\tif (listing.campaignId == 0) {\\n\\t\\t\\t// If no campaign has been created yet, create a new one for the listing owner.\\n\\t\\t\\tlisting.campaignId = launchPair.createCampaign(listing.owner);\\n\\t\\t} else {\\n\\t\\t\\t// Retrieve details of the existing campaign.\\n\\t\\t\\tLaunchPair.Campaign memory campaign = launchPair.getCampaignDetails(\\n\\t\\t\\t\\tlisting.campaignId\\n\\t\\t\\t);\\n\\n\\t\\t\\tif (campaign.goal > 0 && block.timestamp > campaign.deadline) {\\n\\t\\t\\t\\tif (campaign.fundsRaised < campaign.goal) {\\n\\t\\t\\t\\t\\tcampaign.status = LaunchPair.CampaignStatus.Failed;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tcampaign.status = LaunchPair.CampaignStatus.Success;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check the campaign status.\\n\\t\\t\\tif (campaign.status != LaunchPair.CampaignStatus.Success) {\\n\\t\\t\\t\\t// If the campaign failed, return the deposits to the listing owner.\\n\\t\\t\\t\\tif (campaign.status == LaunchPair.CampaignStatus.Failed) {\\n\\t\\t\\t\\t\\t_returnListingDeposits(listing);\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// If the campaign is not complete, revert the transaction.\\n\\t\\t\\t\\trevert(\\\"Governance: Funding not complete\\\");\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If the campaign is successful and funds have not been withdrawn.\\n\\t\\t\\tif (!campaign.isWithdrawn) {\\n\\t\\t\\t\\t// Store the current balance of the contract before withdrawing funds.\\n\\t\\t\\t\\tuint256 ethBal = address(this).balance;\\n\\n\\t\\t\\t\\t// Withdraw the funds raised in the campaign.\\n\\t\\t\\t\\tuint256 fundsRaised = launchPair.withdrawFunds(\\n\\t\\t\\t\\t\\tlisting.campaignId\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Ensure that the funds were successfully withdrawn.\\n\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\tethBal + fundsRaised == address(this).balance,\\n\\t\\t\\t\\t\\t\\\"Governance: Funds not withdrawn for campaign\\\"\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Add liquidity to the router with the withdrawn funds.\\n\\t\\t\\t\\tuint256 lpNonce = _router.addLiquidity{ value: fundsRaised }(\\n\\t\\t\\t\\t\\tTokenPayment({ token: address(0), amount: 0, nonce: 0 })\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Get the LP token balance resulting from the liquidity addition.\\n\\t\\t\\t\\tuint256 lpAmount = LpToken(lpTokenAddress)\\n\\t\\t\\t\\t\\t.getBalanceAt(address(this), lpNonce)\\n\\t\\t\\t\\t\\t.amount;\\n\\n\\t\\t\\t\\t// Prepare the payments array for entering governance.\\n\\t\\t\\t\\tTokenPayment[] memory payments = new TokenPayment[](2);\\n\\t\\t\\t\\tpayments[0] = listing.securityLpPayment;\\n\\t\\t\\t\\tpayments[1] = TokenPayment({\\n\\t\\t\\t\\t\\tamount: lpAmount,\\n\\t\\t\\t\\t\\tnonce: lpNonce,\\n\\t\\t\\t\\t\\ttoken: lpTokenAddress\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t// Enter governance with the provided payments and lock the GTokens.\\n\\t\\t\\t\\tuint256 gTokenNonce = this.enterGovernance(\\n\\t\\t\\t\\t\\tpayments,\\n\\t\\t\\t\\t\\tGToken.MAX_EPOCHS_LOCK\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Transfer the minted GTokens to the listing owner.\\n\\t\\t\\t\\tgtokens.safeTransferFrom(\\n\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\tlisting.owner,\\n\\t\\t\\t\\t\\tgTokenNonce,\\n\\t\\t\\t\\t\\tGTOKEN_MINT_AMOUNT,\\n\\t\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Clear the security LP payment after successful governance entry.\\n\\t\\t\\t\\tdelete listing.securityLpPayment;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// If funds have already been withdrawn, proceed to create the trading pair.\\n\\t\\t\\t\\tlisting.tradeTokenPayment.approve(address(_router));\\n\\n\\t\\t\\t\\t// Create the trading pair using the router and receive LP tokens.\\n\\t\\t\\t\\t(, TokenPayment memory lpPayment) = _router.createPair(\\n\\t\\t\\t\\t\\tlisting.tradeTokenPayment\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Clear the trade token payment after pair creation.\\n\\t\\t\\t\\tdelete listing.tradeTokenPayment;\\n\\n\\t\\t\\t\\t// Approve the LP tokens for use by the launch pair contract.\\n\\t\\t\\t\\tlpPayment.approve(address(launchPair));\\n\\n\\t\\t\\t\\t// Transfer the LP tokens to the launch pair contract.\\n\\t\\t\\t\\tlaunchPair.receiveLpToken(lpPayment, listing.campaignId);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows users to vote on whether a new token pair should be listed.\\n\\t * @param gTokenPayment The gToken payment details used for voting.\\n\\t * @param tradeToken The address of the trade token being voted on.\\n\\t * @param shouldList A boolean indicating the user's vote (true for yes, false for no).\\n\\t */\\n\\tfunction vote(\\n\\t\\tTokenPayment calldata gTokenPayment,\\n\\t\\taddress tradeToken,\\n\\t\\tbool shouldList\\n\\t) external {\\n\\t\\taddress user = msg.sender;\\n\\n\\t\\t// Ensure that the trade token is valid and active for voting.\\n\\t\\trequire(\\n\\t\\t\\tisERC20(tradeToken) &&\\n\\t\\t\\t\\tactiveListing.tradeTokenPayment.token == tradeToken,\\n\\t\\t\\t\\\"Token not active\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tgTokenPayment.token == address(gtokens),\\n\\t\\t\\t\\\"Governance: Invalid Payment\\\"\\n\\t\\t);\\n\\n\\t\\t// Calculate the user's vote power based on their gToken attributes.\\n\\t\\tGToken.Attributes memory attributes = gtokens\\n\\t\\t\\t.getBalanceAt(user, gTokenPayment.nonce)\\n\\t\\t\\t.attributes;\\n\\t\\tuint256 epochsLeft = attributes.epochsLeft(\\n\\t\\t\\tattributes.epochsElapsed(epochs.currentEpoch())\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tepochsLeft >= 360,\\n\\t\\t\\t\\\"GToken expired, must have atleast 360 epochs left to vote with\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 votePower = attributes.votePower(epochsLeft);\\n\\n\\t\\t// Receive the gToken payment and record the user's vote.\\n\\t\\tgTokenPayment.receiveToken();\\n\\t\\t_userVotes[user].add(gTokenPayment.nonce);\\n\\n\\t\\t// Apply the user's vote to the active listing.\\n\\t\\tif (shouldList) {\\n\\t\\t\\tactiveListing.yesVote += votePower;\\n\\t\\t} else {\\n\\t\\t\\tactiveListing.noVote += votePower;\\n\\t\\t}\\n\\n\\t\\t// Update the total LP amount and record the user's vote for the trade token.\\n\\t\\tactiveListing.totalLpAmount += attributes.lpAmount;\\n\\t\\tuserVote[user] = tradeToken;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Ends the voting process for the active token listing.\\n\\t * @dev This function ensures that the voting period has ended before finalizing the listing.\\n\\t */\\n\\tfunction _endVoting() private {\\n\\t\\trequire(\\n\\t\\t\\tactiveListing.endEpoch <= currentEpoch(),\\n\\t\\t\\t\\\"Voting not complete\\\"\\n\\t\\t);\\n\\n\\t\\t// Finalize the listing and store it under the owner's address.\\n\\t\\tpairOwnerListing[activeListing.owner] = activeListing;\\n\\t\\tdelete activeListing; // Clear the active listing to prepare for the next one.\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows users to recall their vote tokens after voting has ended or been canceled.\\n\\t */\\n\\tfunction recallVoteToken() external {\\n\\t\\taddress user = msg.sender;\\n\\t\\taddress tradeToken = userVote[user];\\n\\t\\tEnumerableSet.UintSet storage userVoteNonces = _userVotes[user];\\n\\n\\t\\t// Ensure the user has votes to recall.\\n\\t\\trequire(userVoteNonces.length() > 0, \\\"No vote found\\\");\\n\\n\\t\\tif (tradeToken != address(0)) {\\n\\t\\t\\tdelete userVote[user]; // Clear the user's vote record.\\n\\t\\t\\tif (tradeToken == activeListing.tradeTokenPayment.token)\\n\\t\\t\\t\\t_endVoting();\\n\\t\\t}\\n\\n\\t\\t// Recall up to 10 vote tokens at a time.\\n\\t\\tuint256 count = 0;\\n\\t\\twhile (count < 10 && userVoteNonces.length() > 0) {\\n\\t\\t\\tcount++;\\n\\n\\t\\t\\tuint256 nonce = userVoteNonces.at(userVoteNonces.length() - 1);\\n\\t\\t\\tuserVoteNonces.remove(nonce);\\n\\t\\t\\tgtokens.safeTransferFrom(\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tuser,\\n\\t\\t\\t\\tnonce,\\n\\t\\t\\t\\tGTOKEN_MINT_AMOUNT,\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0xa55864b6b43df5cfc806730c6a16d86131973ee76b767f151bfba0b0d5e9e0b4\",\"license\":\"MIT\"},\"contracts/governance/LaunchPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nimport { TokenPayment, TokenPayments } from \\\"../common/libs/TokenPayments.sol\\\";\\nimport { LpToken } from \\\"../modules/LpToken.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title LaunchPair\\n * @dev This contract facilitates the creation and management of crowdfunding campaigns for launching new tokens. Participants contribute funds to campaigns, and if the campaign is successful, they receive launchPair tokens in return. If the campaign fails, their contributions are refunded.\\n */\\ncontract LaunchPair is Ownable, ERC1155Holder {\\n\\tusing TokenPayments for TokenPayment;\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\n\\tenum CampaignStatus {\\n\\t\\tPending,\\n\\t\\tFunding,\\n\\t\\tFailed,\\n\\t\\tSuccess\\n\\t}\\n\\n\\tstruct Campaign {\\n\\t\\taddress creator;\\n\\t\\tuint256 lpNonce;\\n\\t\\tuint256 goal;\\n\\t\\tuint256 deadline;\\n\\t\\tuint256 fundsRaised;\\n\\t\\tbool isWithdrawn;\\n\\t\\tCampaignStatus status;\\n\\t}\\n\\n\\t// Mapping from campaign ID to Campaign struct\\n\\tmapping(uint256 => Campaign) public campaigns;\\n\\n\\t// Mapping from campaign ID to a participant's address to their contribution amount\\n\\tmapping(uint256 => mapping(address => uint256)) public contributions;\\n\\n\\t// Mapping from a user's address to the set of campaign IDs they participated in\\n\\tmapping(address => EnumerableSet.UintSet) private _userCampaigns;\\n\\n\\t// Set of all campaign IDs\\n\\tEnumerableSet.UintSet private _activeCampaigns;\\n\\n\\t// Total number of campaigns created\\n\\tuint256 public campaignCount;\\n\\n\\t// Event emitted when a new campaign is created\\n\\tevent CampaignCreated(\\n\\t\\tuint256 indexed campaignId,\\n\\t\\taddress indexed creator,\\n\\t\\tuint256 goal,\\n\\t\\tuint256 deadline\\n\\t);\\n\\n\\t// Event emitted when a contribution is made to a campaign\\n\\tevent ContributionMade(\\n\\t\\tuint256 indexed campaignId,\\n\\t\\taddress indexed contributor,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\t// Event emitted when tokens are distributed to a participant\\n\\tevent TokensDistributed(\\n\\t\\tuint256 indexed campaignId,\\n\\t\\taddress indexed contributor,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\t// Event emitted when the campaign creator withdraws funds after a successful campaign\\n\\tevent FundsWithdrawn(\\n\\t\\tuint256 indexed campaignId,\\n\\t\\taddress indexed creator,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\t// Event emitted when a refund is issued to a participant after a failed campaign\\n\\tevent RefundIssued(\\n\\t\\tuint256 indexed campaignId,\\n\\t\\taddress indexed contributor,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\t// Modifier to ensure the caller is the creator of the campaign\\n\\tmodifier onlyCreator(uint256 _campaignId) {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == campaigns[_campaignId].creator,\\n\\t\\t\\t\\\"Not campaign creator\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t// Modifier to ensure the campaign exists\\n\\tmodifier campaignExists(uint256 _campaignId) {\\n\\t\\trequire(\\n\\t\\t\\tcampaigns[_campaignId].creator != address(0),\\n\\t\\t\\t\\\"Campaign does not exist\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t// Modifier to ensure the campaign has not expired\\n\\tmodifier isNotExpired(uint256 _campaignId) {\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp <= campaigns[_campaignId].deadline,\\n\\t\\t\\t\\\"Campaign expired\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t// Modifier to ensure the campaign has met its funding goal\\n\\tmodifier hasMetGoal(uint256 _campaignId) {\\n\\t\\trequire(\\n\\t\\t\\tcampaigns[_campaignId].fundsRaised >= campaigns[_campaignId].goal,\\n\\t\\t\\t\\\"Goal not met\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t// Modifier to ensure the campaign funds have not been withdrawn yet\\n\\tmodifier hasNotWithdrawn(uint256 _campaignId) {\\n\\t\\trequire(!campaigns[_campaignId].isWithdrawn, \\\"Funds already withdrawn\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t// Modifier to ensure the caller is a participant in the specified campaign\\n\\tmodifier isCampaignParticipant(address user, uint256 _campaignId) {\\n\\t\\trequire(\\n\\t\\t\\t_userCampaigns[user].contains(_campaignId),\\n\\t\\t\\t\\\"Not a participant of selected campaign\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tLpToken immutable lpToken;\\n\\n\\tconstructor(address _lpToken) {\\n\\t\\tlpToken = LpToken(_lpToken);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates a new crowdfunding campaign.\\n\\t * @param _creator The address of the campaign creator.\\n\\t * @return campaignId The ID of the newly created campaign.\\n\\t */\\n\\tfunction createCampaign(\\n\\t\\taddress _creator\\n\\t) external onlyOwner returns (uint256 campaignId) {\\n\\t\\tcampaignId = ++campaignCount;\\n\\t\\tcampaigns[campaignId] = Campaign({\\n\\t\\t\\tcreator: payable(_creator),\\n\\t\\t\\tgoal: 0,\\n\\t\\t\\tdeadline: 0,\\n\\t\\t\\tfundsRaised: 0,\\n\\t\\t\\tlpNonce: 0,\\n\\t\\t\\tisWithdrawn: false,\\n\\t\\t\\tstatus: CampaignStatus.Pending\\n\\t\\t});\\n\\t}\\n\\n\\tfunction receiveLpToken(\\n\\t\\tTokenPayment calldata payment,\\n\\t\\tuint256 _campaignId\\n\\t) external onlyOwner campaignExists(_campaignId) hasMetGoal(_campaignId) {\\n\\t\\trequire(payment.amount > 0, \\\"Invalid payment\\\");\\n\\t\\tpayment.receiveToken();\\n\\n\\t\\tCampaign storage campaign = campaigns[_campaignId];\\n\\t\\trequire(\\n\\t\\t\\tcampaign.lpNonce == 0,\\n\\t\\t\\t\\\"Launchpair: Campaign received lp already\\\"\\n\\t\\t);\\n\\t\\tcampaign.lpNonce = payment.nonce;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Starts a created campaign.\\n\\t * @param _goal The funding goal for the campaign.\\n\\t * @param _duration The duration of the campaign in seconds.\\n\\t * @param _campaignId The ID of the newly created campaign.\\n\\t */\\n\\tfunction startCampaign(\\n\\t\\tuint256 _goal,\\n\\t\\tuint256 _duration,\\n\\t\\tuint256 _campaignId\\n\\t) external onlyCreator(_campaignId) {\\n\\t\\trequire(_goal > 0 && _duration > 0, \\\"Invalid input\\\");\\n\\n\\t\\tCampaign storage campaign = campaigns[_campaignId];\\n\\t\\trequire(\\n\\t\\t\\tcampaign.status == CampaignStatus.Pending,\\n\\t\\t\\t\\\"Campaign begun already\\\"\\n\\t\\t);\\n\\n\\t\\tcampaign.goal = _goal;\\n\\t\\tcampaign.deadline = block.timestamp + _duration;\\n\\t\\tcampaign.status = CampaignStatus.Funding;\\n\\n\\t\\t_activeCampaigns.add(_campaignId);\\n\\t\\temit CampaignCreated(\\n\\t\\t\\t_campaignId,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_goal,\\n\\t\\t\\tblock.timestamp + _duration\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Contribute to a crowdfunding campaign.\\n\\t * @param _campaignId The ID of the campaign to contribute to.\\n\\t */\\n\\tfunction contribute(\\n\\t\\tuint256 _campaignId\\n\\t) external payable campaignExists(_campaignId) isNotExpired(_campaignId) {\\n\\t\\trequire(msg.value > 0, \\\"Contribution must be greater than 0\\\");\\n\\n\\t\\tCampaign storage campaign = campaigns[_campaignId];\\n\\t\\trequire(\\n\\t\\t\\tcampaign.status == CampaignStatus.Funding,\\n\\t\\t\\t\\\"Campaign is not in funding status\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 weiAmount = msg.value;\\n\\t\\tcampaign.fundsRaised += weiAmount;\\n\\t\\tcontributions[_campaignId][msg.sender] += weiAmount;\\n\\n\\t\\t// Add the campaign to the user's participated campaigns if this is their first contribution\\n\\t\\tif (contributions[_campaignId][msg.sender] == weiAmount) {\\n\\t\\t\\t_userCampaigns[msg.sender].add(_campaignId);\\n\\t\\t}\\n\\n\\t\\temit ContributionMade(_campaignId, msg.sender, weiAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdraw funds after the campaign successfully meets its goal.\\n\\t * @param _campaignId The ID of the campaign to withdraw funds from.\\n\\t */\\n\\tfunction withdrawFunds(\\n\\t\\tuint256 _campaignId\\n\\t)\\n\\t\\texternal\\n\\t\\tcampaignExists(_campaignId)\\n\\t\\tonlyOwner\\n\\t\\thasMetGoal(_campaignId)\\n\\t\\thasNotWithdrawn(_campaignId)\\n\\t\\treturns (uint256 amount)\\n\\t{\\n\\t\\tCampaign storage campaign = campaigns[_campaignId];\\n\\n\\t\\tamount = campaign.fundsRaised;\\n\\t\\tcampaign.isWithdrawn = true;\\n\\t\\tcampaign.status = CampaignStatus.Success;\\n\\n\\t\\t// Remove the campaign from the set of all campaigns\\n\\t\\t_removeCampaignFromActiveCampaigns(_campaignId);\\n\\n\\t\\tpayable(owner()).transfer(amount);\\n\\t\\temit FundsWithdrawn(_campaignId, msg.sender, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdraw launchPair tokens after a successful campaign.\\n\\t * @param _campaignId The ID of the campaign to withdraw tokens from.\\n\\t */\\n\\tfunction withdrawLaunchPairToken(\\n\\t\\tuint256 _campaignId\\n\\t)\\n\\t\\texternal\\n\\t\\tcampaignExists(_campaignId)\\n\\t\\thasMetGoal(_campaignId)\\n\\t\\tisCampaignParticipant(msg.sender, _campaignId)\\n\\t{\\n\\t\\tCampaign storage campaign = campaigns[_campaignId];\\n\\t\\trequire(\\n\\t\\t\\tcampaign.status == CampaignStatus.Success,\\n\\t\\t\\t\\\"Campaign is not successful\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 lpBalance = lpToken\\n\\t\\t\\t.getBalanceAt(address(this), campaign.lpNonce)\\n\\t\\t\\t.amount;\\n\\n\\t\\tuint256 contribution = contributions[_campaignId][msg.sender];\\n\\t\\tuint256 lpShare = (contribution * lpBalance) / campaign.fundsRaised;\\n\\n\\t\\taddress[] memory addresses = new address[](2);\\n\\t\\tuint256[] memory portions = new uint256[](2);\\n\\n\\t\\taddresses[0] = address(this);\\n\\t\\tportions[0] = lpBalance - lpShare;\\n\\n\\t\\taddresses[1] = msg.sender;\\n\\t\\tportions[1] = lpShare;\\n\\n\\t\\tuint256[] memory nonces = lpToken.split(\\n\\t\\t\\tcampaign.lpNonce,\\n\\t\\t\\taddresses,\\n\\t\\t\\tportions\\n\\t\\t);\\n\\t\\tcampaign.lpNonce = nonces[0];\\n\\n\\t\\t// Remove the campaign from the user's participated campaigns after token withdrawal\\n\\t\\t_removeCampaignFromUserCampaigns(msg.sender, _campaignId);\\n\\n\\t\\temit TokensDistributed(_campaignId, msg.sender, lpShare);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Request a refund after a failed campaign.\\n\\t * @param _campaignId The ID of the campaign to refund.\\n\\t */\\n\\tfunction getRefunded(\\n\\t\\tuint256 _campaignId\\n\\t)\\n\\t\\texternal\\n\\t\\tcampaignExists(_campaignId)\\n\\t\\tisCampaignParticipant(msg.sender, _campaignId)\\n\\t{\\n\\t\\tCampaign storage campaign = campaigns[_campaignId];\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp > campaign.deadline &&\\n\\t\\t\\t\\tcampaign.fundsRaised < campaign.goal,\\n\\t\\t\\t\\\"Refund not available\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 amount = contributions[_campaignId][msg.sender];\\n\\t\\trequire(amount > 0, \\\"No contributions to refund\\\");\\n\\n\\t\\tcontributions[_campaignId][msg.sender] = 0;\\n\\t\\tpayable(msg.sender).transfer(amount);\\n\\n\\t\\t// Update the status to Failed\\n\\t\\tcampaign.status = CampaignStatus.Failed;\\n\\n\\t\\t// Remove the campaign from the user's participated campaigns after refund\\n\\t\\t_removeCampaignFromUserCampaigns(msg.sender, _campaignId);\\n\\n\\t\\temit RefundIssued(_campaignId, msg.sender, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Get details of a specific campaign.\\n\\t * @param _campaignId The ID of the campaign to get details of.\\n\\t * @return campaign The Campaign struct containing all details of the campaign.\\n\\t */\\n\\tfunction getCampaignDetails(\\n\\t\\tuint256 _campaignId\\n\\t) external view returns (Campaign memory) {\\n\\t\\treturn campaigns[_campaignId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Get all campaign IDs.\\n\\t * @return campaignIds An array of all campaign IDs.\\n\\t */\\n\\tfunction getActiveCampaigns() external view returns (uint256[] memory) {\\n\\t\\treturn _activeCampaigns.values();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Get campaign IDs that a user has participated in.\\n\\t * @param user The address of the user.\\n\\t * @return campaignIds An array of campaign IDs that the user has participated in.\\n\\t */\\n\\tfunction getUserCampaigns(\\n\\t\\taddress user\\n\\t) external view returns (uint256[] memory) {\\n\\t\\treturn _userCampaigns[user].values();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Remove a campaign from the set of all campaigns after it's successful or failed.\\n\\t * @param campaignId The ID of the campaign to remove.\\n\\t */\\n\\tfunction _removeCampaignFromActiveCampaigns(uint256 campaignId) internal {\\n\\t\\t_activeCampaigns.remove(campaignId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Remove a campaign from the user's participated campaigns after withdrawal or refund.\\n\\t * @param user The address of the user.\\n\\t * @param campaignId The ID of the campaign to remove.\\n\\t */\\n\\tfunction _removeCampaignFromUserCampaigns(\\n\\t\\taddress user,\\n\\t\\tuint256 campaignId\\n\\t) internal {\\n\\t\\t_userCampaigns[user].remove(campaignId);\\n\\t}\\n}\\n\",\"keccak256\":\"0x00d247eca5510c4b985341db08d0d531f62a189f60da0cef107949367a5b9aa8\",\"license\":\"MIT\"},\"contracts/modules/LpToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport { SFT } from \\\"./SFT.sol\\\";\\n\\ncontract LpToken is SFT {\\n\\tstruct LpAttributes {\\n\\t\\tuint256 rewardPerShare;\\n\\t\\tuint256 depValuePerShare;\\n\\t\\taddress pair;\\n\\t\\taddress tradeToken;\\n\\t}\\n\\n\\tstruct LpBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tLpAttributes attributes;\\n\\t}\\n\\n\\tconstructor() SFT(\\\"Academy-DEX LP Token\\\", \\\"LPADEX\\\") {}\\n\\n\\t/// @notice Returns the SFT balance of a user including detailed attributes.\\n\\t/// @param user The address of the user to check.\\n\\t/// @return An array of `LpBalance` containing the user's balance details.\\n\\tfunction lpBalanceOf(\\n\\t\\taddress user\\n\\t) public view returns (LpBalance[] memory) {\\n\\t\\tSftBalance[] memory _sftBals = _sftBalance(user);\\n\\t\\tLpBalance[] memory balance = new LpBalance[](_sftBals.length);\\n\\n\\t\\tfor (uint256 i; i < _sftBals.length; i++) {\\n\\t\\t\\tSftBalance memory _sftBal = _sftBals[i];\\n\\n\\t\\t\\tbalance[i] = LpBalance({\\n\\t\\t\\t\\tnonce: _sftBal.nonce,\\n\\t\\t\\t\\tamount: _sftBal.amount,\\n\\t\\t\\t\\tattributes: abi.decode(_sftBal.attributes, (LpAttributes))\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\tfunction mint(\\n\\t\\tuint256 rewardPerShare,\\n\\t\\tuint256 lpAmount,\\n\\t\\taddress pair,\\n\\t\\taddress tradeToken,\\n\\t\\taddress to,\\n\\t\\tuint256 depValuePerShare\\n\\t) external onlyOwner returns (uint256) {\\n\\t\\trequire(lpAmount > 0, \\\"LpToken: LP Amount must be greater than 0\\\");\\n\\n\\t\\tbytes memory attributes = abi.encode(\\n\\t\\t\\tLpAttributes({\\n\\t\\t\\t\\trewardPerShare: rewardPerShare,\\n\\t\\t\\t\\tpair: pair,\\n\\t\\t\\t\\ttradeToken: tradeToken,\\n\\t\\t\\t\\tdepValuePerShare: depValuePerShare\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\treturn _mint(to, lpAmount, attributes);\\n\\t}\\n\\n\\tfunction getBalanceAt(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce\\n\\t) public view returns (LpBalance memory) {\\n\\t\\trequire(hasSFT(user, nonce), \\\"No Lp balance found at nonce for user\\\");\\n\\n\\t\\treturn\\n\\t\\t\\tLpBalance({\\n\\t\\t\\t\\tnonce: nonce,\\n\\t\\t\\t\\tamount: balanceOf(user, nonce),\\n\\t\\t\\t\\tattributes: abi.decode(\\n\\t\\t\\t\\t\\t_getRawTokenAttributes(nonce),\\n\\t\\t\\t\\t\\t(LpAttributes)\\n\\t\\t\\t\\t)\\n\\t\\t\\t});\\n\\t}\\n\\n\\tfunction split(\\n\\t\\tuint256 nonce,\\n\\t\\taddress[] calldata addresses,\\n\\t\\tuint256[] calldata portions\\n\\t) external returns (uint256[] memory splitNonces) {\\n\\t\\trequire(addresses.length > 1, \\\"LpToken: addresses too short\\\");\\n\\t\\trequire(\\n\\t\\t\\taddresses.length == portions.length,\\n\\t\\t\\t\\\"LpToken: Portions addresses missmatch\\\"\\n\\t\\t);\\n\\n\\t\\taddress caller = msg.sender;\\n\\t\\tLpBalance memory lpBalance = getBalanceAt(caller, nonce);\\n\\n\\t\\t_burn(caller, nonce, lpBalance.amount);\\n\\t\\tuint256 totalSplitAmount = 0;\\n\\t\\tsplitNonces = new uint256[](addresses.length);\\n\\n\\t\\tbytes memory attributes = abi.encode(lpBalance.attributes);\\n\\t\\tfor (uint256 i; i < addresses.length; i++) {\\n\\t\\t\\taddress to = addresses[i];\\n\\t\\t\\tuint256 amount = portions[i];\\n\\t\\t\\ttotalSplitAmount += amount;\\n\\n\\t\\t\\tsplitNonces[i] = _mint(to, amount, attributes);\\n\\t\\t}\\n\\t\\trequire(\\n\\t\\t\\ttotalSplitAmount == lpBalance.amount,\\n\\t\\t\\t\\\"LpToken: Invalid Portions\\\"\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xf19157852da0914fdfe53e5250247e77e49dacfe4c2853e071d85359ef0d055f\",\"license\":\"MIT\"},\"contracts/modules/SFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SFT is ERC1155, Ownable {\\n\\tusing Counters for Counters.Counter;\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\n\\tstruct SftBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tbytes attributes;\\n\\t}\\n\\n\\tCounters.Counter private _nonceCounter;\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\n\\t// Mapping from nonce to token attributes as bytes\\n\\tmapping(uint256 => bytes) private _tokenAttributes;\\n\\n\\t// Mapping from address to list of owned token nonces\\n\\tmapping(address => EnumerableSet.UintSet) private _addressToNonces;\\n\\n\\tconstructor(string memory name_, string memory symbol_) ERC1155(\\\"\\\") {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t}\\n\\n\\t/// @dev Internal function to mint new tokens with attributes and store the nonce.\\n\\tfunction _mint(\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attributes\\n\\t) internal returns (uint256 nonce) {\\n\\t\\t_nonceCounter.increment();\\n\\t\\tnonce = _nonceCounter.current();\\n\\n\\t\\t// Store the attributes\\n\\t\\t_tokenAttributes[nonce] = attributes;\\n\\n\\t\\t// Mint the token with the nonce as its ID\\n\\t\\tsuper._mint(to, nonce, amount, \\\"\\\");\\n\\n\\t\\t// Track the nonce for the address\\n\\t\\t_addressToNonces[to].add(nonce);\\n\\t}\\n\\n\\t/// @dev Returns the name of the token.\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/// @dev Returns the symbol of the token.\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/// @dev Returns the token name and symbol.\\n\\tfunction tokenInfo() public view returns (string memory, string memory) {\\n\\t\\treturn (_name, _symbol);\\n\\t}\\n\\n\\t/// @dev Returns raw token attributes by nonce.\\n\\t/// @param nonce The nonce of the token.\\n\\t/// @return Attributes in bytes.\\n\\tfunction _getRawTokenAttributes(\\n\\t\\tuint256 nonce\\n\\t) internal view returns (bytes memory) {\\n\\t\\treturn _tokenAttributes[nonce];\\n\\t}\\n\\n\\t/// @dev Returns the list of nonces owned by an address.\\n\\t/// @param owner The address of the token owner.\\n\\t/// @return Array of nonces.\\n\\tfunction getNonces(address owner) public view returns (uint256[] memory) {\\n\\t\\treturn _addressToNonces[owner].values();\\n\\t}\\n\\n\\t/// @dev Checks if the address owns a specific nonce.\\n\\t/// @param owner The address of the token owner.\\n\\t/// @param nonce The nonce to check.\\n\\t/// @return True if the address owns the nonce, otherwise false.\\n\\tfunction hasSFT(address owner, uint256 nonce) public view returns (bool) {\\n\\t\\treturn _addressToNonces[owner].contains(nonce);\\n\\t}\\n\\n\\t/// @dev Burns the tokens of a specific nonce and mints new tokens with updated attributes.\\n\\t/// @param user The address of the token holder.\\n\\t/// @param nonce The nonce of the token to update.\\n\\t/// @param amount The amount of tokens to mint.\\n\\t/// @param attr The new attributes to assign.\\n\\t/// @return The new nonce for the minted tokens.\\n\\tfunction update(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attr\\n\\t) public onlyOwner returns (uint256) {\\n\\t\\t_burn(user, nonce, amount);\\n\\t\\treturn amount > 0 ? _mint(user, amount, attr) : 0;\\n\\t}\\n\\n\\t/// @dev Returns the balance of the user with their token attributes.\\n\\t/// @param user The address of the user.\\n\\t/// @return Array of SftBalance containing nonce, amount, and attributes.\\n\\tfunction _sftBalance(\\n\\t\\taddress user\\n\\t) internal view returns (SftBalance[] memory) {\\n\\t\\tuint256[] memory nonces = getNonces(user);\\n\\t\\tSftBalance[] memory balance = new SftBalance[](nonces.length);\\n\\n\\t\\tfor (uint256 i; i < nonces.length; i++) {\\n\\t\\t\\tuint256 nonce = nonces[i];\\n\\t\\t\\tbytes memory attributes = _tokenAttributes[nonce];\\n\\t\\t\\tuint256 amount = balanceOf(user, nonce);\\n\\n\\t\\t\\tbalance[i] = SftBalance({\\n\\t\\t\\t\\tnonce: nonce,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tattributes: attributes\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\t/// @dev Override _beforeTokenTransfer to handle address-to-nonce mapping.\\n\\t/// @param operator The address performing the transfer.\\n\\t/// @param from The address sending tokens.\\n\\t/// @param to The address receiving tokens.\\n\\t/// @param ids The token IDs being transferred.\\n\\t/// @param amounts The amounts of tokens being transferred.\\n\\t/// @param data Additional data.\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal virtual override {\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tuint256 id = ids[i];\\n\\n\\t\\t\\t_addressToNonces[from].remove(id);\\n\\t\\t\\t_addressToNonces[to].add(id);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x3ea75d1aa27796704284d1b50778916448d13c2917465a784da0490402501682\",\"license\":\"MIT\"},\"contracts/pair/BasePair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./Pair.sol\\\";\\nimport { ADEX } from \\\"../ADexToken/ADEX.sol\\\";\\n\\n/// @title DeployBasePair\\n/// @notice Library to deploy new instances of the `BasePair` contract.\\nlibrary DeployBasePair {\\n\\t/// @notice Deploys a new instance of the `BasePair` contract.\\n\\t/// @dev Deploys a new `ADEX` token and passes its address to the `BasePair` contract.\\n\\t/// @return A new instance of the `BasePair` contract.\\n\\tfunction newBasePair() external returns (BasePair) {\\n\\t\\tADEX adex = new ADEX();\\n\\t\\treturn new BasePair(address(adex));\\n\\t}\\n}\\n\\n/// @title MintableADEX\\n/// @notice A version of the `ADEX` token contract with minting capabilities.\\ncontract MintableADEX is ADEX {\\n\\t/// @notice Mints new `ADEX` tokens by transferring from the owner's balance.\\n\\t/// @param to The address to receive the minted tokens.\\n\\t/// @param amt The amount of tokens to mint.\\n\\tfunction mint(address to, uint256 amt) external {\\n\\t\\t_transfer(owner(), to, amt);\\n\\t}\\n}\\n\\n/// @title DeployTestBasePair\\n/// @notice Library to deploy new instances of the `BasePair` contract for testing purposes.\\n/// @dev Uses the `MintableADEX` contract to enable token minting during tests.\\nlibrary DeployTestBasePair {\\n\\t/// @notice Deploys a new instance of the `BasePair` contract with mintable `ADEX` tokens.\\n\\t/// @return A new instance of the `BasePair` contract.\\n\\tfunction newBasePair() external returns (BasePair) {\\n\\t\\tADEX adex = new MintableADEX();\\n\\t\\treturn new BasePair(address(adex));\\n\\t}\\n}\\n\\n/**\\n * @title BasePair\\n * @dev This contract represents a base pair in the DEX, implementing mintable tokens and fee burning mechanisms.\\n * @notice Inherits from the `Pair` contract and provides additional functionality for adding liquidity and setting up the base pair.\\n */\\ncontract BasePair is Pair {\\n\\t/// @notice Initializes the `BasePair` contract with the address of the `ADEX` token.\\n\\t/// @param adexAddress The address of the `ADEX` token contract.\\n\\tconstructor(address adexAddress) Pair(adexAddress, address(this)) {}\\n\\n\\t/// @notice Internal function to add liquidity to the base pair.\\n\\t/// @dev Overrides the `_addLiq` function from the `Pair` contract.\\n\\t/// @param wholePayment The payment details including the amount of tokens to add as liquidity.\\n\\tfunction _addLiq(TokenPayment calldata wholePayment) internal override {\\n\\t\\tuint256 value = wholePayment.amount;\\n\\t\\t_insertLiqValues(AddLiquidityContext({ deposit: value, liq: value }));\\n\\t}\\n\\n\\t/// @notice Internal function to set the base pair address.\\n\\t/// @dev Overrides the `_setBasePair` function from the `Pair` contract but does nothing as this contract is the base pair.\\n\\t/// @param basePairAddr The address of the base pair, which is not used in this override.\\n\\tfunction _setBasePair(address basePairAddr) internal override {\\n\\t\\t// This is the base pair, no action needed\\n\\t}\\n}\\n\",\"keccak256\":\"0xe8b0c65033305360b908b5e8d5c7d36cab41f11561edee817a1ff8bc741f635e\",\"license\":\"MIT\"},\"contracts/pair/EDUPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport { Pair, TokenPayment, AddLiquidityContext } from \\\"./Pair.sol\\\";\\nimport { WEDU } from \\\"../common/libs/WEDU.sol\\\";\\n\\n/// @title DeployEduPair\\n/// @notice Library to deploy new instances of `EDUPair`.\\nlibrary DeployEduPair {\\n\\t/// @notice Deploys a new instance of the `EDUPair` contract.\\n\\t/// @param basePairAddr The address of the base pair contract.\\n\\t/// @return A new instance of the `EDUPair` contract.\\n\\tfunction newEDUPair(address basePairAddr) external returns (EDUPair) {\\n\\t\\treturn new EDUPair(basePairAddr);\\n\\t}\\n}\\n\\n/// @title EDUPair\\n/// @notice A specialized pair contract for handling EduChain (EDU) token trades.\\n/// @dev Inherits from the `Pair` contract and customizes it to work specifically with `WEDU` tokens.\\ncontract EDUPair is Pair {\\n\\t/// @notice Initializes the EDUPair contract with the base pair address.\\n\\t/// @param basePair The address of the base pair.\\n\\tconstructor(address basePair) Pair(address(0), basePair) {}\\n\\n\\t/// @notice Internal function to set the trade token as `WEDU`.\\n\\t/// @dev Overrides the `_setTradeToken` function from the `Pair` contract to use `WEDU`.\\n\\t/// @param tradeToken_ The address of the trade token.\\n\\t/// @dev A new instance of the `WEDU` contract is deployed and assigned as the trade token.\\n\\tfunction _setTradeToken(address tradeToken_) internal override {\\n\\t\\ttradeToken = address(new WEDU());\\n\\t}\\n\\n\\t/// @notice Fallback function to handle incoming EDU payments.\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0xdc2b6e89cb255e77b94ac9638d4d21f9fc63322bafad4e53d87c2ef95b766d41\",\"license\":\"MIT\"},\"contracts/pair/Knowable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract KnowablePair is Ownable {\\n\\tmodifier isKnownPair() {\\n\\t\\trequire(owner() == Ownable(msg.sender).owner(), \\\"not allowed\\\");\\n\\t\\trequire(msg.sender != address(this), \\\"self cannnot be known pair\\\");\\n\\t\\t_;\\n\\t}\\n}\\n\",\"keccak256\":\"0x2e3711baeb401b25f62f5adad04d3be63fff037ac9e20af7fb03476b03ff026b\",\"license\":\"MIT\"},\"contracts/pair/Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../common/libs/Fee.sol\\\";\\nimport \\\"../common/libs/Slippage.sol\\\";\\nimport \\\"../common/libs/TokenPayments.sol\\\";\\n\\nimport \\\"./contexts/AddLiquidity.sol\\\";\\n\\nimport \\\"../common/Amm.sol\\\";\\nimport \\\"./Knowable.sol\\\";\\n\\nimport { LpToken } from \\\"../modules/LpToken.sol\\\";\\nimport \\\"../common/utils.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nuint256 constant RPS_DIVISION_CONSTANT = 1e36;\\n\\nlibrary DeployPair {\\n\\tfunction newPair(\\n\\t\\taddress tradeToken,\\n\\t\\taddress basePairAddr\\n\\t) external returns (Pair) {\\n\\t\\treturn new Pair(tradeToken, basePairAddr);\\n\\t}\\n}\\n\\n/**\\n * @title Pair\\n * @dev This contract manages a trading pair in the DEX, handling liquidity, trading, and fee mechanisms.\\n */\\ncontract Pair is Ownable, KnowablePair {\\n\\tusing FeeUtil for FeeUtil.Values;\\n\\tusing TokenPayments for TokenPayment;\\n\\n\\t// Reserve data\\n\\tuint256 public deposits;\\n\\tuint256 public sales;\\n\\tuint256 private depValuePerShare;\\n\\n\\tuint256 public lpSupply;\\n\\n\\taddress public tradeToken;\\n\\tPair basePair;\\n\\n\\tuint256 constant MIN_MINT_DEPOSIT = 4_000;\\n\\n\\tevent LiquidityAdded(\\n\\t\\taddress indexed from,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 liqAdded\\n\\t);\\n\\tevent SellExecuted(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 fee\\n\\t);\\n\\n\\t/**\\n\\t * @dev Constructor for initializing the Pair contract.\\n\\t * @param tradeToken_ Address of the trade token.\\n\\t * @param basePairAddr Address of the base pair.\\n\\t */\\n\\tconstructor(address tradeToken_, address basePairAddr) {\\n\\t\\t_setTradeToken(tradeToken_);\\n\\t\\t_setBasePair(basePairAddr);\\n\\t}\\n\\n\\tfunction _setTradeToken(address tradeToken_) internal virtual {\\n\\t\\trequire(tradeToken_ != address(0), \\\"Pair: Invalid trade token address\\\");\\n\\n\\t\\trequire(isERC20(tradeToken_), \\\"Pair: Invalid trade token\\\");\\n\\t\\ttradeToken = tradeToken_;\\n\\t}\\n\\n\\tfunction _setBasePair(address basePairAddr) internal virtual {\\n\\t\\trequire(basePairAddr != address(0), \\\"Pair: Invalid base pair address\\\");\\n\\n\\t\\tbasePair = Pair(basePairAddr);\\n\\t\\trequire(\\n\\t\\t\\tisERC20(Pair(basePairAddr).tradeToken()),\\n\\t\\t\\t\\\"Pair: Invalid base pair contract\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tmodifier onlyBasePair() {\\n\\t\\trequire(msg.sender == address(basePair), \\\"not allowed\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to check and receive a payment.\\n\\t * @param payment Payment details.\\n\\t * @param from Address from which payment is received.\\n\\t */\\n\\tfunction _checkAndReceivePayment(\\n\\t\\tTokenPayment calldata payment,\\n\\t\\taddress from\\n\\t) internal {\\n\\t\\t_checkAndReceivePayment(payment, from, MIN_MINT_DEPOSIT);\\n\\t}\\n\\n\\tfunction _checkAndReceivePayment(\\n\\t\\tTokenPayment calldata payment,\\n\\t\\taddress from,\\n\\t\\tuint256 min\\n\\t) internal {\\n\\t\\tif (payment.token != address(tradeToken) || payment.amount < min) {\\n\\t\\t\\trevert(\\\"Pair: Bad received payment\\\");\\n\\t\\t}\\n\\n\\t\\tpayment.receiveToken(from);\\n\\t}\\n\\n\\tfunction _getReserves()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256 paymentTokenReserve, uint256 baseTokenReserve)\\n\\t{\\n\\t\\treturn (reserve(), basePair.reserve());\\n\\t}\\n\\n\\tfunction _getLiqAdded(\\n\\t\\tTokenPayment calldata payment\\n\\t) internal view returns (uint256) {\\n\\t\\t(\\n\\t\\t\\tuint256 paymentTokenReserve,\\n\\t\\t\\tuint256 baseTokenReserve\\n\\t\\t) = _getReserves();\\n\\n\\t\\t// In case of initial liquidity\\n\\t\\tpaymentTokenReserve = paymentTokenReserve <= 0\\n\\t\\t\\t? payment.amount\\n\\t\\t\\t: paymentTokenReserve;\\n\\n\\t\\treturn Amm.quote(payment.amount, paymentTokenReserve, baseTokenReserve);\\n\\t}\\n\\n\\tfunction _takeFromReserve(uint256 amount) internal returns (uint256 taken) {\\n\\t\\tif (sales >= amount) {\\n\\t\\t\\tsales -= amount;\\n\\t\\t\\treturn amount;\\n\\t\\t}\\n\\n\\t\\tif ((deposits + sales) >= amount) {\\n\\t\\t\\ttaken = amount;\\n\\t\\t\\t_takeFromDeposits(taken - sales);\\n\\t\\t\\tsales = 0;\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"Amount to be taken is too large\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tevent BurntFees(address indexed pair, uint256 fee);\\n\\n\\t/**\\n\\t * @notice Takes fee and update balances of beneficiaries\\n\\t * @dev This must be called on the out pair side\\n\\t * @param referrer the user address to receive part of fee\\n\\t * @param receiver the address buying this token\\n\\t * @param amount amount to compute and deduct fee from\\n\\t * @param totalFeePercent the fee percentage\\n\\t */\\n\\tfunction takeFeesAndTransferTokens(\\n\\t\\taddress receiver,\\n\\t\\taddress referrer,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 totalFeePercent\\n\\t) external isKnownPair returns (uint256 amountOut, uint256 toBurn) {\\n\\t\\t_takeFromReserve(amount);\\n\\n\\t\\tuint256 fee = (totalFeePercent * amount) / FeeUtil.MAX_PERCENT;\\n\\t\\tamountOut = amount - fee;\\n\\n\\t\\trequire(amountOut != 0, \\\"Pair: Zero out amount\\\");\\n\\n\\t\\tFeeUtil.Values memory values = FeeUtil.splitFee(fee);\\n\\n\\t\\ttoBurn = values.toBurnValue;\\n\\t\\t// Distribute values\\n\\t\\t{\\n\\t\\t\\tif (referrer != address(0) && values.referrerValue > 0) {\\n\\t\\t\\t\\tTokenPayment({\\n\\t\\t\\t\\t\\tnonce: 0,\\n\\t\\t\\t\\t\\tamount: values.referrerValue,\\n\\t\\t\\t\\t\\ttoken: tradeToken\\n\\t\\t\\t\\t}).sendToken(referrer);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttoBurn += values.referrerValue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Increasing sales genrally implies the `toBurn`\\n\\t\\t\\t// is available for ecosystem wide usage\\n\\t\\t\\trequire(toBurn > 0, \\\"Pair: Swap amount too low\\\");\\n\\t\\t\\tsales += toBurn;\\n\\n\\t\\t\\t// Give liqProviders value\\n\\t\\t\\tif (lpSupply > 0) {\\n\\t\\t\\t\\t_addToDeposits(values.liqProvidersValue);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tsales += values.liqProvidersValue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Send bought tokens to receiver\\n\\t\\t\\tTokenPayment({ nonce: 0, amount: amountOut, token: tradeToken })\\n\\t\\t\\t\\t.sendToken(receiver);\\n\\t\\t}\\n\\t\\temit BurntFees(address(this), toBurn);\\n\\t}\\n\\n\\tfunction _executeSell(\\n\\t\\tuint256 amountIn,\\n\\t\\taddress from,\\n\\t\\taddress referrer,\\n\\t\\tPair outPair,\\n\\t\\tuint256 slippage,\\n\\t\\tuint256 totalFeePercent\\n\\t) private returns (uint256 burntFee) {\\n\\t\\tuint256 inTokenReserve = reserve();\\n\\t\\tuint256 outTokenReserve = outPair.reserve();\\n\\n\\t\\tuint256 amountOutMin = Amm.quote(\\n\\t\\t\\tSlippage.compute(amountIn, slippage),\\n\\t\\t\\tinTokenReserve,\\n\\t\\t\\toutTokenReserve\\n\\t\\t);\\n\\t\\trequire(outTokenReserve > amountOutMin, \\\"Pair: not enough reserve\\\");\\n\\n\\t\\tuint256 initialK = Amm.calculateKConstant(\\n\\t\\t\\tinTokenReserve,\\n\\t\\t\\toutTokenReserve\\n\\t\\t);\\n\\n\\t\\tuint256 amountOut = 0;\\n\\t\\t{\\n\\t\\t\\tuint256 amountOutOptimal = Amm.getAmountOut(\\n\\t\\t\\t\\tamountIn,\\n\\t\\t\\t\\tinTokenReserve,\\n\\t\\t\\t\\toutTokenReserve\\n\\t\\t\\t);\\n\\t\\t\\t(amountOut, burntFee) = outPair.takeFeesAndTransferTokens(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\treferrer,\\n\\t\\t\\t\\tamountOutOptimal,\\n\\t\\t\\t\\ttotalFeePercent\\n\\t\\t\\t);\\n\\n\\t\\t\\trequire(amountOut >= amountOutMin, \\\"Pair: Slippage Exceeded\\\");\\n\\n\\t\\t\\tsales += amountIn;\\n\\t\\t}\\n\\n\\t\\tuint256 newK = Amm.calculateKConstant(reserve(), outPair.reserve());\\n\\t\\trequire(initialK <= newK, \\\"ERROR_K_INVARIANT_FAILED\\\");\\n\\n\\t\\temit SellExecuted(\\n\\t\\t\\tfrom,\\n\\t\\t\\taddress(outPair),\\n\\t\\t\\tamountIn,\\n\\t\\t\\tamountOut,\\n\\t\\t\\ttotalFeePercent\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _insertLiqValues(AddLiquidityContext memory context) internal {\\n\\t\\tlpSupply += context.liq;\\n\\t\\t_addToDeposits(context.deposit);\\n\\t}\\n\\n\\tfunction _addLiq(TokenPayment calldata wholePayment) internal virtual {\\n\\t\\tuint256 liqAdded = _getLiqAdded(wholePayment);\\n\\n\\t\\t(\\n\\t\\t\\tuint256 paymentTokenReserve,\\n\\t\\t\\tuint256 baseTokenReserve\\n\\t\\t) = _getReserves();\\n\\n\\t\\tuint256 initialK = Amm.calculateKConstant(\\n\\t\\t\\tpaymentTokenReserve,\\n\\t\\t\\tbaseTokenReserve\\n\\t\\t);\\n\\n\\t\\t_insertLiqValues(\\n\\t\\t\\tAddLiquidityContext({ deposit: wholePayment.amount, liq: liqAdded })\\n\\t\\t);\\n\\n\\t\\t// Check K values\\n\\t\\t(\\n\\t\\t\\tuint256 newPaymentTokenReserve,\\n\\t\\t\\tuint256 newBaseTokenReserve\\n\\t\\t) = _getReserves();\\n\\t\\tuint256 newK = Amm.calculateKConstant(\\n\\t\\t\\tnewPaymentTokenReserve,\\n\\t\\t\\tnewBaseTokenReserve\\n\\t\\t);\\n\\n\\t\\trequire(newK > initialK, \\\"Pair: K Invariant Failed\\\");\\n\\t}\\n\\n\\tfunction _takeFromDeposits(uint256 deduction) internal {\\n\\t\\tif (deduction <= 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint256 rpsDecrease = (deduction * RPS_DIVISION_CONSTANT) / lpSupply;\\n\\t\\trequire(\\n\\t\\t\\trpsDecrease > 0 &&\\n\\t\\t\\t\\trpsDecrease <= depValuePerShare &&\\n\\t\\t\\t\\tdeduction <= deposits,\\n\\t\\t\\t\\\"Pair: Invalid deposits deduction\\\"\\n\\t\\t);\\n\\n\\t\\tdepValuePerShare -= rpsDecrease;\\n\\t\\tdeposits -= deduction;\\n\\t}\\n\\n\\tfunction _addToDeposits(uint256 addition) internal {\\n\\t\\tuint256 rpsIncrease = (addition * RPS_DIVISION_CONSTANT) / lpSupply;\\n\\n\\t\\trequire(rpsIncrease > 0, \\\"Pair: Invalid deposit addition\\\");\\n\\n\\t\\tdepValuePerShare += rpsIncrease;\\n\\t\\tdeposits += addition;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Adds liquidity to the pair.\\n\\t * @param wholePayment Details of the payment for adding liquidity.\\n\\t * @param from Address from which liquidity is added.\\n\\t * @return liqAdded Amount of liquidity added.\\n\\t */\\n\\tfunction addLiquidity(\\n\\t\\tTokenPayment calldata wholePayment,\\n\\t\\taddress from\\n\\t) external onlyOwner returns (uint256 liqAdded, uint256 rps) {\\n\\t\\t_checkAndReceivePayment(wholePayment, from);\\n\\n\\t\\tuint256 initalLp = lpSupply;\\n\\n\\t\\trps = depValuePerShare;\\n\\t\\t_addLiq(wholePayment);\\n\\n\\t\\trequire(lpSupply > initalLp, \\\"Pair: invalid liquidity addition\\\");\\n\\t\\tliqAdded = lpSupply - initalLp;\\n\\n\\t\\temit LiquidityAdded(from, wholePayment.amount, liqAdded);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Removes liquidity from the pool and claims the corresponding deposit.\\n\\t * @dev This function updates the LP's liquidity balance and claims a proportionate amount of the deposit.\\n\\t *      It ensures that the LP's deposit value per share is up-to-date before calculating the deposit to be claimed.\\n\\t * @param liquidity The current liquidity balance of the LP token, including attributes like `depValuePerShare`.\\n\\t * @param liqToRemove The amount of liquidity to be removed from the pool.\\n\\t * @param from The address from which the liquidity is being removed.\\n\\t * @return liq The updated liquidity balance after removal.\\n\\t * @return depositClaimed The amount of deposit claimed by the LP.\\n\\t */\\n\\tfunction removeLiquidity(\\n\\t\\tLpToken.LpBalance memory liquidity,\\n\\t\\tuint256 liqToRemove,\\n\\t\\taddress from\\n\\t)\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t\\treturns (LpToken.LpBalance memory liq, uint256 depositClaimed)\\n\\t{\\n\\t\\trequire(liquidity.amount > 0, \\\"Pair: LP balance is zero\\\");\\n\\t\\trequire(\\n\\t\\t\\tliqToRemove <= liquidity.amount && liqToRemove <= lpSupply,\\n\\t\\t\\t\\\"Pair: Invalid liquidity removal amount\\\"\\n\\t\\t);\\n\\n\\t\\t// Calculate the total deposit that can be claimed based on the updated depValuePerShare\\n\\t\\tuint256 totalDepositClaimed = 0;\\n\\t\\tif (liquidity.attributes.depValuePerShare < depValuePerShare) {\\n\\t\\t\\ttotalDepositClaimed =\\n\\t\\t\\t\\t((depValuePerShare - liquidity.attributes.depValuePerShare) *\\n\\t\\t\\t\\t\\tliquidity.amount) /\\n\\t\\t\\t\\tRPS_DIVISION_CONSTANT;\\n\\t\\t}\\n\\n\\t\\t// Update the global deposits after claiming\\n\\t\\t_takeFromDeposits(totalDepositClaimed);\\n\\n\\t\\t// Reduce global lpSupply by the LP's total liquidity amount\\n\\t\\tlpSupply -= liquidity.amount;\\n\\n\\t\\t// Update the LP's deposit value per share to the current depValuePerShare\\n\\t\\tliquidity.attributes.depValuePerShare = depValuePerShare;\\n\\n\\t\\t// Calculate the deposit to be claimed based on the liquidity being removed\\n\\t\\tdepositClaimed = (liqToRemove * totalDepositClaimed) / liquidity.amount;\\n\\t\\tliquidity.amount -= liqToRemove;\\n\\n\\t\\t// If there is remaining liquidity, update the pool with the remaining deposit and liquidity\\n\\t\\tif (liquidity.amount > 0) {\\n\\t\\t\\t_insertLiqValues(\\n\\t\\t\\t\\tAddLiquidityContext({\\n\\t\\t\\t\\t\\tdeposit: totalDepositClaimed - depositClaimed,\\n\\t\\t\\t\\t\\tliq: liquidity.amount\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Transfer the claimed deposit to the `from` address\\n\\t\\tif (depositClaimed > 0) {\\n\\t\\t\\tTokenPayment({\\n\\t\\t\\t\\tnonce: 0,\\n\\t\\t\\t\\tamount: depositClaimed,\\n\\t\\t\\t\\ttoken: tradeToken\\n\\t\\t\\t}).sendToken(from);\\n\\t\\t}\\n\\n\\t\\t// Return the updated liquidity balance and claimed deposit\\n\\t\\treturn (liquidity, depositClaimed);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Executes a sell order.\\n\\t * @param caller Address of the caller.\\n\\t * @param referrerOfCaller Address of the referrer of the caller.\\n\\t * @param inPayment Details of the payment for the sell order.\\n\\t * @param outPair Address of the pair to sell to.\\n\\t * @param slippage Maximum slippage allowed.\\n\\t * @param totalFeePercent Total fee percentage.\\n\\t */\\n\\tfunction sell(\\n\\t\\taddress caller,\\n\\t\\taddress referrerOfCaller,\\n\\t\\tTokenPayment calldata inPayment,\\n\\t\\tPair outPair,\\n\\t\\tuint256 slippage,\\n\\t\\tuint256 totalFeePercent\\n\\t) external onlyOwner returns (uint256 burntFee) {\\n\\t\\t_checkAndReceivePayment(inPayment, caller, 0);\\n\\t\\tburntFee = _executeSell(\\n\\t\\t\\tinPayment.amount,\\n\\t\\t\\tcaller,\\n\\t\\t\\treferrerOfCaller,\\n\\t\\t\\toutPair,\\n\\t\\t\\tslippage,\\n\\t\\t\\ttotalFeePercent\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the total amount of tradeToken that can be bought from this Pair.\\n\\t * @return The reserve amount.\\n\\t */\\n\\tfunction reserve() public view returns (uint256) {\\n\\t\\treturn deposits + sales;\\n\\t}\\n}\\n\",\"keccak256\":\"0x1618e2ab8b676b1089952476c97684bd19bf85ba743253ab4abda3a38d23d9ad\",\"license\":\"MIT\"},\"contracts/pair/contexts/AddLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nstruct AddLiquidityContext {\\n\\tuint256 liq;\\n\\tuint256 deposit;\\n}\\n\",\"keccak256\":\"0x1cd9e262aeb44e80c8fdcb37dfef00a4b62a75d42292b1d9c38011b508d353a1\",\"license\":\"MIT\"},\"contracts/router/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport { TokenPayment } from \\\"../common/libs/TokenPayments.sol\\\";\\n\\ninterface IRouter {\\n\\tfunction createPair(\\n\\t\\tTokenPayment calldata payment\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (address pairAddress, TokenPayment memory lpPayment);\\n\\n\\tfunction claimRewards(\\n\\t\\tuint256[] memory nonces\\n\\t) external returns (uint256 totalClaimed, uint256[] memory newNonces);\\n\\n\\tfunction getClaimableRewardsByNonces(\\n\\t\\tuint256[] memory nonces\\n\\t) external view returns (uint256 totalClaimable);\\n\\n\\tfunction tokenIsListed(address tokenAddress) external view returns (bool);\\n\\n\\tfunction addLiquidity(\\n\\t\\tTokenPayment memory wholePayment\\n\\t) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x65ff0d72284f6c9f3e636b1951d4dcb34f0897275e10642f13694f90873345b0\",\"license\":\"MIT\"},\"contracts/router/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nimport \\\"../common/libs/Fee.sol\\\";\\n\\nimport \\\"../pair/Pair.sol\\\";\\nimport \\\"../pair/BasePair.sol\\\";\\n\\nimport \\\"./User.sol\\\";\\n\\nimport { LpToken } from \\\"../modules/LpToken.sol\\\";\\nimport { ADEX } from \\\"../ADexToken/ADEX.sol\\\";\\nimport { ADexInfo } from \\\"../ADexToken/AdexInfo.sol\\\";\\nimport { AdexEmission } from \\\"../ADexToken/AdexEmission.sol\\\";\\nimport { Amm } from \\\"../common/Amm.sol\\\";\\nimport { Epochs } from \\\"../common/Epochs.sol\\\";\\nimport { Governance } from \\\"../governance/Governance.sol\\\";\\nimport { DeployGovernance } from \\\"../governance/DeployGovernance.sol\\\";\\nimport { EDUPair, DeployEduPair } from \\\"../pair/EDUPair.sol\\\";\\n\\nimport \\\"../common/libs/Number.sol\\\";\\nimport { IRouter } from \\\"./IRouter.sol\\\";\\n\\nuint256 constant REWARDS_DIVISION_CONSTANT = 1e18;\\n\\ncontract Router is IRouter, Ownable, UserModule, ERC1155Holder {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\tusing Address for address;\\n\\tusing Epochs for Epochs.Storage;\\n\\tusing Number for uint256;\\n\\tusing TokenPayments for TokenPayment;\\n\\n\\tstruct PairData {\\n\\t\\tuint256 sellVolume;\\n\\t\\tuint256 buyVolume;\\n\\t\\tuint256 lpRewardsPershare;\\n\\t\\tuint256 tradeRewardsPershare;\\n\\t\\tuint256 totalLiq;\\n\\t\\tuint256 rewardsReserve;\\n\\t}\\n\\n\\tstruct GlobalData {\\n\\t\\tuint256 rewardsReserve;\\n\\t\\tuint256 taxRewards;\\n\\t\\tuint256 rewardsPerShare;\\n\\t\\tuint256 totalTradeVolume;\\n\\t\\tuint256 lastTimestamp;\\n\\t\\tuint256 totalLiq;\\n\\t}\\n\\n\\tEpochs.Storage private epochs;\\n\\n\\tEnumerableSet.AddressSet private pairs;\\n\\tEnumerableSet.AddressSet private tradeTokens;\\n\\taddress private _wEduAddress;\\n\\n\\tmapping(address => address) public tokensPairAddress;\\n\\tmapping(address => PairData) public pairsData;\\n\\tGlobalData public globalData;\\n\\n\\tLpToken public immutable lpToken;\\n\\tGovernance public governance;\\n\\taddress private adexTokenAddress;\\n\\n\\tevent LiquidityRemoved(\\n\\t\\taddress indexed user,\\n\\t\\taddress indexed pair,\\n\\t\\tuint256 liquidityRemoved,\\n\\t\\tuint256 tradeTokenAmount,\\n\\t\\tuint256 baseTokenAmount\\n\\t);\\n\\n\\tconstructor() {\\n\\t\\tepochs.initialize(24 hours);\\n\\n\\t\\tlpToken = new LpToken();\\n\\n\\t\\tglobalData.lastTimestamp = block.timestamp;\\n\\t}\\n\\n\\tfunction getWEDU() public view returns (address) {\\n\\t\\trequire(_wEduAddress != address(0), \\\"Router: EDUPair not yet deployed\\\");\\n\\t\\treturn _wEduAddress;\\n\\t}\\n\\n\\tfunction _computeEdgeEmissions(\\n\\t\\tuint256 epoch,\\n\\t\\tuint256 lastTimestamp,\\n\\t\\tuint256 latestTimestamp\\n\\t) internal view returns (uint256) {\\n\\t\\t(uint256 startTimestamp, uint256 endTimestamp) = epochs\\n\\t\\t\\t.epochEdgeTimestamps(epoch);\\n\\n\\t\\tuint256 upperBoundTime = 0;\\n\\t\\tuint256 lowerBoundTime = 0;\\n\\n\\t\\tif (\\n\\t\\t\\tstartTimestamp <= latestTimestamp && latestTimestamp <= endTimestamp\\n\\t\\t) {\\n\\t\\t\\tupperBoundTime = latestTimestamp;\\n\\t\\t\\tlowerBoundTime = startTimestamp;\\n\\t\\t} else if (\\n\\t\\t\\tstartTimestamp <= lastTimestamp && lastTimestamp <= endTimestamp\\n\\t\\t) {\\n\\t\\t\\tupperBoundTime = latestTimestamp <= endTimestamp\\n\\t\\t\\t\\t? latestTimestamp\\n\\t\\t\\t\\t: endTimestamp;\\n\\t\\t\\tlowerBoundTime = lastTimestamp;\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"Router._computeEdgeEmissions: Invalid timestamps\\\");\\n\\t\\t}\\n\\n\\t\\treturn\\n\\t\\t\\tAdexEmission.throughTimeRange(\\n\\t\\t\\t\\tepoch,\\n\\t\\t\\t\\tupperBoundTime - lowerBoundTime,\\n\\t\\t\\t\\tepochs.epochLength\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction _generateRewards(\\n\\t\\tPairData memory data\\n\\t)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (PairData memory newPairData, GlobalData memory newGlobalData)\\n\\t{\\n\\t\\tnewPairData = data;\\n\\t\\tnewGlobalData = globalData;\\n\\n\\t\\tuint256 currentTimestamp = block.timestamp;\\n\\t\\tuint256 lastTimestamp = newGlobalData.lastTimestamp;\\n\\n\\t\\tif (\\n\\t\\t\\tlastTimestamp < currentTimestamp && globalData.totalTradeVolume > 0\\n\\t\\t) {\\n\\t\\t\\tuint256 lastGenerateEpoch = epochs.computeEpoch(lastTimestamp);\\n\\t\\t\\tuint256 generatedRewards = _computeEdgeEmissions(\\n\\t\\t\\t\\tlastGenerateEpoch,\\n\\t\\t\\t\\tlastTimestamp,\\n\\t\\t\\t\\tcurrentTimestamp\\n\\t\\t\\t);\\n\\n\\t\\t\\tuint256 currentEpoch = epochs.currentEpoch();\\n\\t\\t\\tif (currentEpoch > lastGenerateEpoch) {\\n\\t\\t\\t\\tuint256 intermediateEpochs = currentEpoch -\\n\\t\\t\\t\\t\\tlastGenerateEpoch -\\n\\t\\t\\t\\t\\t1;\\n\\n\\t\\t\\t\\tif (intermediateEpochs > 1) {\\n\\t\\t\\t\\t\\tgeneratedRewards += AdexEmission.throughEpochRange(\\n\\t\\t\\t\\t\\t\\tlastGenerateEpoch,\\n\\t\\t\\t\\t\\t\\tlastGenerateEpoch + intermediateEpochs\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgeneratedRewards += _computeEdgeEmissions(\\n\\t\\t\\t\\t\\tcurrentEpoch,\\n\\t\\t\\t\\t\\tlastTimestamp,\\n\\t\\t\\t\\t\\tcurrentTimestamp\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Tax is set at 7.5%, this can be changed by governance\\n\\t\\t\\tuint256 taxRewards;\\n\\t\\t\\t(generatedRewards, taxRewards) = generatedRewards.take(\\n\\t\\t\\t\\t(generatedRewards * 7_5) / 100_0\\n\\t\\t\\t);\\n\\n\\t\\t\\tuint256 rpsIncrease = (generatedRewards *\\n\\t\\t\\t\\tREWARDS_DIVISION_CONSTANT) / globalData.totalTradeVolume;\\n\\n\\t\\t\\tnewGlobalData.lastTimestamp = currentTimestamp;\\n\\t\\t\\tnewGlobalData.rewardsPerShare += rpsIncrease;\\n\\t\\t\\tnewGlobalData.rewardsReserve += generatedRewards;\\n\\t\\t\\tnewGlobalData.taxRewards += taxRewards;\\n\\t\\t}\\n\\n\\t\\tif (newPairData.tradeRewardsPershare < newGlobalData.rewardsPerShare) {\\n\\t\\t\\tif (newPairData.buyVolume > 0) {\\n\\t\\t\\t\\t// compute reward\\n\\t\\t\\t\\tuint256 computedReward = ((newGlobalData.rewardsPerShare -\\n\\t\\t\\t\\t\\tnewPairData.tradeRewardsPershare) * newPairData.buyVolume) /\\n\\t\\t\\t\\t\\tREWARDS_DIVISION_CONSTANT;\\n\\n\\t\\t\\t\\t// Transfer rewards\\n\\t\\t\\t\\tnewGlobalData.rewardsReserve -= computedReward;\\n\\t\\t\\t\\tnewPairData.rewardsReserve += computedReward;\\n\\n\\t\\t\\t\\tif (newPairData.totalLiq > 0) {\\n\\t\\t\\t\\t\\tuint256 rpsIncrease = (computedReward *\\n\\t\\t\\t\\t\\t\\tREWARDS_DIVISION_CONSTANT) / newPairData.totalLiq;\\n\\n\\t\\t\\t\\t\\tnewPairData.lpRewardsPershare += rpsIncrease;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tnewPairData.tradeRewardsPershare = newGlobalData.rewardsPerShare;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _computeRewardsClaimable(\\n\\t\\tLpToken.LpBalance memory balance\\n\\t)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 claimable,\\n\\t\\t\\tPairData memory newPairData,\\n\\t\\t\\tGlobalData memory newGlobalData,\\n\\t\\t\\tLpToken.LpAttributes memory newAttr\\n\\t\\t)\\n\\t{\\n\\t\\tnewAttr = balance.attributes;\\n\\n\\t\\tnewPairData = pairsData[newAttr.pair];\\n\\t\\t(newPairData, newGlobalData) = _generateRewards(newPairData);\\n\\n\\t\\tif (newAttr.rewardPerShare < newPairData.lpRewardsPershare) {\\n\\t\\t\\t// compute reward\\n\\t\\t\\tclaimable =\\n\\t\\t\\t\\t((newPairData.lpRewardsPershare - newAttr.rewardPerShare) *\\n\\t\\t\\t\\t\\tbalance.amount) /\\n\\t\\t\\t\\tREWARDS_DIVISION_CONSTANT;\\n\\n\\t\\t\\tnewPairData.rewardsReserve -= claimable;\\n\\t\\t\\tnewAttr.rewardPerShare = newPairData.lpRewardsPershare;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _runUpdatesAfterRewardsGenerated(\\n\\t\\tPairData storage pairData,\\n\\t\\tPairData memory newPairData,\\n\\t\\tGlobalData memory newGlobalData\\n\\t) internal {\\n\\t\\tpairData.lpRewardsPershare = newPairData.lpRewardsPershare;\\n\\t\\tpairData.rewardsReserve = newPairData.rewardsReserve;\\n\\t\\tpairData.tradeRewardsPershare = newPairData.tradeRewardsPershare;\\n\\n\\t\\tglobalData = newGlobalData;\\n\\n\\t\\tuint256 taxRewards = globalData.taxRewards;\\n\\n\\t\\tif (taxRewards > 0) {\\n\\t\\t\\tglobalData.taxRewards = 0;\\n\\n\\t\\t\\tIERC20(adexTokenAddress).approve(address(governance), taxRewards);\\n\\t\\t\\tgovernance.receiveRewards(\\n\\t\\t\\t\\tTokenPayment({\\n\\t\\t\\t\\t\\ttoken: adexTokenAddress,\\n\\t\\t\\t\\t\\tnonce: 0,\\n\\t\\t\\t\\t\\tamount: taxRewards\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tmodifier canCreatePair() {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == owner() || msg.sender == address(governance),\\n\\t\\t\\t\\\"Router: Not allowed to list token\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction _addInitialLiquidity(\\n\\t\\taddress pairAddress,\\n\\t\\tTokenPayment memory payment\\n\\t) private returns (TokenPayment memory lpPayment) {\\n\\t\\tpayment.approve(pairAddress);\\n\\t\\tlpPayment.nonce = this.addLiquidity(payment);\\n\\n\\t\\tlpPayment.token = address(lpToken);\\n\\t\\tlpPayment.amount = lpToken\\n\\t\\t\\t.getBalanceAt(address(this), lpPayment.nonce)\\n\\t\\t\\t.amount;\\n\\n\\t\\tlpPayment.sendToken(msg.sender);\\n\\t}\\n\\n\\tfunction _prepareWEDUReception()\\n\\t\\tprivate\\n\\t\\treturns (TokenPayment memory payment)\\n\\t{\\n\\t\\tpayment.token = getWEDU();\\n\\t\\tpayment.amount = msg.value;\\n\\n\\t\\tpayment.receiveToken();\\n\\t}\\n\\n\\tfunction _receiveEDUForSpend()\\n\\t\\tprivate\\n\\t\\treturns (TokenPayment memory payment)\\n\\t{\\n\\t\\tpayment.token = getWEDU();\\n\\t\\tpayment.amount = msg.value;\\n\\n\\t\\tWEDU(payable(payment.token)).receiveForSpender{ value: msg.value }(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\ttokensPairAddress[payment.token]\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Creates a new pair.\\n\\t * @dev The first pair becomes the base pair -- For now, called by only owner..when DAO is implemented, DAO can call this\\n\\t * @return pairAddress Address of the newly created pair.\\n\\t */\\n\\tfunction createPair(\\n\\t\\tTokenPayment memory payment\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tcanCreatePair\\n\\t\\treturns (address pairAddress, TokenPayment memory lpPayment)\\n\\t{\\n\\t\\taddress tradeToken = payment.token;\\n\\n\\t\\trequire(\\n\\t\\t\\ttokensPairAddress[tradeToken] == address(0),\\n\\t\\t\\t\\\"Token already added\\\"\\n\\t\\t);\\n\\n\\t\\tPair pair;\\n\\n\\t\\tif (pairsCount() == 0) {\\n\\t\\t\\tpair = DeployBasePair.newBasePair();\\n\\t\\t\\ttradeToken = pair.tradeToken();\\n\\t\\t\\tadexTokenAddress = tradeToken;\\n\\n\\t\\t\\tIERC20(adexTokenAddress).transfer(owner(), ADexInfo.ICO_FUNDS);\\n\\t\\t\\tgovernance = DeployGovernance.newGovernance(\\n\\t\\t\\t\\taddress(lpToken),\\n\\t\\t\\t\\ttradeToken,\\n\\t\\t\\t\\tepochs\\n\\t\\t\\t);\\n\\n\\t\\t\\tpayment = TokenPayment({\\n\\t\\t\\t\\ttoken: adexTokenAddress,\\n\\t\\t\\t\\tnonce: 0,\\n\\t\\t\\t\\tamount: ADexInfo.INTIAL_LIQUIDITY\\n\\t\\t\\t});\\n\\t\\t} else if (msg.value > 0) {\\n\\t\\t\\tpair = DeployEduPair.newEDUPair(basePairAddr());\\n\\t\\t\\ttradeToken = address(pair.tradeToken());\\n\\t\\t\\t_wEduAddress = tradeToken;\\n\\n\\t\\t\\t// Prepare native token\\n\\t\\t\\tpayment = _prepareWEDUReception();\\n\\t\\t} else {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tpayment.amount > 0,\\n\\t\\t\\t\\t\\\"Router: Invalid initial liquidity amount\\\"\\n\\t\\t\\t);\\n\\t\\t\\tpayment.receiveToken();\\n\\n\\t\\t\\tpair = DeployPair.newPair(tradeToken, basePairAddr());\\n\\t\\t}\\n\\n\\t\\tpairAddress = address(pair);\\n\\n\\t\\tpairs.add(pairAddress);\\n\\t\\ttradeTokens.add(tradeToken);\\n\\t\\ttokensPairAddress[tradeToken] = pairAddress;\\n\\n\\t\\tlpPayment = _addInitialLiquidity(pairAddress, payment);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Adds liquidity to a pair.\\n\\t * @param wholePayment Payment details for adding liquidity.\\n\\t */\\n\\tfunction addLiquidity(\\n\\t\\tTokenPayment memory wholePayment\\n\\t) external payable returns (uint256) {\\n\\t\\taddress caller = msg.sender;\\n\\t\\tif (msg.value > 0) {\\n\\t\\t\\twholePayment = _receiveEDUForSpend();\\n\\t\\t}\\n\\n\\t\\taddress tokenAddress = address(wholePayment.token);\\n\\t\\taddress pairAddress = tokensPairAddress[tokenAddress];\\n\\t\\trequire(pairAddress != address(0), \\\"Router: Invalid pair address\\\");\\n\\t\\trequire(wholePayment.amount > 0, \\\"Router: Invalid liquidity payment\\\");\\n\\n\\t\\t(uint256 liqAdded, uint256 depValuePerShare) = Pair(pairAddress)\\n\\t\\t\\t.addLiquidity(wholePayment, caller);\\n\\n\\t\\t// Upadte liquidity data to be used for other computations like fee\\n\\t\\tglobalData.totalLiq += liqAdded;\\n\\n\\t\\tPairData storage pairData = pairsData[pairAddress];\\n\\n\\t\\t// Update pairData\\n\\t\\t(\\n\\t\\t\\tPairData memory newPairData,\\n\\t\\t\\tGlobalData memory newGlobalData\\n\\t\\t) = _generateRewards(pairData);\\n\\t\\t_runUpdatesAfterRewardsGenerated(pairData, newPairData, newGlobalData);\\n\\t\\tpairData.totalLiq += liqAdded;\\n\\n\\t\\treturn\\n\\t\\t\\tlpToken.mint(\\n\\t\\t\\t\\tpairData.lpRewardsPershare,\\n\\t\\t\\t\\tliqAdded,\\n\\t\\t\\t\\tpairAddress,\\n\\t\\t\\t\\ttokenAddress,\\n\\t\\t\\t\\tcaller,\\n\\t\\t\\t\\tdepValuePerShare\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claims rewards for a user across all pairs in which they hold LP tokens.\\n\\t * @param nonces The desired SFTs to claim from.\\n\\t */\\n\\tfunction claimRewards(\\n\\t\\tuint256[] memory nonces\\n\\t) external returns (uint256 totalClaimed, uint256[] memory newNonces) {\\n\\t\\taddress user = msg.sender;\\n\\t\\tnewNonces = nonces;\\n\\n\\t\\t// Loop through all nonces to calculate and claim rewards\\n\\t\\tfor (uint256 i = 0; i < nonces.length; i++) {\\n\\t\\t\\tLpToken.LpBalance memory balance = lpToken.getBalanceAt(\\n\\t\\t\\t\\tuser,\\n\\t\\t\\t\\tnonces[i]\\n\\t\\t\\t);\\n\\n\\t\\t\\t(\\n\\t\\t\\t\\tuint256 claimable,\\n\\t\\t\\t\\tPairData memory newPairData,\\n\\t\\t\\t\\tGlobalData memory newGlobalData,\\n\\t\\t\\t\\tLpToken.LpAttributes memory newAttr\\n\\t\\t\\t) = _computeRewardsClaimable(balance);\\n\\n\\t\\t\\t// Claim the rewards if available\\n\\t\\t\\tif (claimable > 0) {\\n\\t\\t\\t\\ttotalClaimed += claimable;\\n\\n\\t\\t\\t\\t// Update LP attributes and data\\n\\t\\t\\t\\tuint256 newNonce = lpToken.update(\\n\\t\\t\\t\\t\\tuser,\\n\\t\\t\\t\\t\\tbalance.nonce,\\n\\t\\t\\t\\t\\tbalance.amount,\\n\\t\\t\\t\\t\\tabi.encode(newAttr)\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tnewNonces[i] = newNonce;\\n\\n\\t\\t\\t\\tPairData storage pairData = pairsData[newAttr.pair];\\n\\t\\t\\t\\t_runUpdatesAfterRewardsGenerated(\\n\\t\\t\\t\\t\\tpairData,\\n\\t\\t\\t\\t\\tnewPairData,\\n\\t\\t\\t\\t\\tnewGlobalData\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trequire(totalClaimed > 0, \\\"No rewards available to claim\\\");\\n\\n\\t\\t// Transfer the claimed rewards to the user\\n\\t\\trequire(\\n\\t\\t\\tERC20(adexTokenAddress).transfer(user, totalClaimed),\\n\\t\\t\\t\\\"Reward transfer failed\\\"\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Removes liquidity from a pair and claims the corresponding rewards.\\n\\t * @param nonce The SFT nonce representing the LP tokens to burn.\\n\\t * @param liqRemoval The amount of LP tokens to burn.\\n\\t */\\n\\tfunction removeLiquidity(uint256 nonce, uint256 liqRemoval) external {\\n\\t\\trequire(liqRemoval > 0, \\\"Router: Amount must be greater than zero\\\");\\n\\n\\t\\t// Retrieve the user's LP balance and ensure sufficient balance for removal\\n\\t\\tLpToken.LpBalance memory liquidity = lpToken.getBalanceAt(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tnonce\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tliquidity.amount >= liqRemoval,\\n\\t\\t\\t\\\"Router: Insufficient LP balance\\\"\\n\\t\\t);\\n\\n\\t\\t// Get pair address and corresponding pair data\\n\\t\\taddress pairAddr = liquidity.attributes.pair;\\n\\t\\tPairData storage pairData = pairsData[pairAddr];\\n\\n\\t\\t// Compute rewards claimable before removing liquidity\\n\\t\\t(\\n\\t\\t\\tuint256 claimable,\\n\\t\\t\\tPairData memory newPairData,\\n\\t\\t\\tGlobalData memory newGlobalData,\\n\\t\\t\\tLpToken.LpAttributes memory newAttr\\n\\t\\t) = _computeRewardsClaimable(liquidity);\\n\\n\\t\\t// Update liquidity attributes and pair/global data after computing rewards\\n\\t\\tliquidity.attributes = newAttr;\\n\\t\\t_runUpdatesAfterRewardsGenerated(pairData, newPairData, newGlobalData);\\n\\n\\t\\t// Remove liquidity and get the amount of trade tokens claimed\\n\\t\\tPair pair = Pair(pairAddr);\\n\\t\\tuint256 tradeTokenAmount = 0;\\n\\t\\t(liquidity, tradeTokenAmount) = pair.removeLiquidity(\\n\\t\\t\\tliquidity,\\n\\t\\t\\tliqRemoval,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\n\\t\\t// Update LP token balance with the new attributes after liquidity removal\\n\\t\\tlpToken.update(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tliquidity.nonce,\\n\\t\\t\\tliquidity.amount,\\n\\t\\t\\tabi.encode(liquidity.attributes)\\n\\t\\t);\\n\\n\\t\\t// Update total liquidity for the pair and globally\\n\\t\\tpairData.totalLiq -= liqRemoval;\\n\\t\\tglobalData.totalLiq -= liqRemoval;\\n\\n\\t\\t// Transfer rewards if any are claimable\\n\\t\\tif (claimable > 0) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tERC20(adexTokenAddress).transfer(msg.sender, claimable),\\n\\t\\t\\t\\t\\\"Reward transfer failed\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Emit event for liquidity removal\\n\\t\\temit LiquidityRemoved(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tpairAddr,\\n\\t\\t\\tliqRemoval,\\n\\t\\t\\ttradeTokenAmount,\\n\\t\\t\\tclaimable\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getClaimableRewards(\\n\\t\\taddress user\\n\\t) external view returns (uint256 totalClaimable) {\\n\\t\\tLpToken.LpBalance[] memory balances = lpToken.lpBalanceOf(user);\\n\\n\\t\\tfor (uint256 i = 0; i < balances.length; i++) {\\n\\t\\t\\t(uint256 claimable, , , ) = _computeRewardsClaimable(balances[i]);\\n\\t\\t\\ttotalClaimable += claimable;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getClaimableRewardsAt(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce\\n\\t) external view returns (uint256 claimable) {\\n\\t\\tLpToken.LpBalance memory balance = lpToken.getBalanceAt(user, nonce);\\n\\n\\t\\t(claimable, , , ) = _computeRewardsClaimable(balance);\\n\\t}\\n\\n\\tfunction registerAndSwap(\\n\\t\\tuint256 referrerId,\\n\\t\\tTokenPayment calldata inPayment,\\n\\t\\taddress outPairAddr,\\n\\t\\tuint256 slippage\\n\\t) external payable {\\n\\t\\t_createOrGetUserId(msg.sender, referrerId);\\n\\t\\tswap(inPayment, outPairAddr, slippage);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Executes a trade between two pairs.\\n\\t * @param outPairAddr Address of the output pair.\\n\\t * @param inPayment Payment details for the trade.\\n\\t * @param slippage Maximum slippage allowed.\\n\\t */\\n\\tfunction swap(\\n\\t\\tTokenPayment memory inPayment,\\n\\t\\taddress outPairAddr,\\n\\t\\tuint256 slippage\\n\\t) public payable {\\n\\t\\tif (msg.value > 0) {\\n\\t\\t\\tinPayment = _receiveEDUForSpend();\\n\\t\\t}\\n\\t\\taddress inPairAddr = tokensPairAddress[address(inPayment.token)];\\n\\n\\t\\trequire(pairs.contains(inPairAddr), \\\"Router: Input pair not found\\\");\\n\\t\\trequire(pairs.contains(outPairAddr), \\\"Router: Output pair not found\\\");\\n\\n\\t\\tPair outPair = Pair(outPairAddr);\\n\\t\\tPair inPair = Pair(inPairAddr);\\n\\n\\t\\taddress basePairAddr_ = basePairAddr();\\n\\t\\tPair basePair = Pair(basePairAddr_);\\n\\n\\t\\tuint256 tradeVolume = Amm.quote(\\n\\t\\t\\tinPayment.amount,\\n\\t\\t\\tinPair.reserve(),\\n\\t\\t\\tbasePair.reserve()\\n\\t\\t);\\n\\n\\t\\t(, address referrer) = getReferrer(msg.sender);\\n\\n\\t\\tuint256 feeBurnt = Pair(inPairAddr).sell(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\treferrer,\\n\\t\\t\\tinPayment,\\n\\t\\t\\toutPair,\\n\\t\\t\\tslippage,\\n\\t\\t\\t_computeFeePercent(inPairAddr, tradeVolume)\\n\\t\\t);\\n\\n\\t\\t{\\n\\t\\t\\t// Update reward computation data\\n\\t\\t\\tpairsData[inPairAddr].sellVolume += tradeVolume;\\n\\t\\t\\tpairsData[outPairAddr].buyVolume += tradeVolume;\\n\\n\\t\\t\\tuint256 feeCollected = Amm.quote(\\n\\t\\t\\t\\tfeeBurnt,\\n\\t\\t\\t\\toutPair.reserve(),\\n\\t\\t\\t\\tbasePair.reserve()\\n\\t\\t\\t);\\n\\t\\t\\tpairsData[basePairAddr_].buyVolume += feeCollected;\\n\\t\\t\\tglobalData.totalTradeVolume += tradeVolume + feeCollected;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Computes the feePercent based on the pair's sales against the liquidity provided in other pairs.\\n\\t * @dev The more a pair is sold, the higher the feePercent. This is computed based on the pair's sales relative to the provided liquidity in other pairs.\\n\\t * @param pairAddress The address of the pair for which the feePercent is being computed.\\n\\t * @param tradeVolume The value in ADEX to be exchanged.\\n\\t * @return feePercent The computed feePercent based on the input amount and the pair's sales.\\n\\t */\\n\\tfunction _computeFeePercent(\\n\\t\\taddress pairAddress,\\n\\t\\tuint256 tradeVolume\\n\\t) internal view returns (uint256 feePercent) {\\n\\t\\tPairData memory data = pairsData[pairAddress];\\n\\t\\tuint256 projectedSales = data.sellVolume + tradeVolume;\\n\\t\\tuint256 pairBuys = data.buyVolume;\\n\\n\\t\\tuint256 salesDiff = projectedSales > pairBuys\\n\\t\\t\\t? projectedSales - pairBuys\\n\\t\\t\\t: 0;\\n\\n\\t\\tuint256 otherLiq = globalData.totalLiq - data.totalLiq;\\n\\t\\tfeePercent = FeeUtil.feePercent(salesDiff, otherLiq, pairsCount());\\n\\t}\\n\\n\\t/**\\n\\t * @notice Computes the feePercent based on the pair's sales against the liquidity provided in other pairs.\\n\\t * @dev The more a pair is sold, the higher the feePercent. This is computed based on the pair's sales relative to the provided liquidity in other pairs.\\n\\t * @param pairAddress The address of the pair for which the feePercent is being computed.\\n\\t * @param inAmount The input amount for which the feePercent is being computed.\\n\\t * @return feePercent The computed feePercent based on the input amount and the pair's sales.\\n\\t */\\n\\tfunction computeFeePercent(\\n\\t\\taddress pairAddress,\\n\\t\\tuint256 inAmount\\n\\t) public view returns (uint256 feePercent) {\\n\\t\\tuint256 tradeVolume = Amm.quote(\\n\\t\\t\\tinAmount,\\n\\t\\t\\tPair(pairAddress).reserve(),\\n\\t\\t\\tPair(basePairAddr()).reserve()\\n\\t\\t);\\n\\n\\t\\tfeePercent = _computeFeePercent(pairAddress, tradeVolume);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the list of all pairs.\\n\\t * @return Array of pair addresses.\\n\\t */\\n\\tfunction getAllPairs() public view returns (address[] memory) {\\n\\t\\treturn pairs.values();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the list of all trade token addreses.\\n\\t * @return Array of pair addresses.\\n\\t */\\n\\tfunction tradeableTokens() public view returns (address[] memory) {\\n\\t\\treturn tradeTokens.values();\\n\\t}\\n\\n\\tfunction tokenIsListed(address tokenAddress) public view returns (bool) {\\n\\t\\trequire(\\n\\t\\t\\ttokenAddress != address(0),\\n\\t\\t\\t\\\"Router: Invalid trade token address\\\"\\n\\t\\t);\\n\\t\\treturn tradeTokens.contains(tokenAddress);\\n\\t}\\n\\n\\t/**\\n\\t * @return Returns the basePair address.\\n\\t */\\n\\tfunction basePairAddr() public view returns (address) {\\n\\t\\treturn pairs.at(0);\\n\\t}\\n\\n\\t/**\\n\\t * @return count the total count of listed pairs.\\n\\t */\\n\\tfunction pairsCount() public view returns (uint64) {\\n\\t\\treturn uint64(pairs.length());\\n\\t}\\n\\n\\t/**\\n\\t * @notice Estimates the amount of output tokens to receive for a given input amount, considering slippage.\\n\\t * @dev The function calculates the amount of output tokens after applying the dynamic fee and slippage.\\n\\t * @param inPair The address of the input pair.\\n\\t * @param outPair The address of the output pair.\\n\\t * @param inAmount The amount of input tokens.\\n\\t * @param slippage The maximum allowable slippage percentage (e.g., 50 for 0.5%).\\n\\t * @return amountOut The estimated amount of output tokens.\\n\\t */\\n\\tfunction estimateOutAmount(\\n\\t\\taddress inPair,\\n\\t\\taddress outPair,\\n\\t\\tuint256 inAmount,\\n\\t\\tuint256 slippage\\n\\t) public view returns (uint256 amountOut) {\\n\\t\\t// Ensure the input and output pairs are registered in the Router\\n\\t\\trequire(pairs.contains(inPair), \\\"Router: Input pair not found\\\");\\n\\t\\trequire(pairs.contains(outPair), \\\"Router: Output pair not found\\\");\\n\\n\\t\\t// Instantiate Pair contracts for input and output pairs\\n\\t\\tPair inputPair = Pair(inPair);\\n\\t\\tPair outputPair = Pair(outPair);\\n\\n\\t\\t// Get reserves for input and output pairs from their respective reserve methods\\n\\t\\tuint256 inPairReserve = inputPair.reserve();\\n\\t\\tuint256 outPairReserve = outputPair.reserve();\\n\\n\\t\\t// Calculate the fee using the Router's computeFeePercent method\\n\\t\\tuint256 feePercent = computeFeePercent(inPair, inAmount);\\n\\n\\t\\t// Adjust input amount for slippage\\n\\t\\tuint256 adjustedInAmount = Slippage.compute(inAmount, slippage);\\n\\n\\t\\t// Calculate the output amount using the AMM formula, accounting for the computed fee and slippage\\n\\t\\tamountOut = Amm.getAmountOut(\\n\\t\\t\\tadjustedInAmount,\\n\\t\\t\\tinPairReserve,\\n\\t\\t\\toutPairReserve\\n\\t\\t);\\n\\n\\t\\tamountOut -= (amountOut * feePercent) / FeeUtil.MAX_PERCENT;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Computes claimable rewards for a list of nonces.\\n\\t * @param nonces Array of nonces to compute claimable rewards for.\\n\\t * @return totalClaimable Total claimable rewards for all provided nonces.\\n\\t */\\n\\tfunction getClaimableRewardsByNonces(\\n\\t\\tuint256[] calldata nonces\\n\\t) external view returns (uint256 totalClaimable) {\\n\\t\\tfor (uint256 i = 0; i < nonces.length; i++) {\\n\\t\\t\\tLpToken.LpBalance memory balance = lpToken.getBalanceAt(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tnonces[i]\\n\\t\\t\\t);\\n\\n\\t\\t\\t(uint256 claimable, , , ) = _computeRewardsClaimable(balance);\\n\\n\\t\\t\\ttotalClaimable += claimable;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xbb88ec9b7fc14c918f6cadb1d495f1f37689efbc2dd41a027bb392d2eb5e0886\",\"license\":\"MIT\"},\"contracts/router/User.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.9;\\n\\nabstract contract UserModule {\\n\\tstruct User {\\n\\t\\tuint256 id;\\n\\t\\taddress addr;\\n\\t\\tuint256 referrerId;\\n\\t\\tuint256[] referrals;\\n\\t}\\n\\n\\tuint256 public userCount;\\n\\tmapping(address => User) public users;\\n\\tmapping(uint256 => address) public userIdToAddress;\\n\\n\\tevent UserRegistered(\\n\\t\\tuint256 userId,\\n\\t\\taddress userAddress,\\n\\t\\tuint256 referrerId\\n\\t);\\n\\tevent ReferralAdded(uint256 referrerId, uint256 referralId);\\n\\n\\t/// @notice Gets the referrer and referrer ID of a user.\\n\\t/// @param userAddress The address of the user.\\n\\t/// @return referrerId The ID of the referrer, 0 if none.\\n\\t/// @return referrerAddress The address of the referrer, address(0) if none.\\n\\tfunction getReferrer(\\n\\t\\taddress userAddress\\n\\t) public view returns (uint256 referrerId, address referrerAddress) {\\n\\t\\tUser storage user = users[userAddress];\\n\\t\\treferrerId = user.referrerId;\\n\\t\\treferrerAddress = userIdToAddress[referrerId];\\n\\t}\\n\\n\\tfunction getUserId(\\n\\t\\taddress userAddress\\n\\t) external view returns (uint256 userId) {\\n\\t\\treturn users[userAddress].id;\\n\\t}\\n\\n\\t/// @notice Internal function to create or get the user ID.\\n\\t/// @param userAddr The address of the user.\\n\\t/// @param referrerId The ID of the referrer.\\n\\t/// @return The ID of the user.\\n\\tfunction _createOrGetUserId(\\n\\t\\taddress userAddr,\\n\\t\\tuint256 referrerId\\n\\t) internal returns (uint256) {\\n\\t\\tif (users[userAddr].id != 0) {\\n\\t\\t\\treturn users[userAddr].id;\\n\\t\\t}\\n\\n\\t\\tuserCount++;\\n\\t\\tusers[userAddr] = User({\\n\\t\\t\\tid: userCount,\\n\\t\\t\\taddr: userAddr,\\n\\t\\t\\treferrerId: referrerId,\\n\\t\\t\\treferrals: new uint256[](1)\\n\\t\\t});\\n\\t\\tuserIdToAddress[userCount] = userAddr;\\n\\n\\t\\tif (referrerId != 0 && userIdToAddress[referrerId] != address(0)) {\\n\\t\\t\\tusers[userIdToAddress[referrerId]].referrals.push(userCount);\\n\\t\\t\\temit ReferralAdded(referrerId, userCount);\\n\\t\\t}\\n\\n\\t\\temit UserRegistered(userCount, userAddr, referrerId);\\n\\t\\treturn userCount;\\n\\t}\\n}\\n\",\"keccak256\":\"0x359f22f4f657665726caed733139afc522c231c93d2d8ab2a9fe51ef63cfee94\",\"license\":\"SEE LICENSE IN LICENSE\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1886d687eace717c05b7dcc20e43a088df0e549df86b453c2222961b520308f0\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506200001d336200007d565b6200003b620151806004620000cd60201b620024731790919060201c565b60405162000049906200012d565b604051809103906000f08015801562000066573d6000803e3d6000fd5b506001600160a01b0316608052426011556200013b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b4282556001820181905580620001295760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642045706f6368206c656e677468000000000000000000000000604482015260640160405180910390fd5b5050565b612b2d806200594083390190565b6080516157a36200019d6000396000818161038c015281816107ea015281816108d801528181610a0d01528181610af40152818161116a01528181611b4d01528181611cc101528181611e790152818161232e0152612b5a01526157a36000f3fe6080604052600436106101ee5760003560e01c80638aa495831161010d578063bc197c81116100a0578063f23a6e611161006f578063f23a6e61146106cf578063f2445f1e146106fb578063f2fde38b1461071b578063f800ece91461073b578063fce8d3901461075057600080fd5b8063bc197c8114610633578063e58c555e14610678578063e9f162bb1461068d578063f01cb648146106af57600080fd5b8063a87430ba116100dc578063a87430ba14610516578063b169520114610580578063b2a5b4a2146105b6578063b81b2b711461060657600080fd5b80638aa49583146104a55780638da5cb5b146104b85780639027cae1146104d65780639d7de6b3146104f657600080fd5b80635eac6239116101855780637076806b116101545780637076806b14610426578063715018a61461044757806375bb16c01461045c57806382cfd1b81461046f57600080fd5b80635eac62391461034c5780635fcbd2851461037a578063613ce410146103ae57806369ee60d11461040657600080fd5b8063308e401e116101c1578063308e401e146102975780633dab9a86146102b75780634a9fefc7146102d75780635aa6e6751461031457600080fd5b806301ffc9a7146101f3578063020e78b51461022857806307973ccf1461023d5780632b956ff714610261575b600080fd5b3480156101ff57600080fd5b5061021361020e366004614a22565b610765565b60405190151581526020015b60405180910390f35b61023b610236366004614a61565b61079c565b005b34801561024957600080fd5b5061025360015481565b60405190815260200161021f565b34801561026d57600080fd5b5061025361027c366004614ab3565b6001600160a01b031660009081526002602052604090205490565b3480156102a357600080fd5b506102536102b2366004614ab3565b6107c6565b3480156102c357600080fd5b506102536102d2366004614ad0565b6108c8565b3480156102e357600080fd5b506102f76102f2366004614ab3565b6109c8565b604080519283526001600160a01b0390911660208301520161021f565b34801561032057600080fd5b50601354610334906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b34801561035857600080fd5b5061036c610367366004614c40565b6109fa565b60405161021f929190614c74565b34801561038657600080fd5b506103347f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ba57600080fd5b50600d54600e54600f546010546011546012546103d995949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161021f565b34801561041257600080fd5b50610253610421366004614cc2565b610d47565b610439610434366004614d33565b610e50565b60405161021f929190614d71565b34801561045357600080fd5b5061023b611522565b61023b61046a366004614d8e565b611536565b34801561047b57600080fd5b5061033461048a366004614ab3565b600b602052600090815260409020546001600160a01b031681565b6102536104b3366004614d33565b6118f5565b3480156104c457600080fd5b506000546001600160a01b0316610334565b3480156104e257600080fd5b506102136104f1366004614ab3565b611bd7565b34801561050257600080fd5b5061023b610511366004614dce565b611c46565b34801561052257600080fd5b5061055d610531366004614ab3565b60026020819052600091825260409091208054600182015491909201546001600160a01b039091169083565b604080519384526001600160a01b0390921660208401529082015260600161021f565b34801561058c57600080fd5b5061033461059b366004614df0565b6003602052600090815260409020546001600160a01b031681565b3480156105c257600080fd5b506103d96105d1366004614ab3565b600c60205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909186565b34801561061257600080fd5b5061061b6120a4565b6040516001600160401b03909116815260200161021f565b34801561063f57600080fd5b5061065f61064e366004614e78565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161021f565b34801561068457600080fd5b506103346120b5565b34801561069957600080fd5b506106a2612120565b60405161021f9190614f25565b3480156106bb57600080fd5b506102536106ca366004614f72565b61212c565b3480156106db57600080fd5b5061065f6106ea366004614fb8565b63f23a6e6160e01b95945050505050565b34801561070757600080fd5b50610253610716366004614cc2565b612329565b34801561072757600080fd5b5061023b610736366004614ab3565b6123e1565b34801561074757600080fd5b506106a261245a565b34801561075c57600080fd5b50610334612466565b60006001600160e01b03198216630271189760e51b148061079657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107a633856124c5565b506107c06107b936859003850185614d33565b8383611536565b50505050565b604051632711999760e21b81526001600160a01b03828116600483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690639c46665c9060240160006040518083038186803b15801561082c57600080fd5b505afa158015610840573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261086891908101906150c5565b905060005b81518110156108c157600061089a83838151811061088d5761088d61515e565b6020026020010151612704565b505050905080846108ab919061518a565b93505080806108b9906151a2565b91505061086d565b5050919050565b6000805b828110156109c15760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166326ca8adb338787868181106109185761091861515e565b905060200201356040518363ffffffff1660e01b815260040161093c9291906151bd565b60c06040518083038186803b15801561095457600080fd5b505afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c91906151d6565b9050600061099982612704565b505050905080846109aa919061518a565b9350505080806109b9906151a2565b9150506108cc565b5092915050565b6001600160a01b0390811660009081526002602081815260408084209092015480845260039091529120549092911690565b60008133825b8451811015610c225760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166326ca8adb84888581518110610a4d57610a4d61515e565b60200260200101516040518363ffffffff1660e01b8152600401610a729291906151bd565b60c06040518083038186803b158015610a8a57600080fd5b505afa158015610a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac291906151d6565b9050600080600080610ad385612704565b93509350935093506000841115610c0a57610aee848a61518a565b985060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8938f26898860000151896020015186604051602001610b3d9190615224565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610b6b949392919061525e565b602060405180830381600087803b158015610b8557600080fd5b505af1158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd91906152ae565b905080898881518110610bd257610bd261515e565b6020908102919091018101919091526040808401516001600160a01b03166000908152600c9092529020610c07818686612829565b50505b50505050508080610c1a906151a2565b915050610a00565b5060008311610c785760405162461bcd60e51b815260206004820152601d60248201527f4e6f207265776172647320617661696c61626c6520746f20636c61696d00000060448201526064015b60405180910390fd5b60145460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610caa90849087906004016151bd565b602060405180830381600087803b158015610cc457600080fd5b505af1158015610cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfc91906152c7565b610d415760405162461bcd60e51b815260206004820152601660248201527514995dd85c99081d1c985b9cd9995c8819985a5b195960521b6044820152606401610c6f565b50915091565b600080610e3c83856001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8757600080fd5b505afa158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbf91906152ae565b610dc7612466565b6001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dff57600080fd5b505afa158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3791906152ae565b61298e565b9050610e4884826129af565b949350505050565b6000610e5a614966565b6000546001600160a01b0316331480610e7d57506013546001600160a01b031633145b610ed35760405162461bcd60e51b815260206004820152602160248201527f526f757465723a204e6f7420616c6c6f77656420746f206c69737420746f6b656044820152603760f91b6064820152608401610c6f565b82516001600160a01b038082166000908152600b60205260409020541615610f335760405162461bcd60e51b8152602060048201526013602482015272151bdad95b88185b1c9958591e481859191959606a1b6044820152606401610c6f565b6000610f3d6120a4565b6001600160401b03166112765773c78e661324B870Ba4e0fAC0d64A054Fa593D297a63bb3007786040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8e57600080fd5b505af4158015610fa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc691906152e9565b9050806001600160a01b031663d83678ac6040518163ffffffff1660e01b815260040160206040518083038186803b15801561100157600080fd5b505afa158015611015573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103991906152e9565b601480546001600160a01b0383166001600160a01b0319909116811790915590925063a9059cbb6110726000546001600160a01b031690565b61107e6012600a6153ea565b61108b90620f42406153f6565b6110976012600a6153ea565b6110a49062d048506153f6565b6110b5906607fd10d7c82f0b61518a565b6110c16012600a6153ea565b6110cf906301406f406153f6565b6110d99190615415565b6110e39190615415565b6040518363ffffffff1660e01b81526004016111009291906151bd565b602060405180830381600087803b15801561111a57600080fd5b505af115801561112e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115291906152c7565b50604051630415fa8f60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004808401919091529084166024830152546044820152600554606482015273208016c3D94C34c3FBC987D984DbA1A061717B5790630415fa8f9060840160206040518083038186803b1580156111e157600080fd5b505af41580156111f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121991906152e9565b601380546001600160a01b0319166001600160a01b0392831617905560408051606081019091526014549091168152602081016112586012600a6153ea565b61126590620f42406153f6565b8152602001600081525094506114c6565b34156113b45773F2Dc2050Fefab5132C49c0D7727abFa56719db18637af9dc7861129e612466565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156112dd57600080fd5b505af41580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131591906152e9565b9050806001600160a01b031663d83678ac6040518163ffffffff1660e01b815260040160206040518083038186803b15801561135057600080fd5b505afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138891906152e9565b600a80546001600160a01b0319166001600160a01b03831617905591506113ad612a75565b94506114c6565b60008560200151116114195760405162461bcd60e51b815260206004820152602860248201527f526f757465723a20496e76616c696420696e697469616c206c697175696469746044820152671e48185b5bdd5b9d60c21b6064820152608401610c6f565b61142285612aa2565b73600700b9e5c161A159dbbDbfCB5e13747eDDDd4563b3af16d383611445612466565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b15801561148b57600080fd5b505af415801561149f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c391906152e9565b90505b9250826114d4600682612aac565b506114e0600883612aac565b506001600160a01b038281166000908152600b6020526040902080546001600160a01b0319169186169190911790556115198486612ac1565b92505050915091565b61152a612c03565b6115346000612c5d565b565b341561154757611544612cad565b92505b82516001600160a01b039081166000908152600b60205260409020541661156f600682612d3f565b6115bb5760405162461bcd60e51b815260206004820152601c60248201527f526f757465723a20496e7075742070616972206e6f7420666f756e64000000006044820152606401610c6f565b6115c6600684612d3f565b6116125760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a204f75747075742070616972206e6f7420666f756e640000006044820152606401610c6f565b8281600061161e612466565b9050600081905060006116d98960200151856001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b15801561166857600080fd5b505afa15801561167c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a091906152ae565b846001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dff57600080fd5b905060006116e6336109c8565b9150506000876001600160a01b031663c398ae4d33848e8b8e6117098f8b6129af565b6040518763ffffffff1660e01b815260040161172a9695949392919061542c565b602060405180830381600087803b15801561174457600080fd5b505af1158015611758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177c91906152ae565b6001600160a01b0389166000908152600c60205260408120805492935085929091906117a990849061518a565b90915550506001600160a01b038a166000908152600c6020526040812060010180548592906117d990849061518a565b92505081905550600061189082896001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b15801561181f57600080fd5b505afa158015611833573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185791906152ae565b876001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dff57600080fd5b6001600160a01b0387166000908152600c60205260408120600101805492935083929091906118c090849061518a565b909155506118d09050818561518a565b601080546000906118e290849061518a565b9091555050505050505050505050505050565b600033341561190957611906612cad565b92505b82516001600160a01b038082166000908152600b602052604090205416806119735760405162461bcd60e51b815260206004820152601c60248201527f526f757465723a20496e76616c696420706169722061646472657373000000006044820152606401610c6f565b60008560200151116119d15760405162461bcd60e51b815260206004820152602160248201527f526f757465723a20496e76616c6964206c6971756964697479207061796d656e6044820152601d60fa1b6064820152608401610c6f565b600080826001600160a01b03166327a3d40088876040518363ffffffff1660e01b8152600401611a02929190615472565b6040805180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a539190615498565b9150915081600d6005016000828254611a6c919061518a565b90915550506001600160a01b0383166000908152600c60209081526040808320815160c081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460a083015291908190611adb90612d61565b91509150611aea838383612829565b84836004016000828254611afe919061518a565b909155505060028301546040516337e52e1960e21b81526004810191909152602481018690526001600160a01b0387811660448301528881166064830152898116608483015260a482018690527f0000000000000000000000000000000000000000000000000000000000000000169063df94b8649060c401602060405180830381600087803b158015611b9157600080fd5b505af1158015611ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc991906152ae565b9a9950505050505050505050565b60006001600160a01b038216611c3b5760405162461bcd60e51b815260206004820152602360248201527f526f757465723a20496e76616c696420747261646520746f6b656e206164647260448201526265737360e81b6064820152608401610c6f565b610796600883612d3f565b60008111611ca75760405162461bcd60e51b815260206004820152602860248201527f526f757465723a20416d6f756e74206d7573742062652067726561746572207460448201526768616e207a65726f60c01b6064820152608401610c6f565b6040516326ca8adb60e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906326ca8adb90611cf890339087906004016151bd565b60c06040518083038186803b158015611d1057600080fd5b505afa158015611d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4891906151d6565b90508181602001511015611d9e5760405162461bcd60e51b815260206004820152601f60248201527f526f757465723a20496e73756666696369656e74204c502062616c616e6365006044820152606401610c6f565b6040808201518101516001600160a01b0381166000908152600c6020529182209091808080611dcc87612704565b9350935093509350808760400181905250611de8858484612829565b6040516301a5e7dd60e71b815286906000906001600160a01b0383169063d2f3ee8090611e1d908c908e9033906004016154bc565b60e060405180830381600087803b158015611e3757600080fd5b505af1158015611e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6f9190615505565b809250819a5050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8938f26338b600001518c602001518d60400151604051602001611ec69190615224565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401611ef4949392919061525e565b602060405180830381600087803b158015611f0e57600080fd5b505af1158015611f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4691906152ae565b5089876004016000828254611f5b9190615415565b9091555050601280548b9190600090611f75908490615415565b909155505085156120495760145460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611fb29033908a906004016151bd565b602060405180830381600087803b158015611fcc57600080fd5b505af1158015611fe0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200491906152c7565b6120495760405162461bcd60e51b815260206004820152601660248201527514995dd85c99081d1c985b9cd9995c8819985a5b195960521b6044820152606401610c6f565b604080518b8152602081018390529081018790526001600160a01b0389169033907fbc7d19d505c7ec4db83f3b51f19fb98c4c8a99922e7839d1ee608dfbee29501b9060600160405180910390a35050505050505050505050565b60006120b06006612fcf565b905090565b600a546000906001600160a01b03166121105760405162461bcd60e51b815260206004820181905260248201527f526f757465723a2045445550616972206e6f7420796574206465706c6f7965646044820152606401610c6f565b50600a546001600160a01b031690565b60606120b06008612fd9565b6000612139600686612d3f565b6121855760405162461bcd60e51b815260206004820152601c60248201527f526f757465723a20496e7075742070616972206e6f7420666f756e64000000006044820152606401610c6f565b612190600685612d3f565b6121dc5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a204f75747075742070616972206e6f7420666f756e640000006044820152606401610c6f565b600085905060008590506000826001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222157600080fd5b505afa158015612235573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225991906152ae565b90506000826001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b15801561229657600080fd5b505afa1580156122aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ce91906152ae565b905060006122dc8a89610d47565b905060006122ea8989612fe6565b90506122f7818585613008565b965061271061230683896153f6565b6123109190615548565b61231a9088615415565b9b9a5050505050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166326ca8adb85856040518363ffffffff1660e01b815260040161237a9291906151bd565b60c06040518083038186803b15801561239257600080fd5b505afa1580156123a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ca91906151d6565b90506123d581612704565b50919695505050505050565b6123e9612c03565b6001600160a01b03811661244e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c6f565b61245781612c5d565b50565b60606120b06006612fd9565b60006120b060068261301e565b42825560018201819055806124c15760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c8408ae0dec6d040d8cadccee8d60631b6044820152606401610c6f565b5050565b6001600160a01b0382166000908152600260205260408120541561250257506001600160a01b038216600090815260026020526040902054610796565b60018054906000612512836151a2565b919050555060405180608001604052806001548152602001846001600160a01b0316815260200183815260200160016001600160401b0381111561255857612558614b44565b604051908082528060200260200182016040528015612581578160200160208202803683370190505b5090526001600160a01b0384811660009081526002602081815260409283902085518155858201516001820180546001600160a01b03191691909616179094559184015190830155606083015180516125e09260038501920190614990565b5050600154600090815260036020526040902080546001600160a01b0319166001600160a01b03861617905550811580159061263257506000828152600360205260409020546001600160a01b031615155b156126af576000828152600360208181526040808420546001600160a01b0316845260028252808420600180549190940180548086018255908652948390209094019390935590548251858152918201527fa8b1f3acfefae9dbf6c7ffd8c16eda5db6950c383b34ca999d98f9998721c50c910160405180910390a15b600154604080519182526001600160a01b038516602083015281018390527fb58d46e66658e855773af8232237e606476d7f0ad98813c081b540e6f435ea3e9060600160405180910390a15060015492915050565b600061270e6149d7565b6127166149d7565b60408051608081018252600080825260208201819052918101829052606081019190915284604001519050600c600082604001516001600160a01b03166001600160a01b031681526020019081526020016000206040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152505092506127bc83612d61565b60408201518351929550909350111561282257602085015181516040850151670de0b6b3a764000092916127ef91615415565b6127f991906153f6565b6128039190615548565b9350838360a0018181516128179190615415565b905250604083015181525b9193509193565b604080830151600285015560a080840151600586015560608085015160038701558351600d556020840151600e81905592840151600f55830151601055608083015160115582015160125580156107c0576000600e5560145460135460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926128b59291169085906004016151bd565b602060405180830381600087803b1580156128cf57600080fd5b505af11580156128e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290791906152c7565b50601354604080516060810182526014546001600160a01b039081168252602082018590526000828401529151630b0bf5df60e31b8152919092169163585faef891612956919060040161555c565b600060405180830381600087803b15801561297057600080fd5b505af1158015612984573d6000803e3d6000fd5b5050505050505050565b60008261299b83866153f6565b6129a59190615548565b90505b9392505050565b6001600160a01b0382166000908152600c60209081526040808320815160c081018352815480825260018301549482019490945260028201549281019290925260038101546060830152600481015460808301526005015460a0820152908290612a1a90859061518a565b60208301519091506000818311612a32576000612a3c565b612a3c8284615415565b905060008460800151600d60050154612a559190615415565b9050612a698282612a646120a4565b61302a565b98975050505050505050565b612a7d614966565b612a856120b5565b6001600160a01b03168152346020820152612a9f81612aa2565b90565b61245781336130a2565b60006129a8836001600160a01b0384166132e5565b612ac9614966565b612ad38284613334565b604051638aa4958360e01b81523090638aa4958390612af690859060040161555c565b602060405180830381600087803b158015612b1057600080fd5b505af1158015612b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4891906152ae565b60408083018290526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001680845290516326ca8adb60e01b815290916326ca8adb91612b9f9130916004016151bd565b60c06040518083038186803b158015612bb757600080fd5b505afa158015612bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bef91906151d6565b6020908101519082015261079681336133aa565b6000546001600160a01b031633146115345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c6f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612cb5614966565b612cbd6120b5565b6001600160a01b039081168083523460208085018290526000838152600b90915260409081902054905163f1adc25160e01b815233600482015293166024840152909163f1adc25191906044016000604051808303818588803b158015612d2357600080fd5b505af1158015612d37573d6000803e3d6000fd5b505050505090565b6001600160a01b038116600090815260018301602052604081205415156129a8565b612d696149d7565b612d716149d7565b50506040805160c081018252600d548152600e546020820152600f549181019190915260105460608201526011546080820181905260125460a083015282919042908181108015612dc3575060105415155b15612ef4576000612dd5600483613606565b90506000612de48284866136f7565b90506000612df260046137eb565b905082811115612e585760006001612e0a8584615415565b612e149190615415565b90506001811115612e3f57612e3284612e2d838261518a565b6137f7565b612e3c908461518a565b92505b612e4a8286886136f7565b612e54908461518a565b9250505b6000612e7c6103e8612e6b85604b6153f6565b612e759190615548565b84906138b2565b6010549194509150600090612e99670de0b6b3a7640000866153f6565b612ea39190615548565b608089018890526040890180519192508291612ec090839061518a565b905250875184908990612ed490839061518a565b905250602088018051839190612eeb90839061518a565b90525050505050505b826040015184606001511015612fc857602084015115612fbd576000670de0b6b3a7640000856020015186606001518660400151612f329190615415565b612f3c91906153f6565b612f469190615548565b90508084600001818151612f5a9190615415565b90525060a085018051829190612f7190839061518a565b905250608085015115612fbb576080850151600090612f98670de0b6b3a7640000846153f6565b612fa29190615548565b90508086604001818151612fb6919061518a565b905250505b505b604083015160608501525b5050915091565b6000610796825490565b606060006129a883613910565b6000612710612ff48361396c565b612ffe90856153f6565b6129a89190615548565b60006129a584613018818661518a565b8461298e565b60006129a883836139d0565b6000806130388585856139fa565b9050600080600080613053856001600160401b031688613a3e565b9350935093509350613095846001600160401b0316846001600160401b0316876001600160401b0316856001600160401b0316856001600160401b0316613b53565b9998505050505050505050565b34156131d457348260200151146131065760405162461bcd60e51b815260206004820152602260248201527f546f6b656e5061796d656e74733a2045544820616d6f756e74206d69736d61746044820152610c6d60f31b6064820152608401610c6f565b6001600160a01b03811633146131785760405162461bcd60e51b815260206004820152603160248201527f546f6b656e5061796d656e74733a204e6174697665207061796d656e74206d7560448201527039ba10313290333937b69031b0b63632b960791b6064820152608401610c6f565b81600001516001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156131b757600080fd5b505af11580156131cb573d6000803e3d6000fd5b50505050505050565b604082015161327357815160208301516040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201929092529116906323b872dd906064015b602060405180830381600087803b15801561323657600080fd5b505af115801561324a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326e91906152c7565b505050565b815160408084015160208501519151637921219560e11b81526001600160a01b039093169263f242432a926132af92869230929060040161556a565b600060405180830381600087803b1580156132c957600080fd5b505af11580156132dd573d6000803e3d6000fd5b505050505050565b600081815260018301602052604081205461332c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610796565b506000610796565b6040820151613372578151602083015160405163095ea7b360e01b81526001600160a01b039092169163095ea7b39161321c918591906004016151bd565b815160405163a22cb46560e01b81526001600160a01b038381166004830152600160248301529091169063a22cb465906044016132af565b604082015161358c5760006001600160a01b0382163b6134c6578251602084015160405147926001600160a01b0316916133ea9160240190815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316632e1a7d4d60e01b1790525161341f91906155a2565b6000604051808303816000865af19150503d806000811461345c576040519150601f19603f3d011682016040523d82523d6000602084013e613461565b606091505b509092505081156134c4574784602001518261347d919061518a565b146134c45760405162461bcd60e51b81526020600482015260176024820152764661696c656420746f207769746864726177205745445560481b6044820152606401610c6f565b505b80156135055760208301516040516001600160a01b0384169180156108fc02916000818181858888f193505050501580156107c0573d6000803e3d6000fd5b8251602084015160405163a9059cbb60e01b81526001600160a01b039092169163a9059cbb9161353a918691906004016151bd565b602060405180830381600087803b15801561355457600080fd5b505af1158015613568573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c091906152c7565b60408201516135ca578151602083015160405163a9059cbb60e01b81526001600160a01b039092169163a9059cbb9161321c918591906004016151bd565b815160408084015160208501519151637921219560e11b81526001600160a01b039093169263f242432a926132af92309287929060040161556a565b81546000906136575760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642067656e657369732074696d657374616d70000000000000006044820152606401610c6f565b6000821161369b5760405162461bcd60e51b81526020600482015260116024820152700496e76616c69642074696d657374616d7607c1b6044820152606401610c6f565b60008360010154116136e65760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c8408ae0dec6d040d8cadccee8d60631b6044820152606401610c6f565b60018301548354612ffe9084615415565b60408051808201909152600454815260055460208201526000908190819061371f9087613c13565b915091506000808584111580156137365750828611155b156137455750849050826137d5565b8684111580156137555750828711155b156137745782861115613768578261376a565b855b91508690506137d5565b60405162461bcd60e51b815260206004820152603060248201527f526f757465722e5f636f6d7075746545646765456d697373696f6e733a20496e60448201526f76616c69642074696d657374616d707360801b6064820152608401610c6f565b612a69886137e38385615415565b600554613c59565b60006107968242613606565b600082821161383e5760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642065706f63682072616e676560681b6044820152606401610c6f565b600061384984613c70565b9050600061385684613c70565b9050600061386b670de000cd866f8000613c9e565b61387583856155be565b613888906893fa92954c28c89b946155fd565b6138929190615682565b90506138a86138a3826000196155fd565b613cd0565b9695505050505050565b600080838311156138fb5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081d185ad948185b5bdd5b9d606a1b6044820152606401610c6f565b50816139078185615415565b91509250929050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561396057602002820191906000526020600020905b81548152602001906001019080831161394c575b50505050509050919050565b6000600182108061397e575061271082115b156139c45760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420736c6970706167652076616c756560501b6044820152606401610c6f565b61079682612710615415565b60008260000182815481106139e7576139e761515e565b9060005260206000200154905092915050565b600080613a078484613cfa565b613a136103e8876153f6565b613a1d9190615548565b9050613a356001613a2d85613d79565b839190613d87565b95945050505050565b60016103e8600a601e6000613a5286613d79565b905060005b846001600160401b0316881115613b4857613a738560016156b0565b9550613a808360016156b0565b93506001600160401b038116613aa757613a9b6005836156db565b945061012c9250613b36565b806001600160401b031660011415613ac6578194506127109250613b36565b6040805162461bcd60e51b81526020600482015260248101919091527f4665655574696c2e5f676574496e74657256616c7565733a206d61782063616c60448201527f6c20646570746820666f7220696e746572706f6c6174696f6e2076616c7565736064820152608401610c6f565b80613b4081615701565b915050613a57565b505092959194509250565b600085841080613b6257508484115b15613bc05760405162461bcd60e51b815260206004820152602860248201527f4d6174682e6c696e656172496e746572706f6c6174696f6e3a20496e76616c69604482015267642076616c75657360c01b6064820152608401610c6f565b6000613bcc8587615415565b613bd690856153f6565b90506000613be48887615415565b613bee90856153f6565b90506000613bfc8989615415565b905080613c09838561518a565b6130959190615548565b600080836020015183613c2691906153f6565b8451613c32919061518a565b91506001846020015183613c46919061518a565b613c509190615415565b90509250929050565b60008183613c6686613de3565b61299b91906153f6565b6000610796670de000cd866f8000613c8784613e26565b613c9990670de0b6b3a76400006155fd565b613e53565b60006714057b7ef767814f670de0b6b3a7640000613cbb84613e92565b0281613cc957613cc9615532565b0592915050565b600080821215613cf657604051635afb78ad60e11b815260048101839052602401610c6f565b5090565b600080826001600160401b031611613d545760405162461bcd60e51b815260206004820152601b60248201527f4665655574696c3a206e6f20617661696c61626c6520706169727300000000006044820152606401610c6f565b613d676001600160401b03831684615548565b90506001811161079657506001610796565b60006107966103e883615728565b6000816001600160401b0316836001600160401b03161115613dab57613dab615757565b826001600160401b0316841015613dc35750816129a8565b816001600160401b0316841115613ddb5750806129a8565b509192915050565b600080613dfb670de000cd866f8000613c9985613e26565b90506129a8670de0b6b3a7640000613e1c836893fa92954c28c89b946155fd565b6138a39190615682565b60006001600160ff1b03821115613cf65760405163322efb3360e21b815260048101839052602401610c6f565b600082613e78578115613e67576000613e71565b670de0b6b3a76400005b9050610796565b6129a8613e8d613e8785613e92565b84613f71565b614033565b6000808213613eb75760405163309fa7dd60e11b815260048101839052602401610c6f565b6000670de0b6b3a76400008312613ed057506001613eea565b6000199050826ec097ce7bc90715b34b9f10000000000492505b6000613eff670de0b6b3a764000085056140c9565b670de0b6b3a7640000808202945090915084821d90811415613f2357505002919050565b6706f05b59d3b200005b6000811315613f6857670de0b6b3a7640000828002059150671bc16d674ec800008212613f60579384019360019190911d905b60011d613f2d565b50505002919050565b6000600160ff1b831480613f885750600160ff1b82145b15613fa657604051630d01a11b60e21b815260040160405180910390fd5b60008060008512613fb75784613fbc565b846000035b915060008412613fcc5783613fd1565b836000035b90506000613fdf83836141a8565b90506001600160ff1b0381111561400c5760405163bf79e8d960e01b815260048101829052602401610c6f565b6000198087139086138082186001146140255782612a69565b505060000395945050505050565b6000808212156140805768033dd1780914b971141982121561405757506000919050565b61406382600003614033565b6ec097ce7bc90715b34b9f100000000081613cc957613cc9615532565b680a688906bd8b00000082126140ac5760405163e69458f960e01b815260048101839052602401610c6f565b670de0b6b3a7640000604083901b046129a88161426a565b919050565b6000600160801b82106140e957608091821c916140e6908261518a565b90505b600160401b821061410757604091821c91614104908261518a565b90505b640100000000821061412657602091821c91614123908261518a565b90505b62010000821061414357601091821c91614140908261518a565b90505b610100821061415f57600891821c9161415c908261518a565b90505b6010821061417a57600491821c91614177908261518a565b90505b6004821061419557600291821c91614192908261518a565b90505b600282106140c45761079660018261518a565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106141ec5760405163698d9a0160e11b815260048101829052602401610c6f565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826142265780670de0b6b3a7640000850401945050505050610796565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b67800000000000000082161561428e5768016a09e667f3bcc9090260401c5b6740000000000000008216156142ad576801306fe0a31b7152df0260401c5b6720000000000000008216156142cc576801172b83c7d517adce0260401c5b6710000000000000008216156142eb5768010b5586cf9890f62a0260401c5b67080000000000000082161561430a576801059b0d31585743ae0260401c5b67040000000000000082161561432957680102c9a3e778060ee70260401c5b6702000000000000008216156143485768010163da9fb33356d80260401c5b67010000000000000082161561436757680100b1afa5abcbed610260401c5b66800000000000008216156143855768010058c86da1c09ea20260401c5b66400000000000008216156143a3576801002c605e2e8cec500260401c5b66200000000000008216156143c157680100162f3904051fa10260401c5b66100000000000008216156143df576801000b175effdc76ba0260401c5b66080000000000008216156143fd57680100058ba01fb9f96d0260401c5b660400000000000082161561441b5768010002c5cc37da94920260401c5b6602000000000000821615614439576801000162e525ee05470260401c5b66010000000000008216156144575768010000b17255775c040260401c5b65800000000000821615614474576801000058b91b5bc9ae0260401c5b6540000000000082161561449157680100002c5c89d5ec6d0260401c5b652000000000008216156144ae5768010000162e43f4f8310260401c5b651000000000008216156144cb57680100000b1721bcfc9a0260401c5b650800000000008216156144e85768010000058b90cf1e6e0260401c5b65040000000000821615614505576801000002c5c863b73f0260401c5b6502000000000082161561452257680100000162e430e5a20260401c5b6501000000000082161561453f576801000000b1721835510260401c5b64800000000082161561455b57680100000058b90c0b490260401c5b6440000000008216156145775768010000002c5c8601cc0260401c5b642000000000821615614593576801000000162e42fff00260401c5b6410000000008216156145af5768010000000b17217fbb0260401c5b6408000000008216156145cb576801000000058b90bfce0260401c5b6404000000008216156145e757680100000002c5c85fe30260401c5b6402000000008216156146035768010000000162e42ff10260401c5b64010000000082161561461f57680100000000b17217f80260401c5b638000000082161561463a5768010000000058b90bfc0260401c5b6340000000821615614655576801000000002c5c85fe0260401c5b632000000082161561467057680100000000162e42ff0260401c5b631000000082161561468b576801000000000b17217f0260401c5b63080000008216156146a657680100000000058b90c00260401c5b63040000008216156146c15768010000000002c5c8600260401c5b63020000008216156146dc576801000000000162e4300260401c5b63010000008216156146f75768010000000000b172180260401c5b62800000821615614711576801000000000058b90c0260401c5b6240000082161561472b57680100000000002c5c860260401c5b622000008216156147455768010000000000162e430260401c5b6210000082161561475f57680100000000000b17210260401c5b620800008216156147795768010000000000058b910260401c5b62040000821615614793576801000000000002c5c80260401c5b620200008216156147ad57680100000000000162e40260401c5b620100008216156147c7576801000000000000b1720260401c5b6180008216156147e057680100000000000058b90260401c5b6140008216156147f95768010000000000002c5d0260401c5b612000821615614812576801000000000000162e0260401c5b61100082161561482b5768010000000000000b170260401c5b610800821615614844576801000000000000058c0260401c5b61040082161561485d57680100000000000002c60260401c5b61020082161561487657680100000000000001630260401c5b61010082161561488f57680100000000000000b10260401c5b60808216156148a757680100000000000000590260401c5b60408216156148bf576801000000000000002c0260401c5b60208216156148d757680100000000000000160260401c5b60108216156148ef576801000000000000000b0260401c5b600882161561490757680100000000000000060260401c5b600482161561491f57680100000000000000030260401c5b600282161561493757680100000000000000010260401c5b600182161561494f57680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8280548282559060005260206000209081019282156149cb579160200282015b828111156149cb5782518255916020019190600101906149b0565b50613cf6929150614a0d565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115613cf65760008155600101614a0e565b600060208284031215614a3457600080fd5b81356001600160e01b0319811681146129a857600080fd5b6001600160a01b038116811461245757600080fd5b60008060008084860360c0811215614a7857600080fd5b853594506060601f1982011215614a8e57600080fd5b506020850192506080850135614aa381614a4c565b9396929550929360a00135925050565b600060208284031215614ac557600080fd5b81356129a881614a4c565b60008060208385031215614ae357600080fd5b82356001600160401b0380821115614afa57600080fd5b818501915085601f830112614b0e57600080fd5b813581811115614b1d57600080fd5b8660208260051b8501011115614b3257600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715614b7c57614b7c614b44565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614baa57614baa614b44565b604052919050565b60006001600160401b03821115614bcb57614bcb614b44565b5060051b60200190565b600082601f830112614be657600080fd5b81356020614bfb614bf683614bb2565b614b82565b82815260059290921b84018101918181019086841115614c1a57600080fd5b8286015b84811015614c355780358352918301918301614c1e565b509695505050505050565b600060208284031215614c5257600080fd5b81356001600160401b03811115614c6857600080fd5b610e4884828501614bd5565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015614cb557845183529383019391830191600101614c99565b5090979650505050505050565b60008060408385031215614cd557600080fd5b8235614ce081614a4c565b946020939093013593505050565b600060608284031215614d0057600080fd5b614d08614b5a565b90508135614d1581614a4c565b80825250602082013560208201526040820135604082015292915050565b600060608284031215614d4557600080fd5b6129a88383614cee565b80516001600160a01b0316825260208082015190830152604090810151910152565b6001600160a01b0383168152608081016129a86020830184614d4f565b600080600060a08486031215614da357600080fd5b614dad8585614cee565b92506060840135614dbd81614a4c565b929592945050506080919091013590565b60008060408385031215614de157600080fd5b50508035926020909101359150565b600060208284031215614e0257600080fd5b5035919050565b600082601f830112614e1a57600080fd5b81356001600160401b03811115614e3357614e33614b44565b614e46601f8201601f1916602001614b82565b818152846020838601011115614e5b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215614e9057600080fd5b8535614e9b81614a4c565b94506020860135614eab81614a4c565b935060408601356001600160401b0380821115614ec757600080fd5b614ed389838a01614bd5565b94506060880135915080821115614ee957600080fd5b614ef589838a01614bd5565b93506080880135915080821115614f0b57600080fd5b50614f1888828901614e09565b9150509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015614f665783516001600160a01b031683529284019291840191600101614f41565b50909695505050505050565b60008060008060808587031215614f8857600080fd5b8435614f9381614a4c565b93506020850135614fa381614a4c565b93969395505050506040820135916060013590565b600080600080600060a08688031215614fd057600080fd5b8535614fdb81614a4c565b94506020860135614feb81614a4c565b9350604086013592506060860135915060808601356001600160401b0381111561501457600080fd5b614f1888828901614e09565b600081830360c081121561503357600080fd5b61503b614b5a565b915082518252602083015160208301526080603f198201121561505d57600080fd5b50604051608081018181106001600160401b038211171561508057615080614b44565b604090815283015181526060830151602082015260808301516150a281614a4c565b604082015260a08301516150b581614a4c565b6060820152604082015292915050565b600060208083850312156150d857600080fd5b82516001600160401b038111156150ee57600080fd5b8301601f810185136150ff57600080fd5b805161510d614bf682614bb2565b81815260c0918202830184019184820191908884111561512c57600080fd5b938501935b83851015615152576151438986615020565b83529384019391850191615131565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561519d5761519d615174565b500190565b60006000198214156151b6576151b6615174565b5060010190565b6001600160a01b03929092168252602082015260400190565b600060c082840312156151e857600080fd5b6129a88383615020565b80518252602080820151908301526040808201516001600160a01b039081169184019190915260609182015116910152565b6080810161079682846151f2565b60005b8381101561524d578181015183820152602001615235565b838111156107c05750506000910152565b60018060a01b038516815283602082015282604082015260806060820152600082518060808401526152978160a0850160208701615232565b601f01601f19169190910160a00195945050505050565b6000602082840312156152c057600080fd5b5051919050565b6000602082840312156152d957600080fd5b815180151581146129a857600080fd5b6000602082840312156152fb57600080fd5b81516129a881614a4c565b600181815b8085111561534157816000190482111561532757615327615174565b8085161561533457918102915b93841c939080029061530b565b509250929050565b60008261535857506001610796565b8161536557506000610796565b816001811461537b5760028114615385576153a1565b6001915050610796565b60ff84111561539657615396615174565b50506001821b610796565b5060208310610133831016604e8410600b84101617156153c4575081810a610796565b6153ce8383615306565b80600019048211156153e2576153e2615174565b029392505050565b60006129a88383615349565b600081600019048311821515161561541057615410615174565b500290565b60008282101561542757615427615174565b500390565b6001600160a01b03878116825286811660208301526101008201906154546040840188614d4f565b9490941660a082015260c081019290925260e0909101529392505050565b608081016154808285614d4f565b6001600160a01b039290921660609190910152919050565b600080604083850312156154ab57600080fd5b505080516020909101519092909150565b600061010082019050845182526020850151602083015260408501516154e560408401826151f2565b5060c08201939093526001600160a01b039190911660e090910152919050565b60008060e0838503121561551857600080fd5b6155228484615020565b915060c083015190509250929050565b634e487b7160e01b600052601260045260246000fd5b60008261555757615557615532565b500490565b606081016107968284614d4f565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600082516155b4818460208701615232565b9190910192915050565b60008083128015600160ff1b8501841216156155dc576155dc615174565b6001600160ff1b03840183138116156155f7576155f7615174565b50500390565b60006001600160ff1b038184138284138082168684048611161561562357615623615174565b600160ff1b600087128281168783058912161561564257615642615174565b6000871292508782058712848416161561565e5761565e615174565b8785058712818416161561567457615674615174565b505050929093029392505050565b60008261569157615691615532565b600160ff1b8214600019841416156156ab576156ab615174565b500590565b60006001600160401b038083168185168083038211156156d2576156d2615174565b01949350505050565b60006001600160401b03808416806156f5576156f5615532565b92169190910492915050565b60006001600160401b038083168181141561571e5761571e615174565b6001019392505050565b60006001600160401b038083168185168183048111821515161561574e5761574e615174565b02949350505050565b634e487b7160e01b600052600160045260246000fdfea264697066735822122012cdcb99f37abad8ce97b3c5ccf74330619e61d3c790f32af9555961d12d9c2564736f6c6343000809003360806040523480156200001157600080fd5b506040518060400160405280601481526020017f41636164656d792d444558204c5020546f6b656e00000000000000000000000081525060405180604001604052806006815260200165098a082888ab60d31b815250604051806020016040528060008152506200008881620000c860201b60201c565b506200009433620000e1565b8151620000a990600590602085019062000133565b508051620000bf90600690602084019062000133565b50505062000216565b8051620000dd90600290602084019062000133565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200014190620001d9565b90600052602060002090601f016020900481019282620001655760008555620001b0565b82601f106200018057805160ff1916838001178555620001b0565b82800160010185558215620001b0579182015b82811115620001b057825182559160200191906001019062000193565b50620001be929150620001c2565b5090565b5b80821115620001be5760008155600101620001c3565b600181811c90821680620001ee57607f821691505b602082108114156200021057634e487b7160e01b600052602260045260246000fd5b50919050565b61290780620002266000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80636addb663116100b8578063a22cb4651161007c578063a22cb4651461029b578063d8938f26146102ae578063df94b864146102c1578063e985e9c5146102d4578063f242432a14610310578063f2fde38b1461032357600080fd5b80636addb6631461023a578063715018a6146102505780638da5cb5b1461025857806395d89b41146102735780639c46665c1461027b57600080fd5b806326ca8adb116100ff57806326ca8adb146101cc5780632eb2c2d6146101ec5780634e1273f4146102015780634fa3d25d146102145780635124ae951461022757600080fd5b8062fdd58e1461013b57806301049ed01461016157806301ffc9a71461018157806306fdde03146101a45780630e89341c146101b9575b600080fd5b61014e610149366004611da7565b610336565b6040519081526020015b60405180910390f35b61017461016f366004611e1e565b6103cf565b6040516101589190611ed2565b61019461018f366004611efb565b61060a565b6040519015158152602001610158565b6101ac61065a565b6040516101589190611f65565b6101ac6101c7366004611f78565b6106ec565b6101df6101da366004611da7565b610780565b6040516101589190611fe8565b6101ff6101fa36600461213f565b610831565b005b61017461020f3660046121ec565b61087d565b610194610222366004611da7565b6109a6565b6101746102353660046122b8565b6109cf565b6102426109f3565b6040516101589291906122d5565b6101ff610b1a565b6003546040516001600160a01b039091168152602001610158565b6101ac610b2e565b61028e6102893660046122b8565b610b3d565b60405161015891906122fa565b6101ff6102a9366004612348565b610c38565b61014e6102bc366004612386565b610c47565b61014e6102cf3660046123e8565b610c7f565b6101946102e236600461244f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101ff61031e36600461247d565b610d58565b6101ff6103313660046122b8565b610d9d565b60006001600160a01b0383166103a65760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b6060600184116104215760405162461bcd60e51b815260206004820152601c60248201527f4c70546f6b656e3a2061646472657373657320746f6f2073686f727400000000604482015260640161039d565b83821461047e5760405162461bcd60e51b815260206004820152602560248201527f4c70546f6b656e3a20506f7274696f6e7320616464726573736573206d6973736044820152640dac2e8c6d60db1b606482015260840161039d565b33600061048b8289610780565b905061049c82898360200151610e16565b6000866001600160401b038111156104b6576104b6611ff6565b6040519080825280602002602001820160405280156104df578160200160208202803683370190505b509350600082604001516040516020016104f991906124e5565b604051602081830303815290604052905060005b888110156105a95760008a8a83818110610529576105296124f3565b905060200201602081019061053e91906122b8565b90506000898984818110610554576105546124f3565b9050602002013590508085610569919061251f565b9450610576828286610fab565b888481518110610588576105886124f3565b602002602001018181525050505080806105a190612537565b91505061050d565b50826020015182146105fd5760405162461bcd60e51b815260206004820152601960248201527f4c70546f6b656e3a20496e76616c696420506f7274696f6e7300000000000000604482015260640161039d565b5050505095945050505050565b60006001600160e01b03198216636cdb3d1360e11b148061063b57506001600160e01b031982166303a24d0760e21b145b806103c957506301ffc9a760e01b6001600160e01b03198316146103c9565b60606005805461066990612552565b80601f016020809104026020016040519081016040528092919081815260200182805461069590612552565b80156106e25780601f106106b7576101008083540402835291602001916106e2565b820191906000526020600020905b8154815290600101906020018083116106c557829003601f168201915b5050505050905090565b6060600280546106fb90612552565b80601f016020809104026020016040519081016040528092919081815260200182805461072790612552565b80156107745780601f1061074957610100808354040283529160200191610774565b820191906000526020600020905b81548152906001019060200180831161075757829003601f168201915b50505050509050919050565b610788611c9e565b61079283836109a6565b6107ec5760405162461bcd60e51b815260206004820152602560248201527f4e6f204c702062616c616e636520666f756e64206174206e6f6e636520666f72604482015264103ab9b2b960d91b606482015260840161039d565b60405180606001604052808381526020016108078585610336565b81526020016108158461101c565b806020019051810190610828919061258d565b90529392505050565b6001600160a01b03851633148061084d575061084d85336102e2565b6108695760405162461bcd60e51b815260040161039d90612601565b6108768585858585611039565b5050505050565b606081518351146108e25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161039d565b600083516001600160401b038111156108fd576108fd611ff6565b604051908082528060200260200182016040528015610926578160200160208202803683370190505b50905060005b845181101561099e5761097185828151811061094a5761094a6124f3565b6020026020010151858381518110610964576109646124f3565b6020026020010151610336565b828281518110610983576109836124f3565b602090810291909101015261099781612537565b905061092c565b509392505050565b6001600160a01b03821660009081526008602052604081206109c89083611224565b9392505050565b6001600160a01b03811660009081526008602052604090206060906103c99061123c565b60608060056006818054610a0690612552565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3290612552565b8015610a7f5780601f10610a5457610100808354040283529160200191610a7f565b820191906000526020600020905b815481529060010190602001808311610a6257829003601f168201915b50505050509150808054610a9290612552565b80601f0160208091040260200160405190810160405280929190818152602001828054610abe90612552565b8015610b0b5780601f10610ae057610100808354040283529160200191610b0b565b820191906000526020600020905b815481529060010190602001808311610aee57829003601f168201915b50505050509050915091509091565b610b22611249565b610b2c60006112a3565b565b60606006805461066990612552565b60606000610b4a836112f5565b9050600081516001600160401b03811115610b6757610b67611ff6565b604051908082528060200260200182016040528015610ba057816020015b610b8d611c9e565b815260200190600190039081610b855790505b50905060005b825181101561099e576000838281518110610bc357610bc36124f3565b60200260200101519050604051806060016040528082600001518152602001826020015181526020018260400151806020019051810190610c04919061258d565b815250838381518110610c1957610c196124f3565b6020026020010181905250508080610c3090612537565b915050610ba6565b610c4333838361149d565b5050565b6000610c51611249565b610c5c858585610e16565b60008311610c6b576000610c76565b610c76858484610fab565b95945050505050565b6000610c89611249565b60008611610ceb5760405162461bcd60e51b815260206004820152602960248201527f4c70546f6b656e3a204c5020416d6f756e74206d75737420626520677265617460448201526806572207468616e20360bc1b606482015260840161039d565b60006040518060800160405280898152602001848152602001876001600160a01b03168152602001866001600160a01b0316815250604051602001610d3091906124e5565b6040516020818303038152906040529050610d4c848883610fab565b98975050505050505050565b6001600160a01b038516331480610d745750610d7485336102e2565b610d905760405162461bcd60e51b815260040161039d90612601565b610876858585858561157e565b610da5611249565b6001600160a01b038116610e0a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161039d565b610e13816112a3565b50565b6001600160a01b038316610e785760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161039d565b336000610e84846116b6565b90506000610e91846116b6565b9050610eb183876000858560405180602001604052806000815250611701565b6000858152602081815260408083206001600160a01b038a16845290915290205484811015610f2e5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161039d565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b6000610fbb600480546001019055565b5060045460008181526007602090815260409091208351610fde92850190611cf9565b50610ffa8482856040518060200160405280600081525061179a565b6001600160a01b038416600090815260086020526040902061099e90826118b4565b60008181526007602052604090208054606091906106fb90612552565b815183511461109b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161039d565b6001600160a01b0384166110c15760405162461bcd60e51b815260040161039d9061264f565b336110d0818787878787611701565b60005b84518110156111b65760008582815181106110f0576110f06124f3565b60200260200101519050600085838151811061110e5761110e6124f3565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561115e5760405162461bcd60e51b815260040161039d90612694565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061119b90849061251f565b92505081905550505050806111af90612537565b90506110d3565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516112069291906126de565b60405180910390a461121c8187878787876118c0565b505050505050565b600081815260018301602052604081205415156109c8565b606060006109c883611a2b565b6003546001600160a01b03163314610b2c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039d565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606000611302836109cf565b9050600081516001600160401b0381111561131f5761131f611ff6565b60405190808252806020026020018201604052801561137457816020015b61136160405180606001604052806000815260200160008152602001606081525090565b81526020019060019003908161133d5790505b50905060005b825181101561099e576000838281518110611397576113976124f3565b6020026020010151905060006007600083815260200190815260200160002080546113c190612552565b80601f01602080910402602001604051908101604052809291908181526020018280546113ed90612552565b801561143a5780601f1061140f5761010080835404028352916020019161143a565b820191906000526020600020905b81548152906001019060200180831161141d57829003601f168201915b50505050509050600061144d8884610336565b905060405180606001604052808481526020018281526020018381525085858151811061147c5761147c6124f3565b6020026020010181905250505050808061149590612537565b91505061137a565b816001600160a01b0316836001600160a01b031614156115115760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161039d565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166115a45760405162461bcd60e51b815260040161039d9061264f565b3360006115b0856116b6565b905060006115bd856116b6565b90506115cd838989858589611701565b6000868152602081815260408083206001600160a01b038c1684529091529020548581101561160e5760405162461bcd60e51b815260040161039d90612694565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061164b90849061251f565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46116ab848a8a8a8a8a611a86565b505050505050505050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106116f0576116f06124f3565b602090810291909101015292915050565b60005b8351811015610fa2576000848281518110611721576117216124f3565b6020026020010151905061176281600860008a6001600160a01b03166001600160a01b03168152602001908152602001600020611b5090919063ffffffff16565b506001600160a01b038616600090815260086020526040902061178590826118b4565b5050808061179290612537565b915050611704565b6001600160a01b0384166117fa5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161039d565b336000611806856116b6565b90506000611813856116b6565b905061182483600089858589611701565b6000868152602081815260408083206001600160a01b038b1684529091528120805487929061185490849061251f565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610fa283600089898989611a86565b60006109c88383611b5c565b6001600160a01b0384163b1561121c5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906119049089908990889088908890600401612703565b602060405180830381600087803b15801561191e57600080fd5b505af192505050801561194e575060408051601f3d908101601f1916820190925261194b91810190612755565b60015b6119fb5761195a612772565b806308c379a01415611994575061196f61278e565b8061197a5750611996565b8060405162461bcd60e51b815260040161039d9190611f65565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161039d565b6001600160e01b0319811663bc197c8160e01b14610fa25760405162461bcd60e51b815260040161039d90612817565b60608160000180548060200260200160405190810160405280929190818152602001828054801561077457602002820191906000526020600020905b815481526020019060010190808311611a675750505050509050919050565b6001600160a01b0384163b1561121c5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611aca908990899088908890889060040161285f565b602060405180830381600087803b158015611ae457600080fd5b505af1925050508015611b14575060408051601f3d908101601f19168201909252611b1191810190612755565b60015b611b205761195a612772565b6001600160e01b0319811663f23a6e6160e01b14610fa25760405162461bcd60e51b815260040161039d90612817565b60006109c88383611bab565b6000818152600183016020526040812054611ba3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556103c9565b5060006103c9565b60008181526001830160205260408120548015611c94576000611bcf6001836128a4565b8554909150600090611be3906001906128a4565b9050818114611c48576000866000018281548110611c0357611c036124f3565b9060005260206000200154905080876000018481548110611c2657611c266124f3565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611c5957611c596128bb565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506103c9565b60009150506103c9565b60405180606001604052806000815260200160008152602001611cf46040518060800160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b905290565b828054611d0590612552565b90600052602060002090601f016020900481019282611d275760008555611d6d565b82601f10611d4057805160ff1916838001178555611d6d565b82800160010185558215611d6d579182015b82811115611d6d578251825591602001919060010190611d52565b50611d79929150611d7d565b5090565b5b80821115611d795760008155600101611d7e565b6001600160a01b0381168114610e1357600080fd5b60008060408385031215611dba57600080fd5b8235611dc581611d92565b946020939093013593505050565b60008083601f840112611de557600080fd5b5081356001600160401b03811115611dfc57600080fd5b6020830191508360208260051b8501011115611e1757600080fd5b9250929050565b600080600080600060608688031215611e3657600080fd5b8535945060208601356001600160401b0380821115611e5457600080fd5b611e6089838a01611dd3565b90965094506040880135915080821115611e7957600080fd5b50611e8688828901611dd3565b969995985093965092949392505050565b600081518084526020808501945080840160005b83811015611ec757815187529582019590820190600101611eab565b509495945050505050565b6020815260006109c86020830184611e97565b6001600160e01b031981168114610e1357600080fd5b600060208284031215611f0d57600080fd5b81356109c881611ee5565b6000815180845260005b81811015611f3e57602081850181015186830182015201611f22565b81811115611f50576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006109c86020830184611f18565b600060208284031215611f8a57600080fd5b5035919050565b80518252602080820151908301526040808201516001600160a01b039081169184019190915260609182015116910152565b80518252602081015160208301526040810151611fe36040840182611f91565b505050565b60c081016103c98284611fc3565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561203157612031611ff6565b6040525050565b60006001600160401b0382111561205157612051611ff6565b5060051b60200190565b600082601f83011261206c57600080fd5b8135602061207982612038565b604051612086828261200c565b83815260059390931b85018201928281019150868411156120a657600080fd5b8286015b848110156120c157803583529183019183016120aa565b509695505050505050565b600082601f8301126120dd57600080fd5b81356001600160401b038111156120f6576120f6611ff6565b60405161210d601f8301601f19166020018261200c565b81815284602083860101111561212257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561215757600080fd5b853561216281611d92565b9450602086013561217281611d92565b935060408601356001600160401b038082111561218e57600080fd5b61219a89838a0161205b565b945060608801359150808211156121b057600080fd5b6121bc89838a0161205b565b935060808801359150808211156121d257600080fd5b506121df888289016120cc565b9150509295509295909350565b600080604083850312156121ff57600080fd5b82356001600160401b038082111561221657600080fd5b818501915085601f83011261222a57600080fd5b8135602061223782612038565b604051612244828261200c565b83815260059390931b850182019282810191508984111561226457600080fd5b948201945b8386101561228b57853561227c81611d92565b82529482019490820190612269565b965050860135925050808211156122a157600080fd5b506122ae8582860161205b565b9150509250929050565b6000602082840312156122ca57600080fd5b81356109c881611d92565b6040815260006122e86040830185611f18565b8281036020840152610c768185611f18565b6020808252825182820181905260009190848201906040850190845b8181101561233c57612329838551611fc3565b9284019260c09290920191600101612316565b50909695505050505050565b6000806040838503121561235b57600080fd5b823561236681611d92565b91506020830135801515811461237b57600080fd5b809150509250929050565b6000806000806080858703121561239c57600080fd5b84356123a781611d92565b9350602085013592506040850135915060608501356001600160401b038111156123d057600080fd5b6123dc878288016120cc565b91505092959194509250565b60008060008060008060c0878903121561240157600080fd5b8635955060208701359450604087013561241a81611d92565b9350606087013561242a81611d92565b9250608087013561243a81611d92565b8092505060a087013590509295509295509295565b6000806040838503121561246257600080fd5b823561246d81611d92565b9150602083013561237b81611d92565b600080600080600060a0868803121561249557600080fd5b85356124a081611d92565b945060208601356124b081611d92565b9350604086013592506060860135915060808601356001600160401b038111156124d957600080fd5b6121df888289016120cc565b608081016103c98284611f91565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561253257612532612509565b500190565b600060001982141561254b5761254b612509565b5060010190565b600181811c9082168061256657607f821691505b6020821081141561258757634e487b7160e01b600052602260045260246000fd5b50919050565b60006080828403121561259f57600080fd5b604051608081018181106001600160401b03821117156125c1576125c1611ff6565b8060405250825181526020830151602082015260408301516125e281611d92565b604082015260608301516125f581611d92565b60608201529392505050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006126f16040830185611e97565b8281036020840152610c768185611e97565b6001600160a01b0386811682528516602082015260a06040820181905260009061272f90830186611e97565b82810360608401526127418186611e97565b90508281036080840152610d4c8185611f18565b60006020828403121561276757600080fd5b81516109c881611ee5565b600060033d111561278b5760046000803e5060005160e01c5b90565b600060443d101561279c5790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156127cb57505050505090565b82850191508151818111156127e35750505050505090565b843d87010160208285010111156127fd5750505050505090565b61280c6020828601018761200c565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061289990830184611f18565b979650505050505050565b6000828210156128b6576128b6612509565b500390565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ff5a228dacdceb1d861ca4fca8d632be322492308d53b11b115f13c34bf6f57664736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c80638aa495831161010d578063bc197c81116100a0578063f23a6e611161006f578063f23a6e61146106cf578063f2445f1e146106fb578063f2fde38b1461071b578063f800ece91461073b578063fce8d3901461075057600080fd5b8063bc197c8114610633578063e58c555e14610678578063e9f162bb1461068d578063f01cb648146106af57600080fd5b8063a87430ba116100dc578063a87430ba14610516578063b169520114610580578063b2a5b4a2146105b6578063b81b2b711461060657600080fd5b80638aa49583146104a55780638da5cb5b146104b85780639027cae1146104d65780639d7de6b3146104f657600080fd5b80635eac6239116101855780637076806b116101545780637076806b14610426578063715018a61461044757806375bb16c01461045c57806382cfd1b81461046f57600080fd5b80635eac62391461034c5780635fcbd2851461037a578063613ce410146103ae57806369ee60d11461040657600080fd5b8063308e401e116101c1578063308e401e146102975780633dab9a86146102b75780634a9fefc7146102d75780635aa6e6751461031457600080fd5b806301ffc9a7146101f3578063020e78b51461022857806307973ccf1461023d5780632b956ff714610261575b600080fd5b3480156101ff57600080fd5b5061021361020e366004614a22565b610765565b60405190151581526020015b60405180910390f35b61023b610236366004614a61565b61079c565b005b34801561024957600080fd5b5061025360015481565b60405190815260200161021f565b34801561026d57600080fd5b5061025361027c366004614ab3565b6001600160a01b031660009081526002602052604090205490565b3480156102a357600080fd5b506102536102b2366004614ab3565b6107c6565b3480156102c357600080fd5b506102536102d2366004614ad0565b6108c8565b3480156102e357600080fd5b506102f76102f2366004614ab3565b6109c8565b604080519283526001600160a01b0390911660208301520161021f565b34801561032057600080fd5b50601354610334906001600160a01b031681565b6040516001600160a01b03909116815260200161021f565b34801561035857600080fd5b5061036c610367366004614c40565b6109fa565b60405161021f929190614c74565b34801561038657600080fd5b506103347f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ba57600080fd5b50600d54600e54600f546010546011546012546103d995949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161021f565b34801561041257600080fd5b50610253610421366004614cc2565b610d47565b610439610434366004614d33565b610e50565b60405161021f929190614d71565b34801561045357600080fd5b5061023b611522565b61023b61046a366004614d8e565b611536565b34801561047b57600080fd5b5061033461048a366004614ab3565b600b602052600090815260409020546001600160a01b031681565b6102536104b3366004614d33565b6118f5565b3480156104c457600080fd5b506000546001600160a01b0316610334565b3480156104e257600080fd5b506102136104f1366004614ab3565b611bd7565b34801561050257600080fd5b5061023b610511366004614dce565b611c46565b34801561052257600080fd5b5061055d610531366004614ab3565b60026020819052600091825260409091208054600182015491909201546001600160a01b039091169083565b604080519384526001600160a01b0390921660208401529082015260600161021f565b34801561058c57600080fd5b5061033461059b366004614df0565b6003602052600090815260409020546001600160a01b031681565b3480156105c257600080fd5b506103d96105d1366004614ab3565b600c60205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909186565b34801561061257600080fd5b5061061b6120a4565b6040516001600160401b03909116815260200161021f565b34801561063f57600080fd5b5061065f61064e366004614e78565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161021f565b34801561068457600080fd5b506103346120b5565b34801561069957600080fd5b506106a2612120565b60405161021f9190614f25565b3480156106bb57600080fd5b506102536106ca366004614f72565b61212c565b3480156106db57600080fd5b5061065f6106ea366004614fb8565b63f23a6e6160e01b95945050505050565b34801561070757600080fd5b50610253610716366004614cc2565b612329565b34801561072757600080fd5b5061023b610736366004614ab3565b6123e1565b34801561074757600080fd5b506106a261245a565b34801561075c57600080fd5b50610334612466565b60006001600160e01b03198216630271189760e51b148061079657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107a633856124c5565b506107c06107b936859003850185614d33565b8383611536565b50505050565b604051632711999760e21b81526001600160a01b03828116600483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690639c46665c9060240160006040518083038186803b15801561082c57600080fd5b505afa158015610840573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261086891908101906150c5565b905060005b81518110156108c157600061089a83838151811061088d5761088d61515e565b6020026020010151612704565b505050905080846108ab919061518a565b93505080806108b9906151a2565b91505061086d565b5050919050565b6000805b828110156109c15760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166326ca8adb338787868181106109185761091861515e565b905060200201356040518363ffffffff1660e01b815260040161093c9291906151bd565b60c06040518083038186803b15801561095457600080fd5b505afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c91906151d6565b9050600061099982612704565b505050905080846109aa919061518a565b9350505080806109b9906151a2565b9150506108cc565b5092915050565b6001600160a01b0390811660009081526002602081815260408084209092015480845260039091529120549092911690565b60008133825b8451811015610c225760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166326ca8adb84888581518110610a4d57610a4d61515e565b60200260200101516040518363ffffffff1660e01b8152600401610a729291906151bd565b60c06040518083038186803b158015610a8a57600080fd5b505afa158015610a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac291906151d6565b9050600080600080610ad385612704565b93509350935093506000841115610c0a57610aee848a61518a565b985060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8938f26898860000151896020015186604051602001610b3d9190615224565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610b6b949392919061525e565b602060405180830381600087803b158015610b8557600080fd5b505af1158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd91906152ae565b905080898881518110610bd257610bd261515e565b6020908102919091018101919091526040808401516001600160a01b03166000908152600c9092529020610c07818686612829565b50505b50505050508080610c1a906151a2565b915050610a00565b5060008311610c785760405162461bcd60e51b815260206004820152601d60248201527f4e6f207265776172647320617661696c61626c6520746f20636c61696d00000060448201526064015b60405180910390fd5b60145460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90610caa90849087906004016151bd565b602060405180830381600087803b158015610cc457600080fd5b505af1158015610cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfc91906152c7565b610d415760405162461bcd60e51b815260206004820152601660248201527514995dd85c99081d1c985b9cd9995c8819985a5b195960521b6044820152606401610c6f565b50915091565b600080610e3c83856001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8757600080fd5b505afa158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbf91906152ae565b610dc7612466565b6001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dff57600080fd5b505afa158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3791906152ae565b61298e565b9050610e4884826129af565b949350505050565b6000610e5a614966565b6000546001600160a01b0316331480610e7d57506013546001600160a01b031633145b610ed35760405162461bcd60e51b815260206004820152602160248201527f526f757465723a204e6f7420616c6c6f77656420746f206c69737420746f6b656044820152603760f91b6064820152608401610c6f565b82516001600160a01b038082166000908152600b60205260409020541615610f335760405162461bcd60e51b8152602060048201526013602482015272151bdad95b88185b1c9958591e481859191959606a1b6044820152606401610c6f565b6000610f3d6120a4565b6001600160401b03166112765773__$89e53cedf04fc26c6e0032f6dee798436c$__63bb3007786040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8e57600080fd5b505af4158015610fa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc691906152e9565b9050806001600160a01b031663d83678ac6040518163ffffffff1660e01b815260040160206040518083038186803b15801561100157600080fd5b505afa158015611015573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103991906152e9565b601480546001600160a01b0383166001600160a01b0319909116811790915590925063a9059cbb6110726000546001600160a01b031690565b61107e6012600a6153ea565b61108b90620f42406153f6565b6110976012600a6153ea565b6110a49062d048506153f6565b6110b5906607fd10d7c82f0b61518a565b6110c16012600a6153ea565b6110cf906301406f406153f6565b6110d99190615415565b6110e39190615415565b6040518363ffffffff1660e01b81526004016111009291906151bd565b602060405180830381600087803b15801561111a57600080fd5b505af115801561112e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115291906152c7565b50604051630415fa8f60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004808401919091529084166024830152546044820152600554606482015273__$dc99186443eb9be47560196c9a92d86c28$__90630415fa8f9060840160206040518083038186803b1580156111e157600080fd5b505af41580156111f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121991906152e9565b601380546001600160a01b0319166001600160a01b0392831617905560408051606081019091526014549091168152602081016112586012600a6153ea565b61126590620f42406153f6565b8152602001600081525094506114c6565b34156113b45773__$1e1fc3fe468f004a211d81ececa3ca4d54$__637af9dc7861129e612466565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156112dd57600080fd5b505af41580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131591906152e9565b9050806001600160a01b031663d83678ac6040518163ffffffff1660e01b815260040160206040518083038186803b15801561135057600080fd5b505afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138891906152e9565b600a80546001600160a01b0319166001600160a01b03831617905591506113ad612a75565b94506114c6565b60008560200151116114195760405162461bcd60e51b815260206004820152602860248201527f526f757465723a20496e76616c696420696e697469616c206c697175696469746044820152671e48185b5bdd5b9d60c21b6064820152608401610c6f565b61142285612aa2565b73__$41c3c373709d77f70cc8eef9cd4d91eda7$__63b3af16d383611445612466565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260440160206040518083038186803b15801561148b57600080fd5b505af415801561149f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c391906152e9565b90505b9250826114d4600682612aac565b506114e0600883612aac565b506001600160a01b038281166000908152600b6020526040902080546001600160a01b0319169186169190911790556115198486612ac1565b92505050915091565b61152a612c03565b6115346000612c5d565b565b341561154757611544612cad565b92505b82516001600160a01b039081166000908152600b60205260409020541661156f600682612d3f565b6115bb5760405162461bcd60e51b815260206004820152601c60248201527f526f757465723a20496e7075742070616972206e6f7420666f756e64000000006044820152606401610c6f565b6115c6600684612d3f565b6116125760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a204f75747075742070616972206e6f7420666f756e640000006044820152606401610c6f565b8281600061161e612466565b9050600081905060006116d98960200151856001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b15801561166857600080fd5b505afa15801561167c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a091906152ae565b846001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dff57600080fd5b905060006116e6336109c8565b9150506000876001600160a01b031663c398ae4d33848e8b8e6117098f8b6129af565b6040518763ffffffff1660e01b815260040161172a9695949392919061542c565b602060405180830381600087803b15801561174457600080fd5b505af1158015611758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177c91906152ae565b6001600160a01b0389166000908152600c60205260408120805492935085929091906117a990849061518a565b90915550506001600160a01b038a166000908152600c6020526040812060010180548592906117d990849061518a565b92505081905550600061189082896001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b15801561181f57600080fd5b505afa158015611833573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185791906152ae565b876001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dff57600080fd5b6001600160a01b0387166000908152600c60205260408120600101805492935083929091906118c090849061518a565b909155506118d09050818561518a565b601080546000906118e290849061518a565b9091555050505050505050505050505050565b600033341561190957611906612cad565b92505b82516001600160a01b038082166000908152600b602052604090205416806119735760405162461bcd60e51b815260206004820152601c60248201527f526f757465723a20496e76616c696420706169722061646472657373000000006044820152606401610c6f565b60008560200151116119d15760405162461bcd60e51b815260206004820152602160248201527f526f757465723a20496e76616c6964206c6971756964697479207061796d656e6044820152601d60fa1b6064820152608401610c6f565b600080826001600160a01b03166327a3d40088876040518363ffffffff1660e01b8152600401611a02929190615472565b6040805180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a539190615498565b9150915081600d6005016000828254611a6c919061518a565b90915550506001600160a01b0383166000908152600c60209081526040808320815160c081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460a083015291908190611adb90612d61565b91509150611aea838383612829565b84836004016000828254611afe919061518a565b909155505060028301546040516337e52e1960e21b81526004810191909152602481018690526001600160a01b0387811660448301528881166064830152898116608483015260a482018690527f0000000000000000000000000000000000000000000000000000000000000000169063df94b8649060c401602060405180830381600087803b158015611b9157600080fd5b505af1158015611ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc991906152ae565b9a9950505050505050505050565b60006001600160a01b038216611c3b5760405162461bcd60e51b815260206004820152602360248201527f526f757465723a20496e76616c696420747261646520746f6b656e206164647260448201526265737360e81b6064820152608401610c6f565b610796600883612d3f565b60008111611ca75760405162461bcd60e51b815260206004820152602860248201527f526f757465723a20416d6f756e74206d7573742062652067726561746572207460448201526768616e207a65726f60c01b6064820152608401610c6f565b6040516326ca8adb60e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906326ca8adb90611cf890339087906004016151bd565b60c06040518083038186803b158015611d1057600080fd5b505afa158015611d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4891906151d6565b90508181602001511015611d9e5760405162461bcd60e51b815260206004820152601f60248201527f526f757465723a20496e73756666696369656e74204c502062616c616e6365006044820152606401610c6f565b6040808201518101516001600160a01b0381166000908152600c6020529182209091808080611dcc87612704565b9350935093509350808760400181905250611de8858484612829565b6040516301a5e7dd60e71b815286906000906001600160a01b0383169063d2f3ee8090611e1d908c908e9033906004016154bc565b60e060405180830381600087803b158015611e3757600080fd5b505af1158015611e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6f9190615505565b809250819a5050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8938f26338b600001518c602001518d60400151604051602001611ec69190615224565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401611ef4949392919061525e565b602060405180830381600087803b158015611f0e57600080fd5b505af1158015611f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4691906152ae565b5089876004016000828254611f5b9190615415565b9091555050601280548b9190600090611f75908490615415565b909155505085156120495760145460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611fb29033908a906004016151bd565b602060405180830381600087803b158015611fcc57600080fd5b505af1158015611fe0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200491906152c7565b6120495760405162461bcd60e51b815260206004820152601660248201527514995dd85c99081d1c985b9cd9995c8819985a5b195960521b6044820152606401610c6f565b604080518b8152602081018390529081018790526001600160a01b0389169033907fbc7d19d505c7ec4db83f3b51f19fb98c4c8a99922e7839d1ee608dfbee29501b9060600160405180910390a35050505050505050505050565b60006120b06006612fcf565b905090565b600a546000906001600160a01b03166121105760405162461bcd60e51b815260206004820181905260248201527f526f757465723a2045445550616972206e6f7420796574206465706c6f7965646044820152606401610c6f565b50600a546001600160a01b031690565b60606120b06008612fd9565b6000612139600686612d3f565b6121855760405162461bcd60e51b815260206004820152601c60248201527f526f757465723a20496e7075742070616972206e6f7420666f756e64000000006044820152606401610c6f565b612190600685612d3f565b6121dc5760405162461bcd60e51b815260206004820152601d60248201527f526f757465723a204f75747075742070616972206e6f7420666f756e640000006044820152606401610c6f565b600085905060008590506000826001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222157600080fd5b505afa158015612235573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225991906152ae565b90506000826001600160a01b031663cd3293de6040518163ffffffff1660e01b815260040160206040518083038186803b15801561229657600080fd5b505afa1580156122aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ce91906152ae565b905060006122dc8a89610d47565b905060006122ea8989612fe6565b90506122f7818585613008565b965061271061230683896153f6565b6123109190615548565b61231a9088615415565b9b9a5050505050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166326ca8adb85856040518363ffffffff1660e01b815260040161237a9291906151bd565b60c06040518083038186803b15801561239257600080fd5b505afa1580156123a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ca91906151d6565b90506123d581612704565b50919695505050505050565b6123e9612c03565b6001600160a01b03811661244e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c6f565b61245781612c5d565b50565b60606120b06006612fd9565b60006120b060068261301e565b42825560018201819055806124c15760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c8408ae0dec6d040d8cadccee8d60631b6044820152606401610c6f565b5050565b6001600160a01b0382166000908152600260205260408120541561250257506001600160a01b038216600090815260026020526040902054610796565b60018054906000612512836151a2565b919050555060405180608001604052806001548152602001846001600160a01b0316815260200183815260200160016001600160401b0381111561255857612558614b44565b604051908082528060200260200182016040528015612581578160200160208202803683370190505b5090526001600160a01b0384811660009081526002602081815260409283902085518155858201516001820180546001600160a01b03191691909616179094559184015190830155606083015180516125e09260038501920190614990565b5050600154600090815260036020526040902080546001600160a01b0319166001600160a01b03861617905550811580159061263257506000828152600360205260409020546001600160a01b031615155b156126af576000828152600360208181526040808420546001600160a01b0316845260028252808420600180549190940180548086018255908652948390209094019390935590548251858152918201527fa8b1f3acfefae9dbf6c7ffd8c16eda5db6950c383b34ca999d98f9998721c50c910160405180910390a15b600154604080519182526001600160a01b038516602083015281018390527fb58d46e66658e855773af8232237e606476d7f0ad98813c081b540e6f435ea3e9060600160405180910390a15060015492915050565b600061270e6149d7565b6127166149d7565b60408051608081018252600080825260208201819052918101829052606081019190915284604001519050600c600082604001516001600160a01b03166001600160a01b031681526020019081526020016000206040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152505092506127bc83612d61565b60408201518351929550909350111561282257602085015181516040850151670de0b6b3a764000092916127ef91615415565b6127f991906153f6565b6128039190615548565b9350838360a0018181516128179190615415565b905250604083015181525b9193509193565b604080830151600285015560a080840151600586015560608085015160038701558351600d556020840151600e81905592840151600f55830151601055608083015160115582015160125580156107c0576000600e5560145460135460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926128b59291169085906004016151bd565b602060405180830381600087803b1580156128cf57600080fd5b505af11580156128e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290791906152c7565b50601354604080516060810182526014546001600160a01b039081168252602082018590526000828401529151630b0bf5df60e31b8152919092169163585faef891612956919060040161555c565b600060405180830381600087803b15801561297057600080fd5b505af1158015612984573d6000803e3d6000fd5b5050505050505050565b60008261299b83866153f6565b6129a59190615548565b90505b9392505050565b6001600160a01b0382166000908152600c60209081526040808320815160c081018352815480825260018301549482019490945260028201549281019290925260038101546060830152600481015460808301526005015460a0820152908290612a1a90859061518a565b60208301519091506000818311612a32576000612a3c565b612a3c8284615415565b905060008460800151600d60050154612a559190615415565b9050612a698282612a646120a4565b61302a565b98975050505050505050565b612a7d614966565b612a856120b5565b6001600160a01b03168152346020820152612a9f81612aa2565b90565b61245781336130a2565b60006129a8836001600160a01b0384166132e5565b612ac9614966565b612ad38284613334565b604051638aa4958360e01b81523090638aa4958390612af690859060040161555c565b602060405180830381600087803b158015612b1057600080fd5b505af1158015612b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4891906152ae565b60408083018290526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001680845290516326ca8adb60e01b815290916326ca8adb91612b9f9130916004016151bd565b60c06040518083038186803b158015612bb757600080fd5b505afa158015612bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bef91906151d6565b6020908101519082015261079681336133aa565b6000546001600160a01b031633146115345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c6f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612cb5614966565b612cbd6120b5565b6001600160a01b039081168083523460208085018290526000838152600b90915260409081902054905163f1adc25160e01b815233600482015293166024840152909163f1adc25191906044016000604051808303818588803b158015612d2357600080fd5b505af1158015612d37573d6000803e3d6000fd5b505050505090565b6001600160a01b038116600090815260018301602052604081205415156129a8565b612d696149d7565b612d716149d7565b50506040805160c081018252600d548152600e546020820152600f549181019190915260105460608201526011546080820181905260125460a083015282919042908181108015612dc3575060105415155b15612ef4576000612dd5600483613606565b90506000612de48284866136f7565b90506000612df260046137eb565b905082811115612e585760006001612e0a8584615415565b612e149190615415565b90506001811115612e3f57612e3284612e2d838261518a565b6137f7565b612e3c908461518a565b92505b612e4a8286886136f7565b612e54908461518a565b9250505b6000612e7c6103e8612e6b85604b6153f6565b612e759190615548565b84906138b2565b6010549194509150600090612e99670de0b6b3a7640000866153f6565b612ea39190615548565b608089018890526040890180519192508291612ec090839061518a565b905250875184908990612ed490839061518a565b905250602088018051839190612eeb90839061518a565b90525050505050505b826040015184606001511015612fc857602084015115612fbd576000670de0b6b3a7640000856020015186606001518660400151612f329190615415565b612f3c91906153f6565b612f469190615548565b90508084600001818151612f5a9190615415565b90525060a085018051829190612f7190839061518a565b905250608085015115612fbb576080850151600090612f98670de0b6b3a7640000846153f6565b612fa29190615548565b90508086604001818151612fb6919061518a565b905250505b505b604083015160608501525b5050915091565b6000610796825490565b606060006129a883613910565b6000612710612ff48361396c565b612ffe90856153f6565b6129a89190615548565b60006129a584613018818661518a565b8461298e565b60006129a883836139d0565b6000806130388585856139fa565b9050600080600080613053856001600160401b031688613a3e565b9350935093509350613095846001600160401b0316846001600160401b0316876001600160401b0316856001600160401b0316856001600160401b0316613b53565b9998505050505050505050565b34156131d457348260200151146131065760405162461bcd60e51b815260206004820152602260248201527f546f6b656e5061796d656e74733a2045544820616d6f756e74206d69736d61746044820152610c6d60f31b6064820152608401610c6f565b6001600160a01b03811633146131785760405162461bcd60e51b815260206004820152603160248201527f546f6b656e5061796d656e74733a204e6174697665207061796d656e74206d7560448201527039ba10313290333937b69031b0b63632b960791b6064820152608401610c6f565b81600001516001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156131b757600080fd5b505af11580156131cb573d6000803e3d6000fd5b50505050505050565b604082015161327357815160208301516040516323b872dd60e01b81526001600160a01b03848116600483015230602483015260448201929092529116906323b872dd906064015b602060405180830381600087803b15801561323657600080fd5b505af115801561324a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326e91906152c7565b505050565b815160408084015160208501519151637921219560e11b81526001600160a01b039093169263f242432a926132af92869230929060040161556a565b600060405180830381600087803b1580156132c957600080fd5b505af11580156132dd573d6000803e3d6000fd5b505050505050565b600081815260018301602052604081205461332c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610796565b506000610796565b6040820151613372578151602083015160405163095ea7b360e01b81526001600160a01b039092169163095ea7b39161321c918591906004016151bd565b815160405163a22cb46560e01b81526001600160a01b038381166004830152600160248301529091169063a22cb465906044016132af565b604082015161358c5760006001600160a01b0382163b6134c6578251602084015160405147926001600160a01b0316916133ea9160240190815260200190565b60408051601f198184030181529181526020820180516001600160e01b0316632e1a7d4d60e01b1790525161341f91906155a2565b6000604051808303816000865af19150503d806000811461345c576040519150601f19603f3d011682016040523d82523d6000602084013e613461565b606091505b509092505081156134c4574784602001518261347d919061518a565b146134c45760405162461bcd60e51b81526020600482015260176024820152764661696c656420746f207769746864726177205745445560481b6044820152606401610c6f565b505b80156135055760208301516040516001600160a01b0384169180156108fc02916000818181858888f193505050501580156107c0573d6000803e3d6000fd5b8251602084015160405163a9059cbb60e01b81526001600160a01b039092169163a9059cbb9161353a918691906004016151bd565b602060405180830381600087803b15801561355457600080fd5b505af1158015613568573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c091906152c7565b60408201516135ca578151602083015160405163a9059cbb60e01b81526001600160a01b039092169163a9059cbb9161321c918591906004016151bd565b815160408084015160208501519151637921219560e11b81526001600160a01b039093169263f242432a926132af92309287929060040161556a565b81546000906136575760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642067656e657369732074696d657374616d70000000000000006044820152606401610c6f565b6000821161369b5760405162461bcd60e51b81526020600482015260116024820152700496e76616c69642074696d657374616d7607c1b6044820152606401610c6f565b60008360010154116136e65760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c8408ae0dec6d040d8cadccee8d60631b6044820152606401610c6f565b60018301548354612ffe9084615415565b60408051808201909152600454815260055460208201526000908190819061371f9087613c13565b915091506000808584111580156137365750828611155b156137455750849050826137d5565b8684111580156137555750828711155b156137745782861115613768578261376a565b855b91508690506137d5565b60405162461bcd60e51b815260206004820152603060248201527f526f757465722e5f636f6d7075746545646765456d697373696f6e733a20496e60448201526f76616c69642074696d657374616d707360801b6064820152608401610c6f565b612a69886137e38385615415565b600554613c59565b60006107968242613606565b600082821161383e5760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642065706f63682072616e676560681b6044820152606401610c6f565b600061384984613c70565b9050600061385684613c70565b9050600061386b670de000cd866f8000613c9e565b61387583856155be565b613888906893fa92954c28c89b946155fd565b6138929190615682565b90506138a86138a3826000196155fd565b613cd0565b9695505050505050565b600080838311156138fb5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081d185ad948185b5bdd5b9d606a1b6044820152606401610c6f565b50816139078185615415565b91509250929050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561396057602002820191906000526020600020905b81548152602001906001019080831161394c575b50505050509050919050565b6000600182108061397e575061271082115b156139c45760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420736c6970706167652076616c756560501b6044820152606401610c6f565b61079682612710615415565b60008260000182815481106139e7576139e761515e565b9060005260206000200154905092915050565b600080613a078484613cfa565b613a136103e8876153f6565b613a1d9190615548565b9050613a356001613a2d85613d79565b839190613d87565b95945050505050565b60016103e8600a601e6000613a5286613d79565b905060005b846001600160401b0316881115613b4857613a738560016156b0565b9550613a808360016156b0565b93506001600160401b038116613aa757613a9b6005836156db565b945061012c9250613b36565b806001600160401b031660011415613ac6578194506127109250613b36565b6040805162461bcd60e51b81526020600482015260248101919091527f4665655574696c2e5f676574496e74657256616c7565733a206d61782063616c60448201527f6c20646570746820666f7220696e746572706f6c6174696f6e2076616c7565736064820152608401610c6f565b80613b4081615701565b915050613a57565b505092959194509250565b600085841080613b6257508484115b15613bc05760405162461bcd60e51b815260206004820152602860248201527f4d6174682e6c696e656172496e746572706f6c6174696f6e3a20496e76616c69604482015267642076616c75657360c01b6064820152608401610c6f565b6000613bcc8587615415565b613bd690856153f6565b90506000613be48887615415565b613bee90856153f6565b90506000613bfc8989615415565b905080613c09838561518a565b6130959190615548565b600080836020015183613c2691906153f6565b8451613c32919061518a565b91506001846020015183613c46919061518a565b613c509190615415565b90509250929050565b60008183613c6686613de3565b61299b91906153f6565b6000610796670de000cd866f8000613c8784613e26565b613c9990670de0b6b3a76400006155fd565b613e53565b60006714057b7ef767814f670de0b6b3a7640000613cbb84613e92565b0281613cc957613cc9615532565b0592915050565b600080821215613cf657604051635afb78ad60e11b815260048101839052602401610c6f565b5090565b600080826001600160401b031611613d545760405162461bcd60e51b815260206004820152601b60248201527f4665655574696c3a206e6f20617661696c61626c6520706169727300000000006044820152606401610c6f565b613d676001600160401b03831684615548565b90506001811161079657506001610796565b60006107966103e883615728565b6000816001600160401b0316836001600160401b03161115613dab57613dab615757565b826001600160401b0316841015613dc35750816129a8565b816001600160401b0316841115613ddb5750806129a8565b509192915050565b600080613dfb670de000cd866f8000613c9985613e26565b90506129a8670de0b6b3a7640000613e1c836893fa92954c28c89b946155fd565b6138a39190615682565b60006001600160ff1b03821115613cf65760405163322efb3360e21b815260048101839052602401610c6f565b600082613e78578115613e67576000613e71565b670de0b6b3a76400005b9050610796565b6129a8613e8d613e8785613e92565b84613f71565b614033565b6000808213613eb75760405163309fa7dd60e11b815260048101839052602401610c6f565b6000670de0b6b3a76400008312613ed057506001613eea565b6000199050826ec097ce7bc90715b34b9f10000000000492505b6000613eff670de0b6b3a764000085056140c9565b670de0b6b3a7640000808202945090915084821d90811415613f2357505002919050565b6706f05b59d3b200005b6000811315613f6857670de0b6b3a7640000828002059150671bc16d674ec800008212613f60579384019360019190911d905b60011d613f2d565b50505002919050565b6000600160ff1b831480613f885750600160ff1b82145b15613fa657604051630d01a11b60e21b815260040160405180910390fd5b60008060008512613fb75784613fbc565b846000035b915060008412613fcc5783613fd1565b836000035b90506000613fdf83836141a8565b90506001600160ff1b0381111561400c5760405163bf79e8d960e01b815260048101829052602401610c6f565b6000198087139086138082186001146140255782612a69565b505060000395945050505050565b6000808212156140805768033dd1780914b971141982121561405757506000919050565b61406382600003614033565b6ec097ce7bc90715b34b9f100000000081613cc957613cc9615532565b680a688906bd8b00000082126140ac5760405163e69458f960e01b815260048101839052602401610c6f565b670de0b6b3a7640000604083901b046129a88161426a565b919050565b6000600160801b82106140e957608091821c916140e6908261518a565b90505b600160401b821061410757604091821c91614104908261518a565b90505b640100000000821061412657602091821c91614123908261518a565b90505b62010000821061414357601091821c91614140908261518a565b90505b610100821061415f57600891821c9161415c908261518a565b90505b6010821061417a57600491821c91614177908261518a565b90505b6004821061419557600291821c91614192908261518a565b90505b600282106140c45761079660018261518a565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106141ec5760405163698d9a0160e11b815260048101829052602401610c6f565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826142265780670de0b6b3a7640000850401945050505050610796565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b67800000000000000082161561428e5768016a09e667f3bcc9090260401c5b6740000000000000008216156142ad576801306fe0a31b7152df0260401c5b6720000000000000008216156142cc576801172b83c7d517adce0260401c5b6710000000000000008216156142eb5768010b5586cf9890f62a0260401c5b67080000000000000082161561430a576801059b0d31585743ae0260401c5b67040000000000000082161561432957680102c9a3e778060ee70260401c5b6702000000000000008216156143485768010163da9fb33356d80260401c5b67010000000000000082161561436757680100b1afa5abcbed610260401c5b66800000000000008216156143855768010058c86da1c09ea20260401c5b66400000000000008216156143a3576801002c605e2e8cec500260401c5b66200000000000008216156143c157680100162f3904051fa10260401c5b66100000000000008216156143df576801000b175effdc76ba0260401c5b66080000000000008216156143fd57680100058ba01fb9f96d0260401c5b660400000000000082161561441b5768010002c5cc37da94920260401c5b6602000000000000821615614439576801000162e525ee05470260401c5b66010000000000008216156144575768010000b17255775c040260401c5b65800000000000821615614474576801000058b91b5bc9ae0260401c5b6540000000000082161561449157680100002c5c89d5ec6d0260401c5b652000000000008216156144ae5768010000162e43f4f8310260401c5b651000000000008216156144cb57680100000b1721bcfc9a0260401c5b650800000000008216156144e85768010000058b90cf1e6e0260401c5b65040000000000821615614505576801000002c5c863b73f0260401c5b6502000000000082161561452257680100000162e430e5a20260401c5b6501000000000082161561453f576801000000b1721835510260401c5b64800000000082161561455b57680100000058b90c0b490260401c5b6440000000008216156145775768010000002c5c8601cc0260401c5b642000000000821615614593576801000000162e42fff00260401c5b6410000000008216156145af5768010000000b17217fbb0260401c5b6408000000008216156145cb576801000000058b90bfce0260401c5b6404000000008216156145e757680100000002c5c85fe30260401c5b6402000000008216156146035768010000000162e42ff10260401c5b64010000000082161561461f57680100000000b17217f80260401c5b638000000082161561463a5768010000000058b90bfc0260401c5b6340000000821615614655576801000000002c5c85fe0260401c5b632000000082161561467057680100000000162e42ff0260401c5b631000000082161561468b576801000000000b17217f0260401c5b63080000008216156146a657680100000000058b90c00260401c5b63040000008216156146c15768010000000002c5c8600260401c5b63020000008216156146dc576801000000000162e4300260401c5b63010000008216156146f75768010000000000b172180260401c5b62800000821615614711576801000000000058b90c0260401c5b6240000082161561472b57680100000000002c5c860260401c5b622000008216156147455768010000000000162e430260401c5b6210000082161561475f57680100000000000b17210260401c5b620800008216156147795768010000000000058b910260401c5b62040000821615614793576801000000000002c5c80260401c5b620200008216156147ad57680100000000000162e40260401c5b620100008216156147c7576801000000000000b1720260401c5b6180008216156147e057680100000000000058b90260401c5b6140008216156147f95768010000000000002c5d0260401c5b612000821615614812576801000000000000162e0260401c5b61100082161561482b5768010000000000000b170260401c5b610800821615614844576801000000000000058c0260401c5b61040082161561485d57680100000000000002c60260401c5b61020082161561487657680100000000000001630260401c5b61010082161561488f57680100000000000000b10260401c5b60808216156148a757680100000000000000590260401c5b60408216156148bf576801000000000000002c0260401c5b60208216156148d757680100000000000000160260401c5b60108216156148ef576801000000000000000b0260401c5b600882161561490757680100000000000000060260401c5b600482161561491f57680100000000000000030260401c5b600282161561493757680100000000000000010260401c5b600182161561494f57680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8280548282559060005260206000209081019282156149cb579160200282015b828111156149cb5782518255916020019190600101906149b0565b50613cf6929150614a0d565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5b80821115613cf65760008155600101614a0e565b600060208284031215614a3457600080fd5b81356001600160e01b0319811681146129a857600080fd5b6001600160a01b038116811461245757600080fd5b60008060008084860360c0811215614a7857600080fd5b853594506060601f1982011215614a8e57600080fd5b506020850192506080850135614aa381614a4c565b9396929550929360a00135925050565b600060208284031215614ac557600080fd5b81356129a881614a4c565b60008060208385031215614ae357600080fd5b82356001600160401b0380821115614afa57600080fd5b818501915085601f830112614b0e57600080fd5b813581811115614b1d57600080fd5b8660208260051b8501011115614b3257600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715614b7c57614b7c614b44565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614baa57614baa614b44565b604052919050565b60006001600160401b03821115614bcb57614bcb614b44565b5060051b60200190565b600082601f830112614be657600080fd5b81356020614bfb614bf683614bb2565b614b82565b82815260059290921b84018101918181019086841115614c1a57600080fd5b8286015b84811015614c355780358352918301918301614c1e565b509695505050505050565b600060208284031215614c5257600080fd5b81356001600160401b03811115614c6857600080fd5b610e4884828501614bd5565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015614cb557845183529383019391830191600101614c99565b5090979650505050505050565b60008060408385031215614cd557600080fd5b8235614ce081614a4c565b946020939093013593505050565b600060608284031215614d0057600080fd5b614d08614b5a565b90508135614d1581614a4c565b80825250602082013560208201526040820135604082015292915050565b600060608284031215614d4557600080fd5b6129a88383614cee565b80516001600160a01b0316825260208082015190830152604090810151910152565b6001600160a01b0383168152608081016129a86020830184614d4f565b600080600060a08486031215614da357600080fd5b614dad8585614cee565b92506060840135614dbd81614a4c565b929592945050506080919091013590565b60008060408385031215614de157600080fd5b50508035926020909101359150565b600060208284031215614e0257600080fd5b5035919050565b600082601f830112614e1a57600080fd5b81356001600160401b03811115614e3357614e33614b44565b614e46601f8201601f1916602001614b82565b818152846020838601011115614e5b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215614e9057600080fd5b8535614e9b81614a4c565b94506020860135614eab81614a4c565b935060408601356001600160401b0380821115614ec757600080fd5b614ed389838a01614bd5565b94506060880135915080821115614ee957600080fd5b614ef589838a01614bd5565b93506080880135915080821115614f0b57600080fd5b50614f1888828901614e09565b9150509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015614f665783516001600160a01b031683529284019291840191600101614f41565b50909695505050505050565b60008060008060808587031215614f8857600080fd5b8435614f9381614a4c565b93506020850135614fa381614a4c565b93969395505050506040820135916060013590565b600080600080600060a08688031215614fd057600080fd5b8535614fdb81614a4c565b94506020860135614feb81614a4c565b9350604086013592506060860135915060808601356001600160401b0381111561501457600080fd5b614f1888828901614e09565b600081830360c081121561503357600080fd5b61503b614b5a565b915082518252602083015160208301526080603f198201121561505d57600080fd5b50604051608081018181106001600160401b038211171561508057615080614b44565b604090815283015181526060830151602082015260808301516150a281614a4c565b604082015260a08301516150b581614a4c565b6060820152604082015292915050565b600060208083850312156150d857600080fd5b82516001600160401b038111156150ee57600080fd5b8301601f810185136150ff57600080fd5b805161510d614bf682614bb2565b81815260c0918202830184019184820191908884111561512c57600080fd5b938501935b83851015615152576151438986615020565b83529384019391850191615131565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561519d5761519d615174565b500190565b60006000198214156151b6576151b6615174565b5060010190565b6001600160a01b03929092168252602082015260400190565b600060c082840312156151e857600080fd5b6129a88383615020565b80518252602080820151908301526040808201516001600160a01b039081169184019190915260609182015116910152565b6080810161079682846151f2565b60005b8381101561524d578181015183820152602001615235565b838111156107c05750506000910152565b60018060a01b038516815283602082015282604082015260806060820152600082518060808401526152978160a0850160208701615232565b601f01601f19169190910160a00195945050505050565b6000602082840312156152c057600080fd5b5051919050565b6000602082840312156152d957600080fd5b815180151581146129a857600080fd5b6000602082840312156152fb57600080fd5b81516129a881614a4c565b600181815b8085111561534157816000190482111561532757615327615174565b8085161561533457918102915b93841c939080029061530b565b509250929050565b60008261535857506001610796565b8161536557506000610796565b816001811461537b5760028114615385576153a1565b6001915050610796565b60ff84111561539657615396615174565b50506001821b610796565b5060208310610133831016604e8410600b84101617156153c4575081810a610796565b6153ce8383615306565b80600019048211156153e2576153e2615174565b029392505050565b60006129a88383615349565b600081600019048311821515161561541057615410615174565b500290565b60008282101561542757615427615174565b500390565b6001600160a01b03878116825286811660208301526101008201906154546040840188614d4f565b9490941660a082015260c081019290925260e0909101529392505050565b608081016154808285614d4f565b6001600160a01b039290921660609190910152919050565b600080604083850312156154ab57600080fd5b505080516020909101519092909150565b600061010082019050845182526020850151602083015260408501516154e560408401826151f2565b5060c08201939093526001600160a01b039190911660e090910152919050565b60008060e0838503121561551857600080fd5b6155228484615020565b915060c083015190509250929050565b634e487b7160e01b600052601260045260246000fd5b60008261555757615557615532565b500490565b606081016107968284614d4f565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600082516155b4818460208701615232565b9190910192915050565b60008083128015600160ff1b8501841216156155dc576155dc615174565b6001600160ff1b03840183138116156155f7576155f7615174565b50500390565b60006001600160ff1b038184138284138082168684048611161561562357615623615174565b600160ff1b600087128281168783058912161561564257615642615174565b6000871292508782058712848416161561565e5761565e615174565b8785058712818416161561567457615674615174565b505050929093029392505050565b60008261569157615691615532565b600160ff1b8214600019841416156156ab576156ab615174565b500590565b60006001600160401b038083168185168083038211156156d2576156d2615174565b01949350505050565b60006001600160401b03808416806156f5576156f5615532565b92169190910492915050565b60006001600160401b038083168181141561571e5761571e615174565b6001019392505050565b60006001600160401b038083168185168183048111821515161561574e5761574e615174565b02949350505050565b634e487b7160e01b600052600160045260246000fdfea264697066735822122012cdcb99f37abad8ce97b3c5ccf74330619e61d3c790f32af9555961d12d9c2564736f6c63430008090033",
  "libraries": {
    "DeployPair": "0x600700b9e5c161A159dbbDbfCB5e13747eDDDd45",
    "DeployBasePair": "0xc78e661324B870Ba4e0fAC0d64A054Fa593D297a",
    "DeployEduPair": "0xF2Dc2050Fefab5132C49c0D7727abFa56719db18",
    "DeployGovernance": "0x208016c3D94C34c3FBC987D984DbA1A061717B57"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity((address,uint256,uint256))": {
        "params": {
          "wholePayment": "Payment details for adding liquidity."
        }
      },
      "basePairAddr()": {
        "returns": {
          "_0": "Returns the basePair address."
        }
      },
      "claimRewards(uint256[])": {
        "params": {
          "nonces": "The desired SFTs to claim from."
        }
      },
      "computeFeePercent(address,uint256)": {
        "details": "The more a pair is sold, the higher the feePercent. This is computed based on the pair's sales relative to the provided liquidity in other pairs.",
        "params": {
          "inAmount": "The input amount for which the feePercent is being computed.",
          "pairAddress": "The address of the pair for which the feePercent is being computed."
        },
        "returns": {
          "feePercent": "The computed feePercent based on the input amount and the pair's sales."
        }
      },
      "createPair((address,uint256,uint256))": {
        "details": "The first pair becomes the base pair -- For now, called by only owner..when DAO is implemented, DAO can call this",
        "returns": {
          "pairAddress": "Address of the newly created pair."
        }
      },
      "estimateOutAmount(address,address,uint256,uint256)": {
        "details": "The function calculates the amount of output tokens after applying the dynamic fee and slippage.",
        "params": {
          "inAmount": "The amount of input tokens.",
          "inPair": "The address of the input pair.",
          "outPair": "The address of the output pair.",
          "slippage": "The maximum allowable slippage percentage (e.g., 50 for 0.5%)."
        },
        "returns": {
          "amountOut": "The estimated amount of output tokens."
        }
      },
      "getAllPairs()": {
        "returns": {
          "_0": "Array of pair addresses."
        }
      },
      "getClaimableRewardsByNonces(uint256[])": {
        "params": {
          "nonces": "Array of nonces to compute claimable rewards for."
        },
        "returns": {
          "totalClaimable": "Total claimable rewards for all provided nonces."
        }
      },
      "getReferrer(address)": {
        "params": {
          "userAddress": "The address of the user."
        },
        "returns": {
          "referrerAddress": "The address of the referrer, address(0) if none.",
          "referrerId": "The ID of the referrer, 0 if none."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pairsCount()": {
        "returns": {
          "_0": "count the total count of listed pairs."
        }
      },
      "removeLiquidity(uint256,uint256)": {
        "params": {
          "liqRemoval": "The amount of LP tokens to burn.",
          "nonce": "The SFT nonce representing the LP tokens to burn."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "swap((address,uint256,uint256),address,uint256)": {
        "params": {
          "inPayment": "Payment details for the trade.",
          "outPairAddr": "Address of the output pair.",
          "slippage": "Maximum slippage allowed."
        }
      },
      "tradeableTokens()": {
        "returns": {
          "_0": "Array of pair addresses."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMathSD59x18__Exp2InputTooBig(int256)": [
        {
          "notice": "Emitted when the input is greater than 192."
        }
      ],
      "PRBMathSD59x18__LogInputTooSmall(int256)": [
        {
          "notice": "Emitted when the input is less than or equal to zero."
        }
      ],
      "PRBMathSD59x18__MulInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__MulOverflow(uint256)": [
        {
          "notice": "Emitted when the intermediary absolute result overflows SD59x18."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "ToInt256CastOverflow(uint256)": [
        {
          "notice": "Emitted when trying to convert a uint256 number that doesn't fit within int256."
        }
      ],
      "ToUint256CastOverflow(int256)": [
        {
          "notice": "Emitted when trying to convert an int256 number that doesn't fit within uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "addLiquidity((address,uint256,uint256))": {
        "notice": "Adds liquidity to a pair."
      },
      "claimRewards(uint256[])": {
        "notice": "Claims rewards for a user across all pairs in which they hold LP tokens."
      },
      "computeFeePercent(address,uint256)": {
        "notice": "Computes the feePercent based on the pair's sales against the liquidity provided in other pairs."
      },
      "createPair((address,uint256,uint256))": {
        "notice": "Creates a new pair."
      },
      "estimateOutAmount(address,address,uint256,uint256)": {
        "notice": "Estimates the amount of output tokens to receive for a given input amount, considering slippage."
      },
      "getAllPairs()": {
        "notice": "Returns the list of all pairs."
      },
      "getClaimableRewardsByNonces(uint256[])": {
        "notice": "Computes claimable rewards for a list of nonces."
      },
      "getReferrer(address)": {
        "notice": "Gets the referrer and referrer ID of a user."
      },
      "removeLiquidity(uint256,uint256)": {
        "notice": "Removes liquidity from a pair and claims the corresponding rewards."
      },
      "swap((address,uint256,uint256),address,uint256)": {
        "notice": "Executes a trade between two pairs."
      },
      "tradeableTokens()": {
        "notice": "Returns the list of all trade token addreses."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/router/Router.sol:Router",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12030,
        "contract": "contracts/router/Router.sol:Router",
        "label": "userCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 12035,
        "contract": "contracts/router/Router.sol:Router",
        "label": "users",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(User)12028_storage)"
      },
      {
        "astId": 12039,
        "contract": "contracts/router/Router.sol:Router",
        "label": "userIdToAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10209,
        "contract": "contracts/router/Router.sol:Router",
        "label": "epochs",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Storage)3751_storage"
      },
      {
        "astId": 10212,
        "contract": "contracts/router/Router.sol:Router",
        "label": "pairs",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)3123_storage"
      },
      {
        "astId": 10215,
        "contract": "contracts/router/Router.sol:Router",
        "label": "tradeTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)3123_storage"
      },
      {
        "astId": 10217,
        "contract": "contracts/router/Router.sol:Router",
        "label": "_wEduAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 10221,
        "contract": "contracts/router/Router.sol:Router",
        "label": "tokensPairAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 10226,
        "contract": "contracts/router/Router.sol:Router",
        "label": "pairsData",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(PairData)10193_storage)"
      },
      {
        "astId": 10229,
        "contract": "contracts/router/Router.sol:Router",
        "label": "globalData",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(GlobalData)10206_storage"
      },
      {
        "astId": 10235,
        "contract": "contracts/router/Router.sol:Router",
        "label": "governance",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(Governance)7341"
      },
      {
        "astId": 10237,
        "contract": "contracts/router/Router.sol:Router",
        "label": "adexTokenAddress",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Governance)7341": {
        "encoding": "inplace",
        "label": "contract Governance",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(PairData)10193_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Router.PairData)",
        "numberOfBytes": "32",
        "value": "t_struct(PairData)10193_storage"
      },
      "t_mapping(t_address,t_struct(User)12028_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserModule.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)12028_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AddressSet)3123_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3122,
            "contract": "contracts/router/Router.sol:Router",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2808_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(GlobalData)10206_storage": {
        "encoding": "inplace",
        "label": "struct Router.GlobalData",
        "members": [
          {
            "astId": 10195,
            "contract": "contracts/router/Router.sol:Router",
            "label": "rewardsReserve",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10197,
            "contract": "contracts/router/Router.sol:Router",
            "label": "taxRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10199,
            "contract": "contracts/router/Router.sol:Router",
            "label": "rewardsPerShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10201,
            "contract": "contracts/router/Router.sol:Router",
            "label": "totalTradeVolume",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10203,
            "contract": "contracts/router/Router.sol:Router",
            "label": "lastTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10205,
            "contract": "contracts/router/Router.sol:Router",
            "label": "totalLiq",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PairData)10193_storage": {
        "encoding": "inplace",
        "label": "struct Router.PairData",
        "members": [
          {
            "astId": 10182,
            "contract": "contracts/router/Router.sol:Router",
            "label": "sellVolume",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10184,
            "contract": "contracts/router/Router.sol:Router",
            "label": "buyVolume",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10186,
            "contract": "contracts/router/Router.sol:Router",
            "label": "lpRewardsPershare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10188,
            "contract": "contracts/router/Router.sol:Router",
            "label": "tradeRewardsPershare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10190,
            "contract": "contracts/router/Router.sol:Router",
            "label": "totalLiq",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10192,
            "contract": "contracts/router/Router.sol:Router",
            "label": "rewardsReserve",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Set)2808_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2803,
            "contract": "contracts/router/Router.sol:Router",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2807,
            "contract": "contracts/router/Router.sol:Router",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Storage)3751_storage": {
        "encoding": "inplace",
        "label": "struct Epochs.Storage",
        "members": [
          {
            "astId": 3748,
            "contract": "contracts/router/Router.sol:Router",
            "label": "genesis",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3750,
            "contract": "contracts/router/Router.sol:Router",
            "label": "epochLength",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)12028_storage": {
        "encoding": "inplace",
        "label": "struct UserModule.User",
        "members": [
          {
            "astId": 12020,
            "contract": "contracts/router/Router.sol:Router",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12022,
            "contract": "contracts/router/Router.sol:Router",
            "label": "addr",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12024,
            "contract": "contracts/router/Router.sol:Router",
            "label": "referrerId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12027,
            "contract": "contracts/router/Router.sol:Router",
            "label": "referrals",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}