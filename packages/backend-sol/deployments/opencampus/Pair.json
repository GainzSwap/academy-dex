{
  "address": "0xDB2F57a2F86EB603C86f19BbD80ecEa15b67a98E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "firstToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "secondToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerOwnerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalFeePercent_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "specialFeePercent_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "initialLiquidityAdder_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrorBadPaymentTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorBadPercents",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorFirstLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorInitialLiquidityNotAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorInsufficientFirstToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorInsufficientLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorInsufficientSecondToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorInvalidArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorKInvariantFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorOptimalGreaterThanPaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorPermissionDenied",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxIndex",
          "type": "uint256"
        }
      ],
      "name": "ErrorSafePriceCurrentIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorSameTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOutOfRangeErrMsg",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "firstToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "secondToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "firstTokenId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "firstTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "secondTokenId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "secondTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lpTokenId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lpTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "firstTokenReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondTokenReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AddLiquidityModule.AddLiquidityEvent",
          "name": "addLiquidityEvent",
          "type": "tuple"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "firstTokenAmountMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "secondTokenAmountMin",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC20TokenPayment",
          "name": "firstPayment",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC20TokenPayment",
          "name": "secondPayment",
          "type": "tuple"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC20TokenPayment",
              "name": "lpPayment",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC20TokenPayment",
              "name": "firstTokenPayment",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC20TokenPayment",
              "name": "secondTokenPayment",
              "type": "tuple"
            }
          ],
          "internalType": "struct AddLiquidityResultType",
          "name": "output",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resume",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x510ba0a59ce15209726f1365d8acae5b4f11961f9d183bd2f98aef6a325527e7",
  "receipt": {
    "to": null,
    "from": "0x8D0739d9D0d49aFCF8d101416cD2759Bf8922013",
    "contractAddress": "0xDB2F57a2F86EB603C86f19BbD80ecEa15b67a98E",
    "transactionIndex": 1,
    "gasUsed": "29507496",
    "logsBloom": "0x
    "blockHash": "0x71997997c50735fe8db5837b56ecb9581215ce8d16d610f6dc1ab8402b85c04f",
    "transactionHash": "0x510ba0a59ce15209726f1365d8acae5b4f11961f9d183bd2f98aef6a325527e7",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 3938,
        "transactionHash": "0x510ba0a59ce15209726f1365d8acae5b4f11961f9d183bd2f98aef6a325527e7",
        "address": "0xDB2F57a2F86EB603C86f19BbD80ecEa15b67a98E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x71997997c50735fe8db5837b56ecb9581215ce8d16d610f6dc1ab8402b85c04f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 3938,
        "transactionHash": "0x510ba0a59ce15209726f1365d8acae5b4f11961f9d183bd2f98aef6a325527e7",
        "address": "0xDB2F57a2F86EB603C86f19BbD80ecEa15b67a98E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b",
          "0x0000000000000000000000005345b2a60d92b9f02d578fcf11bb39827aa29856",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x71997997c50735fe8db5837b56ecb9581215ce8d16d610f6dc1ab8402b85c04f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 3938,
        "transactionHash": "0x510ba0a59ce15209726f1365d8acae5b4f11961f9d183bd2f98aef6a325527e7",
        "address": "0xDB2F57a2F86EB603C86f19BbD80ecEa15b67a98E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
          "0x0000000000000000000000005345b2a60d92b9f02d578fcf11bb39827aa29856",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x71997997c50735fe8db5837b56ecb9581215ce8d16d610f6dc1ab8402b85c04f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 3938,
        "transactionHash": "0x510ba0a59ce15209726f1365d8acae5b4f11961f9d183bd2f98aef6a325527e7",
        "address": "0xDB2F57a2F86EB603C86f19BbD80ecEa15b67a98E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfcb9fcbfa83b897fb2d5cf4b58962164105c1e71489a37ef3ae0db3fdce576f6",
          "0x0000000000000000000000005345b2a60d92b9f02d578fcf11bb39827aa29856",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x71997997c50735fe8db5837b56ecb9581215ce8d16d610f6dc1ab8402b85c04f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 3938,
        "transactionHash": "0x510ba0a59ce15209726f1365d8acae5b4f11961f9d183bd2f98aef6a325527e7",
        "address": "0xDB2F57a2F86EB603C86f19BbD80ecEa15b67a98E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x71997997c50735fe8db5837b56ecb9581215ce8d16d610f6dc1ab8402b85c04f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 3938,
        "transactionHash": "0x510ba0a59ce15209726f1365d8acae5b4f11961f9d183bd2f98aef6a325527e7",
        "address": "0xDB2F57a2F86EB603C86f19BbD80ecEa15b67a98E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x71997997c50735fe8db5837b56ecb9581215ce8d16d610f6dc1ab8402b85c04f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 3938,
        "transactionHash": "0x510ba0a59ce15209726f1365d8acae5b4f11961f9d183bd2f98aef6a325527e7",
        "address": "0xDB2F57a2F86EB603C86f19BbD80ecEa15b67a98E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfcb9fcbfa83b897fb2d5cf4b58962164105c1e71489a37ef3ae0db3fdce576f6",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x71997997c50735fe8db5837b56ecb9581215ce8d16d610f6dc1ab8402b85c04f"
      }
    ],
    "blockNumber": 3938,
    "cumulativeGasUsed": "29507496",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x203fF00c274B2190314DfF2C366B1ff2F2Ab81Db",
    "0x0a80fd491b72d3170c3163420B73E6A2d3835B5e",
    "0x5345B2a60D92b9f02D578Fcf11bB39827aa29856",
    "0x8D0739d9D0d49aFCF8d101416cD2759Bf8922013",
    300,
    50,
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 7,
  "solcInputHash": "f478984b6974a286bb609b133203a46d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"firstToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalFeePercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"specialFeePercent_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initialLiquidityAdder_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrorBadPaymentTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorBadPercents\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorFirstLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorInitialLiquidityNotAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorInsufficientFirstToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorInsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorInsufficientSecondToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorInvalidArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorKInvariantFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorOptimalGreaterThanPaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorPermissionDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxIndex\",\"type\":\"uint256\"}],\"name\":\"ErrorSafePriceCurrentIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorSameTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfRangeErrMsg\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"firstToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"secondToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"firstTokenId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"secondTokenId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secondTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpTokenId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstTokenReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondTokenReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AddLiquidityModule.AddLiquidityEvent\",\"name\":\"addLiquidityEvent\",\"type\":\"tuple\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstTokenAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondTokenAmountMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20TokenPayment\",\"name\":\"firstPayment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20TokenPayment\",\"name\":\"secondPayment\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20TokenPayment\",\"name\":\"lpPayment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20TokenPayment\",\"name\":\"firstTokenPayment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20TokenPayment\",\"name\":\"secondTokenPayment\",\"type\":\"tuple\"}],\"internalType\":\"struct AddLiquidityResultType\",\"name\":\"output\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrorSafePriceCurrentIndex(uint256,uint256)\":[{\"params\":{\"currentIndex\":\"the current index\",\"maxIndex\":\"the maximum possible index\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ErrorFirstLiquidity()\":[{\"notice\":\"First tokens needs to be greater than minimum liquidity\"}],\"ErrorInitialLiquidityNotAdded()\":[{\"notice\":\"Initial liquidity was not added\"}],\"ErrorInsufficientFirstToken()\":[{\"notice\":\"Insufficient first token computed amount\"}],\"ErrorInsufficientLiquidity()\":[{\"notice\":\"Insufficient liquidity minted\"}],\"ErrorInsufficientSecondToken()\":[{\"notice\":\"Insufficient second token computed amount\"}],\"ErrorKInvariantFailed()\":[{\"notice\":\"K invariant failed\"}],\"ErrorOptimalGreaterThanPaid()\":[{\"notice\":\"Optimal amount greater than desired amount\"}],\"ErrorPermissionDenied()\":[{\"notice\":\"Permission denied\"}],\"ErrorSafePriceCurrentIndex(uint256,uint256)\":[{\"notice\":\"The current safe price index of `currentIndex` is greater than the maximum number of observations `maxIndex`\"}],\"IndexOutOfRangeErrMsg()\":[{\"notice\":\"index out of range\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pair/Pair.sol\":\"Pair\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/common/libs/Cmp.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nlibrary Cmp {\\n\\tfunction min(\\n\\t\\tuint256 first,\\n\\t\\tuint256 other\\n\\t) internal pure returns (uint256 min_) {\\n\\t\\tif (first <= other) {\\n\\t\\t\\tmin_ = first;\\n\\t\\t} else {\\n\\t\\t\\tmin_ = other;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xe502db73f8efec22c5a78b63b74bc9cbcc6358946cadd231b413ad0f666b9417\",\"license\":\"MIT\"},\"contracts/common/libs/TokenPayments.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport \\\"./Types.sol\\\";\\n\\nlibrary TokenPayments {\\n\\tfunction receive2(\\n\\t\\taddress receipient,\\n\\t\\taddress sender,\\n\\t\\tERC20TokenPayment memory firstPayment,\\n\\t\\tERC20TokenPayment memory secondPayment\\n\\t)\\n\\t\\tinternal\\n\\t\\treturns (\\n\\t\\t\\tERC20TokenPayment memory firstReceived,\\n\\t\\t\\tERC20TokenPayment memory secondReceived\\n\\t\\t)\\n\\t{\\n\\t\\tIERC20(firstPayment.tokenAddress).transferFrom(\\n\\t\\t\\tsender,\\n\\t\\t\\treceipient,\\n\\t\\t\\tfirstPayment.amount\\n\\t\\t);\\n\\t\\tIERC20(secondPayment.tokenAddress).transferFrom(\\n\\t\\t\\tsender,\\n\\t\\t\\treceipient,\\n\\t\\t\\tsecondPayment.amount\\n\\t\\t);\\n\\n\\t\\t(firstReceived, secondReceived) = (firstPayment, secondPayment);\\n\\t}\\n\\n\\tfunction sendMultipleTokensIfNotZero(\\n\\t\\taddress destination,\\n\\t\\tERC20TokenPayment[] memory payments\\n\\t) internal {\\n\\t\\tfor (uint index = 0; index < payments.length; index++) {\\n\\t\\t\\tERC20TokenPayment memory payment = payments[index];\\n\\t\\t\\tif (payment.amount > 0) {\\n\\t\\t\\t\\tTransferHelper.safeTransfer(\\n\\t\\t\\t\\t\\tpayment.tokenAddress,\\n\\t\\t\\t\\t\\tdestination,\\n\\t\\t\\t\\t\\tpayment.amount\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x6123c451ed5f24616bbc99f7082943eecc810dd16c48b62e094c3577079f3f74\",\"license\":\"MIT\"},\"contracts/common/libs/Types.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nstruct ERC20TokenPayment {\\n\\taddress tokenAddress;\\n\\tuint256 amount;\\n}\\n\",\"keccak256\":\"0xde69a43dc9dcc72c86cc2a7868b8916f1a96938a1e3106455f7f817af51eafc4\",\"license\":\"MIT\"},\"contracts/common/libs/Whitelist.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nstruct whitelist {\\n\\tmapping(address => bool) whitelist;\\n}\\n\\nlibrary Whitelist {\\n\\tfunction add(whitelist storage self, address addrs) internal {\\n\\t\\tself.whitelist[addrs] = true;\\n\\t}\\n}\\n\",\"keccak256\":\"0x23642f381a760ee8e061b4ce363e49b1d051e1a0476fdcddee7806ceaa925499\",\"license\":\"MIT\"},\"contracts/common/modules/BannedAddressModule.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"../libs/Whitelist.sol\\\";\\n\\nabstract contract BannedAdddressModule {\\n\\twhitelist internal bannedAddresses;\\n\\tusing Whitelist for whitelist;\\n\\n\\tfunction addBannedAddress(address addrs) internal {\\n\\t\\tbannedAddresses.add(addrs);\\n\\t}\\n}\\n\",\"keccak256\":\"0xbd0d55434d548ebb21dcf37d262aa6874ea99bc1edc5ab7d8940903ad3c0c3c2\",\"license\":\"MIT\"},\"contracts/common/modules/PausableModule.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"./PermissionsModule.sol\\\";\\n\\nenum State {\\n\\tInactive,\\n\\tActive,\\n\\tPartialActive\\n}\\n\\nabstract contract PausableModule is PermissionsModule {\\n\\tState public state;\\n\\n\\tfunction resume() external {\\n\\t\\trequireCallerHasPausePermissions();\\n\\t\\tstate = State.Active;\\n\\t}\\n}\\n\",\"keccak256\":\"0x249681a8b2b274ee455f1235fd11c655e2475d34033b9c0067d8df630da4d4b8\",\"license\":\"MIT\"},\"contracts/common/modules/PermissionsModule.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"../../pair/Errors.sol\\\";\\n\\nbytes32 constant PermissionNONE = keccak256(\\\"NONE\\\");\\nbytes32 constant PermissionOWNER = keccak256(\\\"OWNER\\\");\\nbytes32 constant PermissionADMIN = keccak256(\\\"ADMIN\\\");\\nbytes32 constant PermissionPAUSE = keccak256(\\\"PAUSE\\\");\\n\\nenum Permission {\\n\\tNONE,\\n\\tOWNER,\\n\\tADMIN,\\n\\tPAUSE\\n}\\n\\nabstract contract PermissionsModule is AccessControl {\\n\\tfunction addRoles(bytes32[] memory roles, address user) internal {\\n\\t\\tfor (uint index = 0; index < roles.length; index++) {\\n\\t\\t\\tgrantRole(roles[index], user);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction requireCallerHasPausePermissions() internal view {\\n\\t\\trequireCallerAnyOf(PermissionPAUSE);\\n\\t}\\n\\n\\tfunction requireCallerAnyOf(bytes32 permissions) internal view {\\n\\t\\tif (!hasRole(permissions, msg.sender)) {\\n\\t\\t\\trevert ErrorPermissionDenied();\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xefbb7e9da963dd58111d24ecb2c65b6848b2d3396a056a53893b308aa25c7742\",\"license\":\"MIT\"},\"contracts/pair/Amm.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nabstract contract AmmModule {\\n\\tfunction calculateKConstant(\\n\\t\\tuint256 firstTokenAmt,\\n\\t\\tuint256 secondTokenAmt\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn firstTokenAmt * secondTokenAmt;\\n\\t}\\n\\n\\tfunction quote(\\n\\t\\tuint256 firstTokenAmount,\\n\\t\\tuint256 firstTokenReserve,\\n\\t\\tuint256 secondTokenReserve\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn (firstTokenAmount * secondTokenReserve) / firstTokenReserve;\\n\\t}\\n}\\n\",\"keccak256\":\"0x3daa7e28b39113fdda64b82da37903c578f69155e82dfb231bbc694aa3f5b90e\",\"license\":\"MIT\"},\"contracts/pair/ConfigModule.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nuint256 constant MAX_PERCENTAGE = 100_000;\\nuint256 constant MAX_FEE_PERCENTAGE = 5_000;\\n\\nabstract contract ConfigModule {\\n\\terror ErrorBadPercents();\\n\\n\\taddress public firstToken;\\n\\taddress public secondToken;\\n\\n\\tuint256 private totalFeePercent;\\n\\tuint256 private specialFeePercent;\\n\\n\\taddress internal routerAddress;\\n\\taddress internal initialLiquidityAdder;\\n\\n\\tmapping(address => uint256) pairReserve;\\n\\tuint256 lpTokenSupply;\\n\\taddress lpTokenIdentifier;\\n\\n\\tfunction _setFeePercents(\\n\\t\\tuint256 totalFeePercent_,\\n\\t\\tuint256 specialFeePercent_\\n\\t) internal {\\n\\t\\tif (\\n\\t\\t\\ttotalFeePercent < specialFeePercent ||\\n\\t\\t\\ttotalFeePercent > MAX_PERCENTAGE\\n\\t\\t) revert ErrorBadPercents();\\n\\n\\t\\ttotalFeePercent = totalFeePercent_;\\n\\t\\tspecialFeePercent = specialFeePercent_;\\n\\t}\\n}\\n\",\"keccak256\":\"0xeec1513d898f1da24a30fb215dbe0a1b2cfd990b9470ae9d5f54f660d39dde23\",\"license\":\"MIT\"},\"contracts/pair/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nerror ErrorInvalidArgs();\\nerror ErrorBadPaymentTokens();\\nerror ErrorNotActive();\\n\\n/// Initial liquidity was not added\\nerror ErrorInitialLiquidityNotAdded();\\n\\n/// The current safe price index of `currentIndex` is greater than the maximum number of observations `maxIndex`\\n/// @param currentIndex the current index\\n/// @param maxIndex the maximum possible index\\nerror ErrorSafePriceCurrentIndex(uint currentIndex, uint maxIndex);\\n\\n/// index out of range\\nerror IndexOutOfRangeErrMsg();\\n\\n/// K invariant failed\\nerror ErrorKInvariantFailed();\\n\\n/// Insufficient liquidity minted\\nerror ErrorInsufficientLiquidity();\\n\\n/// First tokens needs to be greater than minimum liquidity\\nerror ErrorFirstLiquidity();\\n\\n/// Optimal amount greater than desired amount\\nerror ErrorOptimalGreaterThanPaid();\\n\\n/// Insufficient first token computed amount\\nerror ErrorInsufficientFirstToken();\\n\\n/// Insufficient second token computed amount\\nerror ErrorInsufficientSecondToken();\\n\\n/// Permission denied\\nerror ErrorPermissionDenied();\\n\",\"keccak256\":\"0xa2cc36ff3c38ffe557bb72bf7f6f7695736685029765065bd3526d1cddec6d3a\",\"license\":\"MIT\"},\"contracts/pair/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./contexts/Base.sol\\\";\\nimport \\\"../common/libs/Cmp.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./contexts/AddLiquidity.sol\\\";\\nimport \\\"./Amm.sol\\\";\\n\\nuint256 constant MINIMUM_LIQUIDITY = 1_000;\\n\\nabstract contract LiquidityPoolModule is AmmModule, ERC20 {\\n\\tfunction poolAddLiquidity(\\n\\t\\tuint256 firstTokenOptimalAmount,\\n\\t\\tuint256 secondTokenOptimalAmount,\\n\\t\\tstoragecache storage storageCache\\n\\t) internal returns (uint256 liquidity) {\\n\\t\\tuint256 firstPotentialAmt = (firstTokenOptimalAmount *\\n\\t\\t\\tstorageCache.lpTokenSupply) / storageCache.firstTokenReserve;\\n\\t\\tuint256 secondPotentialAmt = (secondTokenOptimalAmount *\\n\\t\\t\\tstorageCache.lpTokenSupply) / storageCache.secondTokenReserve;\\n\\n\\t\\tliquidity = Cmp.min(firstPotentialAmt, secondPotentialAmt);\\n\\t\\tif (liquidity <= 0) {\\n\\t\\t\\trevert ErrorInsufficientLiquidity();\\n\\t\\t}\\n\\t\\tstorageCache.lpTokenSupply += liquidity;\\n\\n\\t\\tstorageCache.firstTokenReserve += firstTokenOptimalAmount;\\n\\t\\tstorageCache.secondTokenReserve += secondTokenOptimalAmount;\\n\\t}\\n\\n\\tfunction poolAddInitialLiquidity(\\n\\t\\tuint256 firstTokenOptimalAmount,\\n\\t\\tuint256 secondTokenOptimalAmount,\\n\\t\\tstoragecache storage storageCache\\n\\t) internal returns (uint256 liquidity) {\\n\\t\\tliquidity = Cmp.min(firstTokenOptimalAmount, secondTokenOptimalAmount);\\n\\t\\tif (liquidity <= MINIMUM_LIQUIDITY) {\\n\\t\\t\\trevert ErrorFirstLiquidity();\\n\\t\\t}\\n\\n\\t\\t// localMint -> Mint liquidity to contract\\n\\t\\t_mint(address(this), MINIMUM_LIQUIDITY);\\n\\n\\t\\tstorageCache.lpTokenSupply = liquidity;\\n\\t\\tstorageCache.firstTokenReserve += firstTokenOptimalAmount;\\n\\t\\tstorageCache.secondTokenReserve += secondTokenOptimalAmount;\\n\\n\\t\\tliquidity -= MINIMUM_LIQUIDITY;\\n\\t}\\n\\n\\tfunction setOptimalAmounts(\\n\\t\\tAddLiquidityContext memory context,\\n\\t\\tstoragecache storage storageCache\\n\\t) internal view returns (AddLiquidityContext memory) {\\n\\t\\tuint256 firstTokenAmountDesired = context.firstPayment.amount;\\n\\t\\tuint256 secondTokenAmountDesired = context.secondPayment.amount;\\n\\n\\t\\tbool isInitialLiqAdd = storageCache.lpTokenSupply == 0;\\n\\t\\tif (isInitialLiqAdd) {\\n\\t\\t\\tcontext.firstTokenOptimalAmount = firstTokenAmountDesired;\\n\\t\\t\\tcontext.secondTokenOptimalAmount = secondTokenAmountDesired;\\n\\n\\t\\t\\treturn context;\\n\\t\\t}\\n\\n\\t\\tuint256 secondTokenAmountOptimal = quote(\\n\\t\\t\\tfirstTokenAmountDesired,\\n\\t\\t\\tstorageCache.firstTokenReserve,\\n\\t\\t\\tstorageCache.secondTokenReserve\\n\\t\\t);\\n\\n\\t\\tif (secondTokenAmountOptimal <= secondTokenAmountDesired) {\\n\\t\\t\\tcontext.firstTokenOptimalAmount = firstTokenAmountDesired;\\n\\t\\t\\tcontext.secondTokenOptimalAmount = secondTokenAmountOptimal;\\n\\t\\t} else {\\n\\t\\t\\tuint256 firstTokenAmountOptimal = quote(\\n\\t\\t\\t\\tsecondTokenAmountDesired,\\n\\t\\t\\t\\tstorageCache.secondTokenReserve,\\n\\t\\t\\t\\tstorageCache.firstTokenReserve\\n\\t\\t\\t);\\n\\t\\t\\tif (firstTokenAmountOptimal > firstTokenAmountDesired) {\\n\\t\\t\\t\\trevert ErrorOptimalGreaterThanPaid();\\n\\t\\t\\t}\\n\\t\\t\\tcontext.firstTokenOptimalAmount = firstTokenAmountOptimal;\\n\\t\\t\\tcontext.secondTokenOptimalAmount = secondTokenAmountDesired;\\n\\t\\t}\\n\\t\\tif (context.firstTokenOptimalAmount < context.firstTokenAmountMin) {\\n\\t\\t\\trevert ErrorInsufficientFirstToken();\\n\\t\\t}\\n\\t\\tif (context.secondTokenOptimalAmount < context.secondTokenAmountMin) {\\n\\t\\t\\trevert ErrorInsufficientSecondToken();\\n\\t\\t}\\n\\n\\t\\treturn context;\\n\\t}\\n}\\n\",\"keccak256\":\"0x049d8d35beb4d0c32b2400a3ddc7f2d3f37f0aa9b124e51e769dc14ac165eb9b\",\"license\":\"MIT\"},\"contracts/pair/Pair.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../common/modules/PausableModule.sol\\\";\\nimport \\\"../common/modules/BannedAddressModule.sol\\\";\\n\\nimport \\\"./ConfigModule.sol\\\";\\n\\nimport \\\"./pair_actions/AddLiquidityModule.sol\\\";\\n\\ncontract Pair is\\n\\tConfigModule,\\n\\tPausableModule,\\n\\tBannedAdddressModule,\\n\\tAddLiquidityModule\\n{\\n\\terror InvalidTokenAddress();\\n\\terror ErrorSameTokens();\\n\\n\\tconstructor(\\n\\t\\taddress firstToken_,\\n\\t\\taddress secondToken_,\\n\\t\\taddress routerAddress_,\\n\\t\\taddress routerOwnerAddress,\\n\\t\\tuint256 totalFeePercent_,\\n\\t\\tuint256 specialFeePercent_,\\n\\t\\taddress initialLiquidityAdder_\\n\\t) ERC20(\\\"Pair-LP\\\", \\\"PLP\\\") {\\n\\t\\tif (firstToken_ == address(0)) revert InvalidTokenAddress();\\n\\t\\tif (secondToken_ == address(0)) revert InvalidTokenAddress();\\n\\t\\tif (firstToken_ == secondToken_) revert ErrorSameTokens();\\n\\n\\t\\t_setFeePercents(totalFeePercent_, specialFeePercent_);\\n\\t\\tstate = State.Inactive;\\n\\t\\trouterAddress = routerAddress_;\\n\\n\\t\\tfirstToken = firstToken_;\\n\\t\\tsecondToken = secondToken_;\\n\\t\\tlpTokenIdentifier = address(this);\\n\\n\\t\\tinitialLiquidityAdder = initialLiquidityAdder_;\\n\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n\\t\\tbytes32[] memory allPermissions = new bytes32[](3);\\n\\t\\tallPermissions[0] = PermissionOWNER;\\n\\t\\tallPermissions[1] = PermissionADMIN;\\n\\t\\tallPermissions[2] = PermissionPAUSE;\\n\\n\\t\\taddRoles(allPermissions, routerAddress);\\n\\t\\taddRoles(allPermissions, routerOwnerAddress);\\n\\n\\t\\taddBannedAddress(address(this));\\n\\t}\\n}\\n\",\"keccak256\":\"0xbac281fa662c69ff34fbde67cd8b8be54307c83bd35b9b02fa81cf177bf4a0bb\",\"license\":\"MIT\"},\"contracts/pair/SafePrice.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"./Errors.sol\\\";\\n\\n// TODO use when we can do operator overloading; see https://docs.soliditylang.org/en/v0.8.23/contracts.html#using-for\\n// type Round is uint256;\\n\\nuint constant MAX_OBSERVATIONS = 65_536; // 2^{16} records, to optimise binary search\\n\\nstruct PriceObservation {\\n\\tuint256 firstTokenReserveAccumulated;\\n\\tuint256 secondTokenReserveAccumulated;\\n\\tuint256 weightAccumulated;\\n\\t// Round recordingRound;\\n\\tuint256 recordingRound;\\n}\\n\\nstruct IndexValue {\\n\\tuint keyIndex;\\n\\tPriceObservation value;\\n}\\n\\nstruct priceObsvec {\\n\\tmapping(uint => IndexValue) data;\\n\\tuint[] keys;\\n\\tuint length;\\n}\\n\\nlibrary PriceObsVec {\\n\\tfunction isEmpty(\\n\\t\\tpriceObsvec storage self\\n\\t) internal view returns (bool empty) {\\n\\t\\tempty = self.length == 0;\\n\\t}\\n\\n\\tfunction get(\\n\\t\\tpriceObsvec storage self,\\n\\t\\tuint index\\n\\t) internal view returns (PriceObservation memory) {\\n\\t\\tif (index > self.length) {\\n\\t\\t\\trevert IndexOutOfRangeErrMsg();\\n\\t\\t}\\n\\n\\t\\treturn self.data[index].value;\\n\\t}\\n\\n\\tfunction set(\\n\\t\\tpriceObsvec storage self,\\n\\t\\tuint index,\\n\\t\\tPriceObservation memory value\\n\\t) internal {\\n\\t\\tif (index > self.length) {\\n\\t\\t\\trevert IndexOutOfRangeErrMsg();\\n\\t\\t}\\n\\n\\t\\tself.data[index].value = value;\\n\\t\\tself.data[index].keyIndex = index;\\n\\t}\\n\\n\\t/// Add one item at the end of the list.\\n\\t/// Returns the index of the newly inserted item, which is also equal to the new number of elements.\\n\\tfunction push(\\n\\t\\tpriceObsvec storage self,\\n\\t\\tPriceObservation memory value\\n\\t) internal returns (uint) {\\n\\t\\tself.length += 1;\\n\\n\\t\\tself.data[self.length].value = value;\\n\\t\\tself.data[self.length].keyIndex = self.length;\\n\\n\\t\\treturn self.length;\\n\\t}\\n\\n\\tfunction len(priceObsvec storage self) internal view returns (uint) {\\n\\t\\treturn self.length;\\n\\t}\\n}\\n\\nabstract contract SafePriceModule {\\n\\tuint safePriceCurrentIndex;\\n\\n\\tpriceObsvec priceObservations;\\n\\tusing PriceObsVec for priceObsvec;\\n\\n\\tfunction updateSafePrice(\\n\\t\\tuint256 firstTokenReserve,\\n\\t\\tuint256 secondTokenReserve\\n\\t) internal {\\n\\t\\tif (firstTokenReserve == 0 || secondTokenReserve == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint currentRound = block.number;\\n\\n\\t\\tif (safePriceCurrentIndex > MAX_OBSERVATIONS) {\\n\\t\\t\\trevert ErrorSafePriceCurrentIndex(\\n\\t\\t\\t\\tsafePriceCurrentIndex,\\n\\t\\t\\t\\tMAX_OBSERVATIONS\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tPriceObservation memory lastPriceObservation;\\n\\t\\tuint newIndex = 1;\\n\\t\\tif (!priceObservations.isEmpty()) {\\n\\t\\t\\tlastPriceObservation = priceObservations.get(safePriceCurrentIndex);\\n\\t\\t\\tnewIndex = (safePriceCurrentIndex % MAX_OBSERVATIONS) + 1;\\n\\t\\t}\\n\\n\\t\\tif (lastPriceObservation.recordingRound == currentRound) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tPriceObservation memory newPriceObservation = computeNewObservation(\\n\\t\\t\\tcurrentRound,\\n\\t\\t\\tfirstTokenReserve,\\n\\t\\t\\tsecondTokenReserve,\\n\\t\\t\\tlastPriceObservation\\n\\t\\t);\\n\\n\\t\\tif (priceObservations.len() == MAX_OBSERVATIONS) {\\n\\t\\t\\tpriceObservations.set(newIndex, newPriceObservation);\\n\\t\\t} else {\\n\\t\\t\\tpriceObservations.push(newPriceObservation);\\n\\t\\t}\\n\\n\\t\\tsafePriceCurrentIndex = newIndex;\\n\\t}\\n\\n\\tfunction computeNewObservation(\\n\\t\\tuint newRound,\\n\\t\\tuint256 newFirstReserve,\\n\\t\\tuint256 newSecondReserve,\\n\\t\\tPriceObservation memory currentPriceObservation\\n\\t) internal pure returns (PriceObservation memory newPriceObservation) {\\n\\t\\tuint256 newWeight = currentPriceObservation.recordingRound == 0\\n\\t\\t\\t? 1\\n\\t\\t\\t: newRound - currentPriceObservation.recordingRound;\\n\\n\\t\\tnewPriceObservation = currentPriceObservation;\\n\\t\\tnewPriceObservation.firstTokenReserveAccumulated +=\\n\\t\\t\\tnewWeight *\\n\\t\\t\\tnewFirstReserve;\\n\\t\\tnewPriceObservation.secondTokenReserveAccumulated +=\\n\\t\\t\\tnewWeight *\\n\\t\\t\\tnewSecondReserve;\\n\\t\\tnewPriceObservation.weightAccumulated += newWeight;\\n\\t\\tnewPriceObservation.recordingRound = newRound;\\n\\t}\\n}\\n\",\"keccak256\":\"0x5701f5704f641b0a879229696996dbc27d5828a255070d52285d7718388f15d8\",\"license\":\"MIT\"},\"contracts/pair/contexts/AddLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"../../common/libs/Types.sol\\\";\\n\\nstruct AddLiquidityContext {\\n\\tERC20TokenPayment firstPayment;\\n\\tERC20TokenPayment secondPayment;\\n\\tuint256 firstTokenAmountMin;\\n\\tuint256 secondTokenAmountMin;\\n\\tuint256 firstTokenOptimalAmount;\\n\\tuint256 secondTokenOptimalAmount;\\n\\tuint256 liqAdded;\\n}\\n\\nlibrary AddLiquidityContextUtil {\\n\\tfunction newContext(\\n\\t\\tERC20TokenPayment memory firstPayment,\\n\\t\\tERC20TokenPayment memory secondPayment,\\n\\t\\tuint256 firstTokenAmountMin,\\n\\t\\tuint256 secondTokenAmountMin\\n\\t) internal pure returns (AddLiquidityContext memory context) {\\n\\t\\tcontext.firstPayment = firstPayment;\\n\\t\\tcontext.secondPayment = secondPayment;\\n\\t\\tcontext.firstTokenAmountMin = firstTokenAmountMin;\\n\\t\\tcontext.secondTokenAmountMin = secondTokenAmountMin;\\n\\t\\tcontext.firstTokenOptimalAmount = 0;\\n\\t\\tcontext.secondTokenOptimalAmount = 0;\\n\\t\\tcontext.liqAdded = 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0xb1e79d8a2221cb4c2d2baf13eaa4d4b8340fddfd6674c5fdef9c68a5b5db9e8d\",\"license\":\"MIT\"},\"contracts/pair/contexts/Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"../../common/modules/PausableModule.sol\\\";\\nimport \\\"../ConfigModule.sol\\\";\\n\\nstruct storagecache {\\n\\tState contractState;\\n\\taddress lpTokenId;\\n\\taddress firstTokenId;\\n\\taddress secondTokenId;\\n\\tuint256 firstTokenReserve;\\n\\tuint256 secondTokenReserve;\\n\\tuint256 lpTokenSupply;\\n}\\n\\nabstract contract SotrageCache is ConfigModule, PausableModule {\\n\\tstoragecache internal storageCache;\\n\\n\\tmodifier dropCache() {\\n\\t\\tstorageCache.contractState = state;\\n\\t\\tstorageCache.lpTokenId = lpTokenIdentifier;\\n\\t\\tstorageCache.firstTokenId = firstToken;\\n\\t\\tstorageCache.secondTokenId = secondToken;\\n\\t\\tstorageCache.firstTokenReserve = pairReserve[firstToken];\\n\\t\\tstorageCache.secondTokenReserve = pairReserve[secondToken];\\n\\t\\tstorageCache.lpTokenSupply = lpTokenSupply;\\n\\n\\t\\t_;\\n\\n\\t\\t// commit changes to storage for the mutable fields\\n\\t\\tpairReserve[firstToken] = storageCache.firstTokenReserve;\\n\\t\\tpairReserve[secondToken] = storageCache.secondTokenReserve;\\n\\t\\tlpTokenSupply = storageCache.lpTokenSupply;\\n\\n\\t\\tdelete storageCache;\\n\\t}\\n}\\n\",\"keccak256\":\"0x119e18634f7a83a49a609f5a459ceee1a0dcc4114bcc13a291f74737190a5f43\",\"license\":\"MIT\"},\"contracts/pair/contexts/OutputBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"./Base.sol\\\";\\nimport \\\"./RemoveLiquidity.sol\\\";\\nimport \\\"./AddLiquidity.sol\\\";\\n\\nimport \\\"../../common/libs/Types.sol\\\";\\nimport \\\"../pair_actions/CommonResultTypes.sol\\\";\\n\\nabstract contract OutputBuilderModule {\\n\\tfunction buildAddLiqOutputPayments(\\n\\t\\tstoragecache storage storageCache,\\n\\t\\tAddLiquidityContext memory addLiqContext\\n\\t) internal view returns (ERC20TokenPayment[] memory payments) {\\n\\t\\tpayments = new ERC20TokenPayment[](3);\\n\\n\\t\\tpayments[0] = (\\n\\t\\t\\tERC20TokenPayment(\\n\\t\\t\\t\\tstorageCache.firstTokenId,\\n\\t\\t\\t\\taddLiqContext.firstPayment.amount -\\n\\t\\t\\t\\t\\taddLiqContext.firstTokenOptimalAmount\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tpayments[1] = (\\n\\t\\t\\tERC20TokenPayment(\\n\\t\\t\\t\\tstorageCache.secondTokenId,\\n\\t\\t\\t\\taddLiqContext.secondPayment.amount -\\n\\t\\t\\t\\t\\taddLiqContext.secondTokenOptimalAmount\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction buildRemoveLiqOutputPayments(\\n\\t\\tstoragecache storage storageCache,\\n\\t\\tRemoveLiquidityContext memory removeLiqContext\\n\\t) internal view returns (ERC20TokenPayment[3] memory payments) {\\n\\t\\tpayments[0] = (\\n\\t\\t\\tERC20TokenPayment(\\n\\t\\t\\t\\tstorageCache.firstTokenId,\\n\\t\\t\\t\\tremoveLiqContext.firstTokenAmountRemoved\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tpayments[1] = (\\n\\t\\t\\tERC20TokenPayment(\\n\\t\\t\\t\\tstorageCache.secondTokenId,\\n\\t\\t\\t\\tremoveLiqContext.secondTokenAmountRemoved\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction buildAddLiqResults(\\n\\t\\tstoragecache storage storageCache,\\n\\t\\tAddLiquidityContext memory addLiqContext\\n\\t) internal view returns (AddLiquidityResultType memory) {\\n\\t\\treturn\\n\\t\\t\\tAddLiquidityResultType(\\n\\t\\t\\t\\tERC20TokenPayment(\\n\\t\\t\\t\\t\\tstorageCache.lpTokenId,\\n\\t\\t\\t\\t\\taddLiqContext.liqAdded\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tERC20TokenPayment(\\n\\t\\t\\t\\t\\tstorageCache.firstTokenId,\\n\\t\\t\\t\\t\\taddLiqContext.firstTokenOptimalAmount\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tERC20TokenPayment(\\n\\t\\t\\t\\t\\tstorageCache.secondTokenId,\\n\\t\\t\\t\\t\\taddLiqContext.secondTokenOptimalAmount\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x060c188a37d21abeff1155399d8c5ddb241d7967ab831cf709f6c677aeffd9d6\",\"license\":\"MIT\"},\"contracts/pair/contexts/RemoveLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nstruct RemoveLiquidityContext {\\n\\tuint256 lpTokenPaymentAmount;\\n\\tuint256 firstTokenAmountMin;\\n\\tuint256 secondTokenAmountMin;\\n\\tuint256 firstTokenAmountRemoved;\\n\\tuint256 secondTokenAmountRemoved;\\n}\\n\\nlibrary RemoveLiquidityContextUtil {\\n\\tfunction newContext(\\n\\t\\tuint256 lpTokenPaymentAmount,\\n\\t\\tuint256 firstTokenAmountMin,\\n\\t\\tuint256 secondTokenAmountMin\\n\\t) internal pure returns (RemoveLiquidityContext memory) {\\n\\t\\treturn\\n\\t\\t\\tRemoveLiquidityContext(\\n\\t\\t\\t\\tlpTokenPaymentAmount,\\n\\t\\t\\t\\tfirstTokenAmountMin,\\n\\t\\t\\t\\tsecondTokenAmountMin,\\n\\t\\t\\t\\t0,\\n\\t\\t\\t\\t0\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5dc814697c1e6dfd5bfe10b0ad3dfc38dc0910b1d5caf5b6b9b3d508cfd38f0b\",\"license\":\"MIT\"},\"contracts/pair/pair_actions/AddLiquidityModule.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"../Errors.sol\\\";\\nimport \\\"../ConfigModule.sol\\\";\\nimport \\\"../SafePrice.sol\\\";\\nimport \\\"../LiquidityPool.sol\\\";\\n\\nimport \\\"../contexts/Base.sol\\\";\\nimport \\\"../contexts/AddLiquidity.sol\\\";\\nimport \\\"../contexts/OutputBuilder.sol\\\";\\n\\nimport \\\"../../common/libs/Types.sol\\\";\\nimport \\\"../../common/libs/TokenPayments.sol\\\";\\nimport \\\"../../common/modules/PausableModule.sol\\\";\\n\\nimport \\\"./CommonMethods.sol\\\";\\nimport \\\"./CommonResultTypes.sol\\\";\\n\\nabstract contract AddLiquidityModule is\\n\\tConfigModule,\\n\\tPausableModule,\\n\\tCommonMethodsModule,\\n\\tSafePriceModule,\\n\\tSotrageCache,\\n\\tLiquidityPoolModule,\\n\\tOutputBuilderModule\\n{\\n\\tstruct AddLiquidityEvent {\\n\\t\\taddress caller;\\n\\t\\taddress firstTokenId;\\n\\t\\tuint256 firstTokenAmount;\\n\\t\\taddress secondTokenId;\\n\\t\\tuint256 secondTokenAmount;\\n\\t\\taddress lpTokenId;\\n\\t\\tuint256 lpTokenAmount;\\n\\t\\tuint256 lpSupply;\\n\\t\\tuint256 firstTokenReserves;\\n\\t\\tuint256 secondTokenReserves;\\n\\t\\tuint block;\\n\\t\\tuint timestamp;\\n\\t}\\n\\n\\tevent AddLiquidity(\\n\\t\\taddress indexed firstToken,\\n\\t\\taddress indexed secondToken,\\n\\t\\taddress indexed caller,\\n\\t\\tAddLiquidityEvent addLiquidityEvent\\n\\t);\\n\\n\\tfunction _checkReceivedPayment(\\n\\t\\tERC20TokenPayment memory payment,\\n\\t\\taddress token\\n\\t) internal pure {\\n\\t\\tif (payment.tokenAddress != token || payment.amount <= 0) {\\n\\t\\t\\trevert ErrorBadPaymentTokens();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addLiquidity(\\n\\t\\tuint256 firstTokenAmountMin,\\n\\t\\tuint256 secondTokenAmountMin,\\n\\t\\tERC20TokenPayment memory firstPayment,\\n\\t\\tERC20TokenPayment memory secondPayment\\n\\t) external dropCache returns (AddLiquidityResultType memory output) {\\n\\t\\tif (firstTokenAmountMin <= 0 || secondTokenAmountMin <= 0) {\\n\\t\\t\\trevert ErrorInvalidArgs();\\n\\t\\t}\\n\\n\\t\\taddress caller = msg.sender;\\n\\n\\t\\t// This looks like it is redundant, but the pattern is okay to prevent assumption of\\n\\t\\t// receipt of payment when there is none\\n\\t\\t(\\n\\t\\t\\tERC20TokenPayment memory firstReceivedPayment,\\n\\t\\t\\tERC20TokenPayment memory secondReceivedPayment\\n\\t\\t) = TokenPayments.receive2(\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tcaller,\\n\\t\\t\\t\\tfirstPayment,\\n\\t\\t\\t\\tsecondPayment\\n\\t\\t\\t);\\n\\t\\t_checkReceivedPayment(firstReceivedPayment, storageCache.firstTokenId);\\n\\t\\t_checkReceivedPayment(\\n\\t\\t\\tsecondReceivedPayment,\\n\\t\\t\\tstorageCache.secondTokenId\\n\\t\\t);\\n\\n\\t\\tif (!isStateActive(storageCache.contractState)) {\\n\\t\\t\\trevert ErrorNotActive();\\n\\t\\t}\\n\\n\\t\\t// TODO check that lpToken for this pair is valid\\n\\n\\t\\tif (\\n\\t\\t\\t!(initialLiquidityAdder == address(0) ||\\n\\t\\t\\t\\tstorageCache.lpTokenSupply != 0)\\n\\t\\t) {\\n\\t\\t\\trevert ErrorInitialLiquidityNotAdded();\\n\\t\\t}\\n\\n\\t\\tupdateSafePrice(\\n\\t\\t\\tstorageCache.firstTokenReserve,\\n\\t\\t\\tstorageCache.secondTokenReserve\\n\\t\\t);\\n\\n\\t\\tuint256 initialK = calculateKConstant(\\n\\t\\t\\tstorageCache.firstTokenReserve,\\n\\t\\t\\tstorageCache.secondTokenReserve\\n\\t\\t);\\n\\n\\t\\tAddLiquidityContext memory addLiqContext = setOptimalAmounts(\\n\\t\\t\\tAddLiquidityContextUtil.newContext(\\n\\t\\t\\t\\tfirstPayment,\\n\\t\\t\\t\\tsecondPayment,\\n\\t\\t\\t\\tfirstTokenAmountMin,\\n\\t\\t\\t\\tsecondTokenAmountMin\\n\\t\\t\\t),\\n\\t\\t\\tstorageCache\\n\\t\\t);\\n\\n\\t\\taddLiqContext.liqAdded = storageCache.lpTokenSupply == 0\\n\\t\\t\\t? poolAddInitialLiquidity(\\n\\t\\t\\t\\taddLiqContext.firstTokenOptimalAmount,\\n\\t\\t\\t\\taddLiqContext.secondTokenOptimalAmount,\\n\\t\\t\\t\\tstorageCache\\n\\t\\t\\t)\\n\\t\\t\\t: poolAddLiquidity(\\n\\t\\t\\t\\taddLiqContext.firstTokenOptimalAmount,\\n\\t\\t\\t\\taddLiqContext.secondTokenOptimalAmount,\\n\\t\\t\\t\\tstorageCache\\n\\t\\t\\t);\\n\\n\\t\\tuint256 newK = calculateKConstant(\\n\\t\\t\\tstorageCache.firstTokenReserve,\\n\\t\\t\\tstorageCache.secondTokenReserve\\n\\t\\t);\\n\\t\\tif (initialK > newK) {\\n\\t\\t\\trevert ErrorKInvariantFailed();\\n\\t\\t}\\n\\n\\t\\t// localMint -> Mint liquidity to contract\\n\\t\\t_mint(address(this), addLiqContext.liqAdded);\\n\\n\\t\\tERC20TokenPayment memory lpPayment = ERC20TokenPayment(\\n\\t\\t\\tstorageCache.lpTokenId,\\n\\t\\t\\taddLiqContext.liqAdded\\n\\t\\t);\\n\\n\\t\\tERC20TokenPayment[] memory outputPayments = buildAddLiqOutputPayments(\\n\\t\\t\\tstorageCache,\\n\\t\\t\\taddLiqContext\\n\\t\\t);\\n\\t\\toutputPayments[outputPayments.length - 1] = lpPayment;\\n\\n\\t\\tTokenPayments.sendMultipleTokensIfNotZero(caller, outputPayments);\\n\\n\\t\\toutput = buildAddLiqResults(storageCache, addLiqContext);\\n\\n\\t\\temitAddiquidityEvent(storageCache, addLiqContext);\\n\\t}\\n\\n\\tfunction emitAddiquidityEvent(\\n\\t\\tstoragecache storage storageCache,\\n\\t\\tAddLiquidityContext memory context\\n\\t) internal {\\n\\t\\taddress caller = msg.sender;\\n\\n\\t\\temit AddLiquidity(\\n\\t\\t\\tstorageCache.firstTokenId,\\n\\t\\t\\tstorageCache.secondTokenId,\\n\\t\\t\\tcaller,\\n\\t\\t\\tAddLiquidityEvent({\\n\\t\\t\\t\\tcaller: caller,\\n\\t\\t\\t\\tfirstTokenId: storageCache.firstTokenId,\\n\\t\\t\\t\\tfirstTokenAmount: context.firstTokenOptimalAmount,\\n\\t\\t\\t\\tsecondTokenId: storageCache.secondTokenId,\\n\\t\\t\\t\\tsecondTokenAmount: context.secondTokenOptimalAmount,\\n\\t\\t\\t\\tlpTokenId: storageCache.lpTokenId,\\n\\t\\t\\t\\tlpTokenAmount: context.liqAdded,\\n\\t\\t\\t\\tlpSupply: storageCache.lpTokenSupply,\\n\\t\\t\\t\\tfirstTokenReserves: storageCache.firstTokenReserve,\\n\\t\\t\\t\\tsecondTokenReserves: storageCache.secondTokenReserve,\\n\\t\\t\\t\\tblock: block.number,\\n\\t\\t\\t\\ttimestamp: block.timestamp\\n\\t\\t\\t})\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xfb33e818e2e1d2620972183cbc2de372a0896d6847b9355ede7c4d5ecdc33e27\",\"license\":\"MIT\"},\"contracts/pair/pair_actions/CommonMethods.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"../../common/modules/PausableModule.sol\\\";\\n\\nabstract contract CommonMethodsModule {\\n\\tfunction isStateActive(State state) internal pure returns (bool isActive) {\\n\\t\\tisActive = state == State.Active || state == State.PartialActive;\\n\\t}\\n\\n\\tfunction canSwap(State state) internal pure returns (bool isSwapable) {\\n\\t\\tisSwapable = state == State.Active;\\n\\t}\\n}\\n\",\"keccak256\":\"0xfc9d731140c617d7fd2edbce837893f55b7b68eddaa81893af3e9a08d6037d1f\",\"license\":\"MIT\"},\"contracts/pair/pair_actions/CommonResultTypes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"../../common/libs/Types.sol\\\";\\n\\nstruct AddLiquidityResultType {\\n\\tERC20TokenPayment lpPayment;\\n\\tERC20TokenPayment firstTokenPayment;\\n\\tERC20TokenPayment secondTokenPayment;\\n}\\n\",\"keccak256\":\"0x737454e028a96e5fcf96d36b8035bc28f478b30565a24a95a1901532beaf9747\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ErrorSafePriceCurrentIndex(uint256,uint256)": [
        {
          "params": {
            "currentIndex": "the current index",
            "maxIndex": "the maximum possible index"
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ErrorFirstLiquidity()": [
        {
          "notice": "First tokens needs to be greater than minimum liquidity"
        }
      ],
      "ErrorInitialLiquidityNotAdded()": [
        {
          "notice": "Initial liquidity was not added"
        }
      ],
      "ErrorInsufficientFirstToken()": [
        {
          "notice": "Insufficient first token computed amount"
        }
      ],
      "ErrorInsufficientLiquidity()": [
        {
          "notice": "Insufficient liquidity minted"
        }
      ],
      "ErrorInsufficientSecondToken()": [
        {
          "notice": "Insufficient second token computed amount"
        }
      ],
      "ErrorKInvariantFailed()": [
        {
          "notice": "K invariant failed"
        }
      ],
      "ErrorOptimalGreaterThanPaid()": [
        {
          "notice": "Optimal amount greater than desired amount"
        }
      ],
      "ErrorPermissionDenied()": [
        {
          "notice": "Permission denied"
        }
      ],
      "ErrorSafePriceCurrentIndex(uint256,uint256)": [
        {
          "notice": "The current safe price index of `currentIndex` is greater than the maximum number of observations `maxIndex`"
        }
      ],
      "IndexOutOfRangeErrMsg()": [
        {
          "notice": "index out of range"
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2682,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "firstToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2684,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "secondToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2686,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "totalFeePercent",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2688,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "specialFeePercent",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2690,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "routerAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2692,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "initialLiquidityAdder",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2696,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "pairReserve",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2698,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "lpTokenSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2700,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "lpTokenIdentifier",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 24,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "_roles",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2535,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "state",
        "offset": 0,
        "slot": "10",
        "type": "t_enum(State)2530"
      },
      {
        "astId": 2506,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "bannedAddresses",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(whitelist)2482_storage"
      },
      {
        "astId": 3369,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "safePriceCurrentIndex",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3372,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "priceObservations",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(priceObsvec)3229_storage"
      },
      {
        "astId": 3650,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "storageCache",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(storagecache)3643_storage"
      },
      {
        "astId": 407,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "_balances",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 413,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "_allowances",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 415,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 417,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "_name",
        "offset": 0,
        "slot": "25",
        "type": "t_string_storage"
      },
      {
        "astId": 419,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "_symbol",
        "offset": 0,
        "slot": "26",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(State)2530": {
        "encoding": "inplace",
        "label": "enum State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(IndexValue)3218_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IndexValue)",
        "numberOfBytes": "32",
        "value": "t_struct(IndexValue)3218_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(IndexValue)3218_storage": {
        "encoding": "inplace",
        "label": "struct IndexValue",
        "members": [
          {
            "astId": 3214,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "keyIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3217,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(PriceObservation)3212_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PriceObservation)3212_storage": {
        "encoding": "inplace",
        "label": "struct PriceObservation",
        "members": [
          {
            "astId": 3205,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "firstTokenReserveAccumulated",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3207,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "secondTokenReserveAccumulated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3209,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "weightAccumulated",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3211,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "recordingRound",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(priceObsvec)3229_storage": {
        "encoding": "inplace",
        "label": "struct priceObsvec",
        "members": [
          {
            "astId": 3223,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(IndexValue)3218_storage)"
          },
          {
            "astId": 3226,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "keys",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3228,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(storagecache)3643_storage": {
        "encoding": "inplace",
        "label": "struct storagecache",
        "members": [
          {
            "astId": 3630,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "contractState",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(State)2530"
          },
          {
            "astId": 3632,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "lpTokenId",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3634,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "firstTokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3636,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "secondTokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3638,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "firstTokenReserve",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3640,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "secondTokenReserve",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3642,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "lpTokenSupply",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(whitelist)2482_storage": {
        "encoding": "inplace",
        "label": "struct whitelist",
        "members": [
          {
            "astId": 2481,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "whitelist",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}