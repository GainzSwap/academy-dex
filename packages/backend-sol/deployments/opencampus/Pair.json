{
  "address": "0x327FB1F18359B530877be28486c87C325C369f73",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tradeToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "basePairAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrorKInvariantFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxIndex",
          "type": "uint256"
        }
      ],
      "name": "ErrorSafePriceCurrentIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOutOfRangeErrMsg",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "BalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liqAdded",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SellExecuted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC20TokenPayment",
          "name": "wholePayment",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liqAdded",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "completeSell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC20TokenPayment",
          "name": "payment",
          "type": "tuple"
        }
      ],
      "name": "receiveReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sales",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrerOfCaller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC20TokenPayment",
          "name": "inPayment",
          "type": "tuple"
        },
        {
          "internalType": "contract Pair",
          "name": "outPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slippage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFeePercent",
          "type": "uint256"
        }
      ],
      "name": "sell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFeePercent",
          "type": "uint256"
        }
      ],
      "name": "takeFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradeToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a9272c8906dfd4c509e5649a43960d4a8503230abb4b059a57454583dbc44a9",
  "receipt": {
    "to": null,
    "from": "0x8D0739d9D0d49aFCF8d101416cD2759Bf8922013",
    "contractAddress": "0x327FB1F18359B530877be28486c87C325C369f73",
    "transactionIndex": 1,
    "gasUsed": "19549574",
    "logsBloom": "0x000000000000000000000000000000000000000000000000008000000000000400000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000010000000000000000000000000000000000000a0000000000000000000800000000000000100000000000000000400000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x04c3a5350ed9e825540b672a545421a0a133a7f7871c3a24b5aa2915f940ccf0",
    "transactionHash": "0x4a9272c8906dfd4c509e5649a43960d4a8503230abb4b059a57454583dbc44a9",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 14966,
        "transactionHash": "0x4a9272c8906dfd4c509e5649a43960d4a8503230abb4b059a57454583dbc44a9",
        "address": "0x327FB1F18359B530877be28486c87C325C369f73",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d0739d9d0d49afcf8d101416cd2759bf8922013"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x04c3a5350ed9e825540b672a545421a0a133a7f7871c3a24b5aa2915f940ccf0"
      }
    ],
    "blockNumber": 14966,
    "cumulativeGasUsed": "19549574",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4590660F6f9bec56Ece349EB5F8cA7e0acdd1fe1",
    "0x2cCf5488cbAa7Bfd8Eff7b74Bb59c98b3F881586"
  ],
  "numDeployments": 2,
  "solcInputHash": "c1d9408b7c80247d8d3f8c7cfcd2ce01",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"basePairAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrorKInvariantFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxIndex\",\"type\":\"uint256\"}],\"name\":\"ErrorSafePriceCurrentIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfRangeErrMsg\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqAdded\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SellExecuted\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20TokenPayment\",\"name\":\"wholePayment\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liqAdded\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"completeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20TokenPayment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"receiveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrerOfCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20TokenPayment\",\"name\":\"inPayment\",\"type\":\"tuple\"},{\"internalType\":\"contract Pair\",\"name\":\"outPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeePercent\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeePercent\",\"type\":\"uint256\"}],\"name\":\"takeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract manages a trading pair in the DEX, handling liquidity, trading, and fee mechanisms.\",\"errors\":{\"ErrorSafePriceCurrentIndex(uint256,uint256)\":[{\"params\":{\"currentIndex\":\"the current index\",\"maxIndex\":\"the maximum possible index\"}}]},\"kind\":\"dev\",\"methods\":{\"addLiquidity((address,uint256),address)\":{\"params\":{\"from\":\"Address from which liquidity is added.\",\"wholePayment\":\"Details of the payment for adding liquidity.\"},\"returns\":{\"liqAdded\":\"Amount of liquidity added.\"}},\"completeSell(address,uint256)\":{\"params\":{\"amount\":\"Amount to be transferred.\",\"to\":\"Address to which the amount is transferred.\"}},\"constructor\":{\"details\":\"Constructor for initializing the Pair contract.\",\"params\":{\"basePairAddr\":\"Address of the base pair.\",\"tradeToken_\":\"Address of the trade token.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reserve()\":{\"returns\":{\"_0\":\"The reserve amount.\"}},\"sell(address,address,(address,uint256),address,uint256,uint256)\":{\"params\":{\"caller\":\"Address of the caller.\",\"inPayment\":\"Details of the payment for the sell order.\",\"outPair\":\"Address of the pair to sell to.\",\"referrerOfCaller\":\"Address of the referrer of the caller.\",\"slippage\":\"Maximum slippage allowed.\",\"totalFeePercent\":\"Total fee percentage.\"}},\"takeFees(address,uint256,uint256)\":{\"details\":\"This must be called on the out pair side\",\"params\":{\"amount\":\"amount to compute and deduct fee from\",\"referrer\":\"the user address to receive part of fee\",\"totalFeePercent\":\"the fee percentage\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Pair\",\"version\":1},\"userdoc\":{\"errors\":{\"ErrorKInvariantFailed()\":[{\"notice\":\"K invariant failed\"}],\"ErrorSafePriceCurrentIndex(uint256,uint256)\":[{\"notice\":\"The current safe price index of `currentIndex` is greater than the maximum number of observations `maxIndex`\"}],\"IndexOutOfRangeErrMsg()\":[{\"notice\":\"index out of range\"}]},\"kind\":\"user\",\"methods\":{\"addLiquidity((address,uint256),address)\":{\"notice\":\"Adds liquidity to the pair.\"},\"completeSell(address,uint256)\":{\"notice\":\"Completes a sell order on the outPair side.\"},\"reserve()\":{\"notice\":\"Returns the total amount of tradeToken that can be bought from this Pair.\"},\"sell(address,address,(address,uint256),address,uint256,uint256)\":{\"notice\":\"Executes a sell order.\"},\"takeFees(address,uint256,uint256)\":{\"notice\":\"Takes fee and update balances of beneficiaries\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pair/Pair.sol\":\"Pair\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/common/libs/Fee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"./Math.sol\\\";\\nimport \\\"./Number.sol\\\";\\n\\nlibrary FeeUtil {\\n\\tusing Number for uint256;\\n\\n\\tuint256 constant MAX_PERCENT = 100_00;\\n\\n\\tstruct Values {\\n\\t\\tuint256 toBurnValue;\\n\\t\\tuint256 referrerValue;\\n\\t\\tuint256 liqProvidersValue;\\n\\t}\\n\\n\\t/// One to three decimal places\\n\\tuint64 constant RATIO_BALANCE_FACTOR = 1_000;\\n\\n\\tuint64 constant MIN_FEE = 10;\\n\\tuint64 constant FIRST_FEE = 30;\\n\\tuint64 constant SECOND_FEE = 3_00;\\n\\tuint64 constant THIRD_FEE = uint64(MAX_PERCENT);\\n\\n\\tfunction feePercent(\\n\\t\\tuint256 pairTotalSales,\\n\\t\\tuint256 totalLiq,\\n\\t\\tuint64 pairsCount\\n\\t) internal pure returns (uint256 percent) {\\n\\t\\tuint64 ratio = _pairRatio(pairTotalSales, totalLiq, pairsCount);\\n\\n\\t\\t(\\n\\t\\t\\tuint64 minIn,\\n\\t\\t\\tuint64 maxIn,\\n\\t\\t\\tuint64 minOut,\\n\\t\\t\\tuint64 maxOut\\n\\t\\t) = _getInterValues(ratio, pairsCount);\\n\\n\\t\\tpercent = MathUtil.linearInterpolation(\\n\\t\\t\\tminIn,\\n\\t\\t\\tmaxIn,\\n\\t\\t\\tratio,\\n\\t\\t\\tminOut,\\n\\t\\t\\tmaxOut\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _getInterValues(\\n\\t\\tuint256 ratio,\\n\\t\\tuint64 pairsCount\\n\\t)\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns (uint64 minIn, uint64 maxIn, uint64 minOut, uint64 maxOut)\\n\\t{\\n\\t\\tminIn = 1;\\n\\t\\tmaxIn = RATIO_BALANCE_FACTOR;\\n\\t\\tminOut = MIN_FEE;\\n\\t\\tmaxOut = FIRST_FEE;\\n\\n\\t\\tuint64 MAX_RATIO_BALANCE_FACTOR = _maxRatioBalanceFactor(pairsCount);\\n\\n\\t\\tuint64 count = 0;\\n\\t\\twhile (ratio > maxIn) {\\n\\t\\t\\tminIn = maxIn + 1;\\n\\t\\t\\tminOut = maxOut + 1;\\n\\n\\t\\t\\tif (count == 0) {\\n\\t\\t\\t\\tmaxIn = MAX_RATIO_BALANCE_FACTOR / 5;\\n\\t\\t\\t\\tmaxOut = SECOND_FEE;\\n\\t\\t\\t} else if (count == 1) {\\n\\t\\t\\t\\tmaxIn = MAX_RATIO_BALANCE_FACTOR;\\n\\t\\t\\t\\tmaxOut = THIRD_FEE;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\n\\t\\t\\t\\t\\t\\\"Fee._getInterValues: max call depth for interpolation values\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _maxRatioBalanceFactor(\\n\\t\\tuint64 pairsCount\\n\\t) private pure returns (uint64 max) {\\n\\t\\tmax = pairsCount * RATIO_BALANCE_FACTOR;\\n\\t}\\n\\n\\tfunction _pairRatio(\\n\\t\\tuint256 pairTotalSales,\\n\\t\\tuint256 totalLiq,\\n\\t\\tuint64 pairsCount\\n\\t) private pure returns (uint64 ratio) {\\n\\t\\tuint256 value = (pairTotalSales * RATIO_BALANCE_FACTOR) /\\n\\t\\t\\t_liqRatio(totalLiq, pairsCount);\\n\\t\\tratio = value.clamp(1, _maxRatioBalanceFactor(pairsCount));\\n\\t}\\n\\n\\tfunction _liqRatio(\\n\\t\\tuint256 sales,\\n\\t\\tuint64 pairsCount\\n\\t) private pure returns (uint256 gRatio) {\\n\\t\\trequire(pairsCount > 0, \\\"FeeUtil: no available pairs\\\");\\n\\n\\t\\tgRatio = sales / pairsCount;\\n\\t\\tif (gRatio <= 1) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Computes the total fee shares.\\n\\t * @param self The fee shares struct.\\n\\t * @return The total fee value.\\n\\t */\\n\\tfunction total(Values memory self) internal pure returns (uint256) {\\n\\t\\treturn self.toBurnValue + self.referrerValue + self.liqProvidersValue;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Splits the fee into shares for burning, referrer, and liquidity providers.\\n\\t * @param fee The total fee amount.\\n\\t * @return A Values struct with the split values.\\n\\t */\\n\\tfunction splitFee(uint256 fee) internal pure returns (Values memory) {\\n\\t\\tuint256 toBurnValue = (fee * 5_00) / MAX_PERCENT; // 5%\\n\\t\\tuint256 referrerValue = (fee * 2_00) / MAX_PERCENT; // 2%\\n\\t\\tuint256 liqProvidersValue = fee - toBurnValue - referrerValue;\\n\\n\\t\\treturn Values(toBurnValue, referrerValue, liqProvidersValue);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0547ddcdc2b23ece4608355593c2364d970405c83b4fe5a6a2be93d381a3a2d5\",\"license\":\"MIT\"},\"contracts/common/libs/Math.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nlibrary MathUtil {\\n\\t/// out = (minOut * (maxIn - currentIn) + maxOut * (currentIn - minIn)) / (maxIn - minIn)\\n\\t/// https://en.wikipedia.org/wiki/LinearInterpolation\\n\\tfunction linearInterpolation(\\n\\t\\tuint256 minIn,\\n\\t\\tuint256 maxIn,\\n\\t\\tuint256 currentIn,\\n\\t\\tuint256 minOut,\\n\\t\\tuint256 maxOut\\n\\t) internal pure returns (uint256) {\\n\\t\\tif (currentIn < minIn || currentIn > maxIn) {\\n\\t\\t\\trevert(\\\"Math.linearInterpolation: Invalid values\\\");\\n\\t\\t}\\n\\n\\t\\tuint256 minOutWeighted = minOut * (maxIn - currentIn);\\n\\t\\tuint256 maxOutWeighted = maxOut * (currentIn - minIn);\\n\\t\\tuint256 inDiff = maxIn - minIn;\\n\\n\\t\\treturn (minOutWeighted + maxOutWeighted) / inDiff;\\n\\t}\\n}\\n\",\"keccak256\":\"0xb2ad75652715c9d91ac8dd03bcfcfc89a738799b6f1b54c898e0b2b7db34bfd4\",\"license\":\"MIT\"},\"contracts/common/libs/Number.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nlibrary Number {\\n\\t/// Restrict a value to a certain interval (Inspired by the `clamp` method in Rust number types).\\n\\t///\\n\\t/// Returns `max` if `self` is greater than `max`, and `min` if `self` is\\n\\t/// less than `min`. Otherwise this returns `self`.\\n\\t///\\n\\t/// # Panics\\n\\t///\\n\\t/// Panics if `min > max`.\\n\\t///\\n\\tfunction clamp(\\n\\t\\tuint256 self,\\n\\t\\tuint64 min,\\n\\t\\tuint64 max\\n\\t) internal pure returns (uint64 clamped) {\\n\\t\\tassert(min <= max);\\n\\t\\tif (self < min) {\\n\\t\\t\\tclamped = min;\\n\\t\\t} else if (self > max) {\\n\\t\\t\\tclamped = max;\\n\\t\\t} else {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tclamped := self\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x63499f175b29aa7650bb84b3e78a325dfb31c74fdf57bd70ca9b19826412a77b\",\"license\":\"MIT\"},\"contracts/common/libs/Slippage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nlibrary Slippage {\\n\\tuint256 constant MAX_PERCENTAGE = 100_00;\\n\\n\\tfunction _checkSlippage(uint256 slippage) private pure returns (uint256) {\\n\\t\\tif (slippage < 1 || slippage > MAX_PERCENTAGE) {\\n\\t\\t\\trevert(\\\"Invalid slippage value\\\");\\n\\t\\t}\\n\\n\\t\\treturn MAX_PERCENTAGE - slippage;\\n\\t}\\n\\n\\tfunction compute(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 slippage\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn (amount * _checkSlippage(slippage)) / MAX_PERCENTAGE;\\n\\t}\\n}\\n\",\"keccak256\":\"0xed51528f1cd6a5a4da6181ce57ee9764cb22adcf041b3e26fff58e8fa69da69d\",\"license\":\"MIT\"},\"contracts/common/libs/TokenPayments.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport \\\"./Types.sol\\\";\\n\\nlibrary TokenPayments {\\n\\tfunction receiveERC20(ERC20TokenPayment calldata payment) internal {\\n\\t\\tpayment.token.transferFrom(msg.sender, address(this), payment.amount);\\n\\t}\\n\\n\\tfunction receiveERC20(\\n\\t\\tERC20TokenPayment calldata payment,\\n\\t\\taddress from\\n\\t) internal {\\n\\t\\tpayment.token.transferFrom(from, address(this), payment.amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0xb42bfdac544f0c977565961c63f770be234c4c0e504f8dc70325f326a5d6159d\",\"license\":\"MIT\"},\"contracts/common/libs/Types.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nstruct ERC20TokenPayment {\\n\\tIERC20 token;\\n\\tuint256 amount;\\n}\\n\",\"keccak256\":\"0x0c7417b2b5abf993747714d55895560f5a13fd3008350394bee2b7e24685bb8f\",\"license\":\"MIT\"},\"contracts/pair/Amm.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nlibrary Amm {\\n\\tfunction calculateKConstant(\\n\\t\\tuint256 firstTokenAmt,\\n\\t\\tuint256 secondTokenAmt\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn firstTokenAmt * secondTokenAmt;\\n\\t}\\n\\n\\tfunction quote(\\n\\t\\tuint256 firstTokenAmount,\\n\\t\\tuint256 firstTokenReserve,\\n\\t\\tuint256 secondTokenReserve\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn (firstTokenAmount * secondTokenReserve) / firstTokenReserve;\\n\\t}\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 numerator = amountIn * reserveOut;\\n\\t\\tuint256 denominator = reserveIn + amountIn;\\n\\n\\t\\treturn numerator / denominator;\\n\\t}\\n}\\n\",\"keccak256\":\"0x433ba58f1fc1058436770aa73e6bf312ce7f94ec62aaf850b2fa59c167b50f04\",\"license\":\"MIT\"},\"contracts/pair/Errors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nerror ErrorInvalidArgs();\\nerror ErrorBadPaymentTokens();\\nerror ErrorNotActive();\\n\\n/// Initial liquidity was not added\\nerror ErrorInitialLiquidityNotAdded();\\n\\n/// The current safe price index of `currentIndex` is greater than the maximum number of observations `maxIndex`\\n/// @param currentIndex the current index\\n/// @param maxIndex the maximum possible index\\nerror ErrorSafePriceCurrentIndex(uint currentIndex, uint maxIndex);\\n\\n/// index out of range\\nerror IndexOutOfRangeErrMsg();\\n\\n/// K invariant failed\\nerror ErrorKInvariantFailed();\\n\\n/// Insufficient liquidity minted\\nerror ErrorInsufficientLiquidity();\\n\\n/// First tokens needs to be greater than minimum liquidity\\nerror ErrorFirstLiquidity();\\n\\n/// Optimal amount greater than desired amount\\nerror ErrorOptimalGreaterThanPaid();\\n\\n/// Insufficient first token computed amount\\nerror ErrorInsufficientFirstToken();\\n\\n/// Insufficient second token computed amount\\nerror ErrorInsufficientSecondToken();\\n\\n/// Permission denied\\nerror ErrorPermissionDenied();\\n\\n/// Not enough LP token supply\\nerror ErrorNotEnoughLp();\\n/// Insufficient liquidity burned\\nerror ErrorInsufficientLiquidityBurned();\\n/// Slippage amount does not match\\nerror ErrorSlippageOnRemove();\\n/// Not enough reserve\\nerror ErrorNotEnoughReserve();\\n///LP token not issued\\nerror ErrorLpTokenNotIssued();\\n\",\"keccak256\":\"0x65034ef9f2bb23916d82295a17c4b90f98ac02cfa918dac5a286e24035948c2c\",\"license\":\"MIT\"},\"contracts/pair/Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\ninterface IPair {\\n\\tfunction reserve() external view returns (uint256);\\n\\n\\tfunction completeSell(address to, uint256 amount) external;\\n}\\n\\ninterface IBasePair is IPair {\\n\\tfunction mintRewards(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8c3a2eb9b2aa68f76bfa80fef4ff8528cd46f6c9d43130309354a7ade0f66e3a\",\"license\":\"MIT\"},\"contracts/pair/Knowable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract KnowablePair is Ownable {\\n\\tmodifier isKnownPair() {\\n\\t\\trequire(owner() == Ownable(msg.sender).owner(), \\\"not allowed\\\");\\n\\t\\t_;\\n\\t}\\n}\\n\",\"keccak256\":\"0x89d272dd396a19483c3afc96aa7489737a38e43bcf5d18099ca984438d54f2fc\",\"license\":\"MIT\"},\"contracts/pair/Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../common/libs/Fee.sol\\\";\\nimport \\\"../common/libs/Slippage.sol\\\";\\nimport \\\"../common/libs/TokenPayments.sol\\\";\\n\\nimport \\\"./contexts/AddLiquidity.sol\\\";\\n\\nimport \\\"./Amm.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./SafePrice.sol\\\";\\nimport \\\"./Interface.sol\\\";\\nimport \\\"./Knowable.sol\\\";\\n\\n/**\\n * @title Pair\\n * @dev This contract manages a trading pair in the DEX, handling liquidity, trading, and fee mechanisms.\\n */\\ncontract Pair is IPair, Ownable, KnowablePair {\\n\\tusing SafePriceUtil for SafePriceData;\\n\\tusing FeeUtil for FeeUtil.Values;\\n\\n\\tERC20 public immutable tradeToken;\\n\\tuint256 public deposits;\\n\\tuint256 public sales;\\n\\n\\tuint256 public rewards;\\n\\tuint256 public lpSupply;\\n\\tIBasePair immutable basePair;\\n\\n\\tmapping(address => SafePriceData) safePrices;\\n\\n\\tuint256 constant MIN_MINT_DEPOSIT = 4_000;\\n\\n\\tevent LiquidityAdded(\\n\\t\\taddress indexed from,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 liqAdded\\n\\t);\\n\\tevent SellExecuted(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 fee\\n\\t);\\n\\tevent RewardReceived(address indexed from, uint256 amount);\\n\\tevent BalanceUpdated(address indexed user, uint256 balance);\\n\\n\\t/**\\n\\t * @dev Constructor for initializing the Pair contract.\\n\\t * @param tradeToken_ Address of the trade token.\\n\\t * @param basePairAddr Address of the base pair.\\n\\t */\\n\\tconstructor(address tradeToken_, address basePairAddr) {\\n\\t\\trequire(tradeToken_ != address(0), \\\"Pair: Invalid trade token address\\\");\\n\\t\\trequire(basePairAddr != address(0), \\\"Pair: Invalid base pair address\\\");\\n\\n\\t\\ttradeToken = ERC20(tradeToken_);\\n\\t\\trequire(\\n\\t\\t\\tbytes(tradeToken.symbol()).length > 0,\\n\\t\\t\\t\\\"Pair: Invalid trade token\\\"\\n\\t\\t);\\n\\n\\t\\tbasePair = IBasePair(basePairAddr);\\n\\t\\t// TODO Write checks to ensure that base pair trade token is valid ERC20 token\\n\\t\\t// require(\\n\\t\\t// \\tbytes(ERC20(Pair(basePairAddr).tradeToken()).symbol()).length > 0,\\n\\t\\t// \\t\\\"Pair: Invalid base pair contract\\\"\\n\\t\\t// );\\n\\t}\\n\\n\\tmodifier onlyBasePair() {\\n\\t\\trequire(msg.sender == address(basePair), \\\"not allowed\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to check and receive a payment.\\n\\t * @param payment Payment details.\\n\\t * @param from Address from which payment is received.\\n\\t */\\n\\tfunction _checkAndReceivePayment(\\n\\t\\tERC20TokenPayment calldata payment,\\n\\t\\taddress from\\n\\t) internal {\\n\\t\\t_checkAndReceivePayment(payment, from, MIN_MINT_DEPOSIT);\\n\\t}\\n\\n\\tfunction _checkAndReceivePayment(\\n\\t\\tERC20TokenPayment calldata payment,\\n\\t\\taddress from,\\n\\t\\tuint256 min\\n\\t) internal {\\n\\t\\tif (payment.token != tradeToken || payment.amount < min) {\\n\\t\\t\\trevert(\\\"Pair: Bad received payment\\\");\\n\\t\\t}\\n\\n\\t\\tTokenPayments.receiveERC20(payment, from);\\n\\t}\\n\\n\\tfunction _getReserves()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256 paymentTokenReserve, uint256 baseTokenReserve)\\n\\t{\\n\\t\\treturn (reserve(), basePair.reserve());\\n\\t}\\n\\n\\tfunction _getLiqAdded(\\n\\t\\tERC20TokenPayment calldata payment\\n\\t) internal view returns (uint256) {\\n\\t\\t(\\n\\t\\t\\tuint256 paymentTokenReserve,\\n\\t\\t\\tuint256 baseTokenReserve\\n\\t\\t) = _getReserves();\\n\\n\\t\\t// In case of initial liquidity\\n\\t\\tpaymentTokenReserve = paymentTokenReserve <= 0\\n\\t\\t\\t? payment.amount\\n\\t\\t\\t: paymentTokenReserve;\\n\\n\\t\\treturn Amm.quote(payment.amount, paymentTokenReserve, baseTokenReserve);\\n\\t}\\n\\n\\tfunction _takeFromReserve(uint256 amount) internal returns (uint256 taken) {\\n\\t\\tif (sales >= amount) {\\n\\t\\t\\tsales -= amount;\\n\\t\\t\\treturn amount;\\n\\t\\t}\\n\\n\\t\\tif ((deposits + sales) >= amount) {\\n\\t\\t\\ttaken = amount;\\n\\t\\t\\tdeposits -= taken - sales;\\n\\t\\t\\tsales = 0;\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"Amount to be taken is too large\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _completeSell(\\n\\t\\tERC20TokenPayment memory inPayment,\\n\\t\\taddress from,\\n\\t\\tIPair outPair,\\n\\t\\tuint256 outAmount\\n\\t) internal virtual {\\n\\t\\tsales += inPayment.amount;\\n\\t\\toutPair.completeSell(from, outAmount);\\n\\t\\temit BalanceUpdated(from, tradeToken.balanceOf(from));\\n\\t\\temit BalanceUpdated(address(this), tradeToken.balanceOf(address(this)));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Takes fee and update balances of beneficiaries\\n\\t * @dev This must be called on the out pair side\\n\\t * @param referrer the user address to receive part of fee\\n\\t * @param amount amount to compute and deduct fee from\\n\\t * @param totalFeePercent the fee percentage\\n\\t */\\n\\tfunction takeFees(\\n\\t\\taddress referrer,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 totalFeePercent\\n\\t) external isKnownPair returns (uint256 amountOut) {\\n\\t\\tuint256 fee = (totalFeePercent * amount) / FeeUtil.MAX_PERCENT;\\n\\n\\t\\tamountOut = amount - fee;\\n\\n\\t\\tFeeUtil.Values memory values = FeeUtil.splitFee(fee);\\n\\n\\t\\t// Give liqProviders value\\n\\t\\tdeposits += _takeFromReserve(values.liqProvidersValue);\\n\\n\\t\\tuint256 toBurn = values.toBurnValue;\\n\\t\\tif (referrer != address(0) && values.referrerValue > 0) {\\n\\t\\t\\ttradeToken.transfer(\\n\\t\\t\\t\\treferrer,\\n\\t\\t\\t\\t_takeFromReserve(values.referrerValue)\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\ttoBurn += values.referrerValue;\\n\\t\\t}\\n\\n\\t\\t// Increasing sales genrally implies the `toBurn`\\n\\t\\t// is available for ecosystem wide usage\\n\\t\\tsales += _takeFromReserve(toBurn);\\n\\t}\\n\\n\\tfunction _executeSell(\\n\\t\\tERC20TokenPayment memory inPayment,\\n\\t\\taddress from,\\n\\t\\taddress referrer,\\n\\t\\tPair outPair,\\n\\t\\tuint256 slippage,\\n\\t\\tuint256 totalFeePercent\\n\\t) private {\\n\\t\\tuint256 inTokenReserve = reserve();\\n\\t\\tuint256 outTokenReserve = outPair.reserve();\\n\\n\\t\\tuint256 amountOutMin = Amm.quote(\\n\\t\\t\\tSlippage.compute(inPayment.amount, slippage),\\n\\t\\t\\tinTokenReserve,\\n\\t\\t\\toutTokenReserve\\n\\t\\t);\\n\\t\\trequire(outTokenReserve > amountOutMin, \\\"Pair: not enough reserve\\\");\\n\\n\\t\\tsafePrices[address(outPair)].updateSafePrice(\\n\\t\\t\\tinTokenReserve,\\n\\t\\t\\toutTokenReserve\\n\\t\\t);\\n\\n\\t\\tuint256 initialK = Amm.calculateKConstant(\\n\\t\\t\\tinTokenReserve,\\n\\t\\t\\toutTokenReserve\\n\\t\\t);\\n\\n\\t\\tuint256 amountOutOptimal = Amm.getAmountOut(\\n\\t\\t\\tinPayment.amount,\\n\\t\\t\\tinTokenReserve,\\n\\t\\t\\toutTokenReserve\\n\\t\\t);\\n\\n\\t\\tamountOutOptimal = outPair.takeFees(\\n\\t\\t\\treferrer,\\n\\t\\t\\tamountOutOptimal,\\n\\t\\t\\ttotalFeePercent\\n\\t\\t);\\n\\n\\t\\trequire(amountOutOptimal >= amountOutMin, \\\"Slippage Exceeded\\\");\\n\\t\\trequire(amountOutOptimal != 0, \\\"Pair: Zero out amount\\\");\\n\\n\\t\\t_completeSell(inPayment, from, outPair, amountOutOptimal);\\n\\n\\t\\tuint256 newK = Amm.calculateKConstant(reserve(), outPair.reserve());\\n\\t\\trequire(initialK <= newK, \\\"ERROR_K_INVARIANT_FAILED\\\");\\n\\n\\t\\temit SellExecuted(\\n\\t\\t\\tfrom,\\n\\t\\t\\taddress(outPair),\\n\\t\\t\\tinPayment.amount,\\n\\t\\t\\tamountOutOptimal,\\n\\t\\t\\ttotalFeePercent\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _addBaseLiq(ERC20TokenPayment calldata wholePayment) internal {\\n\\t\\tuint256 value = wholePayment.amount;\\n\\t\\t_insertLiqValues(AddLiquidityContext({ deposit: value, liq: value }));\\n\\t}\\n\\n\\tfunction _insertLiqValues(AddLiquidityContext memory context) internal {\\n\\t\\tdeposits += context.deposit;\\n\\t\\tlpSupply += context.liq;\\n\\t}\\n\\n\\tfunction _addPairLiq(ERC20TokenPayment calldata wholePayment) internal {\\n\\t\\tuint256 liqAdded = _getLiqAdded(wholePayment);\\n\\n\\t\\t(\\n\\t\\t\\tuint256 paymentTokenReserve,\\n\\t\\t\\tuint256 baseTokenReserve\\n\\t\\t) = _getReserves();\\n\\n\\t\\tSafePriceData storage safePrice = safePrices[address(basePair)];\\n\\t\\tsafePrice.updateSafePrice(paymentTokenReserve, baseTokenReserve);\\n\\n\\t\\tuint256 initialK = Amm.calculateKConstant(\\n\\t\\t\\tpaymentTokenReserve,\\n\\t\\t\\tbaseTokenReserve\\n\\t\\t);\\n\\n\\t\\t_insertLiqValues(\\n\\t\\t\\tAddLiquidityContext({ deposit: wholePayment.amount, liq: liqAdded })\\n\\t\\t);\\n\\n\\t\\t// Check K values\\n\\t\\t(\\n\\t\\t\\tuint256 newPaymentTokenReserve,\\n\\t\\t\\tuint256 newBaseTokenReserve\\n\\t\\t) = _getReserves();\\n\\t\\tuint256 newK = Amm.calculateKConstant(\\n\\t\\t\\tnewPaymentTokenReserve,\\n\\t\\t\\tnewBaseTokenReserve\\n\\t\\t);\\n\\t\\tif (initialK > newK) {\\n\\t\\t\\trevert ErrorKInvariantFailed();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Adds liquidity to the pair.\\n\\t * @param wholePayment Details of the payment for adding liquidity.\\n\\t * @param from Address from which liquidity is added.\\n\\t * @return liqAdded Amount of liquidity added.\\n\\t */\\n\\tfunction addLiquidity(\\n\\t\\tERC20TokenPayment calldata wholePayment,\\n\\t\\taddress from\\n\\t) external onlyOwner returns (uint256 liqAdded) {\\n\\t\\t_checkAndReceivePayment(wholePayment, from);\\n\\n\\t\\tbool isBasePair = address(this) == address(basePair);\\n\\n\\t\\tuint256 initalLp = lpSupply;\\n\\t\\tif (isBasePair) {\\n\\t\\t\\t_addBaseLiq(wholePayment);\\n\\t\\t} else {\\n\\t\\t\\t_addPairLiq(wholePayment);\\n\\t\\t}\\n\\n\\t\\trequire(lpSupply > initalLp, \\\"Pair: invalid liquidity addition\\\");\\n\\t\\tliqAdded = lpSupply - initalLp;\\n\\n\\t\\temit LiquidityAdded(from, wholePayment.amount, liqAdded);\\n\\t\\temit BalanceUpdated(from, tradeToken.balanceOf(from));\\n\\t\\temit BalanceUpdated(address(this), tradeToken.balanceOf(address(this)));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Executes a sell order.\\n\\t * @param caller Address of the caller.\\n\\t * @param referrerOfCaller Address of the referrer of the caller.\\n\\t * @param inPayment Details of the payment for the sell order.\\n\\t * @param outPair Address of the pair to sell to.\\n\\t * @param slippage Maximum slippage allowed.\\n\\t * @param totalFeePercent Total fee percentage.\\n\\t */\\n\\tfunction sell(\\n\\t\\taddress caller,\\n\\t\\taddress referrerOfCaller,\\n\\t\\tERC20TokenPayment calldata inPayment,\\n\\t\\tPair outPair,\\n\\t\\tuint256 slippage,\\n\\t\\tuint256 totalFeePercent\\n\\t) external onlyOwner {\\n\\t\\t_checkAndReceivePayment(inPayment, caller, 0);\\n\\t\\t_executeSell(\\n\\t\\t\\tinPayment,\\n\\t\\t\\tcaller,\\n\\t\\t\\treferrerOfCaller,\\n\\t\\t\\toutPair,\\n\\t\\t\\tslippage,\\n\\t\\t\\ttotalFeePercent\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Completes a sell order on the outPair side.\\n\\t * @param to Address to which the amount is transferred.\\n\\t * @param amount Amount to be transferred.\\n\\t */\\n\\tfunction completeSell(address to, uint256 amount) external isKnownPair {\\n\\t\\ttradeToken.transfer(to, _takeFromReserve(amount));\\n\\t\\tbasePair.mintRewards(amount);\\n\\t\\temit BalanceUpdated(to, tradeToken.balanceOf(to));\\n\\t\\temit BalanceUpdated(address(this), tradeToken.balanceOf(address(this)));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the total amount of tradeToken that can be bought from this Pair.\\n\\t * @return The reserve amount.\\n\\t */\\n\\tfunction reserve() public view returns (uint256) {\\n\\t\\treturn deposits + sales;\\n\\t}\\n\\n\\tfunction receiveReward(\\n\\t\\tERC20TokenPayment calldata payment\\n\\t) external onlyBasePair {\\n\\t\\t// TODO check that payment is base pair's token\\n\\t\\trequire(\\n\\t\\t\\tpayment.token == Pair(address(basePair)).tradeToken(),\\n\\t\\t\\t\\\"Pair: invalid reward token\\\"\\n\\t\\t);\\n\\t\\tTokenPayments.receiveERC20(payment);\\n\\t\\trewards += payment.amount;\\n\\t\\temit RewardReceived(msg.sender, payment.amount);\\n\\t\\temit BalanceUpdated(address(this), tradeToken.balanceOf(address(this)));\\n\\t}\\n}\\n\",\"keccak256\":\"0xfdb69d3d3589546a39bbac5e28b6daf860835a9664a04228749fb66398ca228b\",\"license\":\"MIT\"},\"contracts/pair/SafePrice.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"./Errors.sol\\\";\\n\\n// TODO use when we can do operator overloading; see https://docs.soliditylang.org/en/v0.8.23/contracts.html#using-for\\n// type Round is uint256;\\n\\nuint constant MAX_OBSERVATIONS = 65_536; // 2^{16} records, to optimise binary search\\n\\nstruct PriceObservation {\\n\\tuint256 firstTokenReserveAccumulated;\\n\\tuint256 secondTokenReserveAccumulated;\\n\\tuint256 weightAccumulated;\\n\\t// Round recordingRound;\\n\\tuint256 recordingRound;\\n}\\n\\nstruct IndexValue {\\n\\tuint keyIndex;\\n\\tPriceObservation value;\\n}\\n\\nstruct priceObsvec {\\n\\tmapping(uint => IndexValue) data;\\n\\tuint[] keys;\\n\\tuint length;\\n}\\n\\nlibrary PriceObsVec {\\n\\tfunction isEmpty(\\n\\t\\tpriceObsvec storage self\\n\\t) internal view returns (bool empty) {\\n\\t\\tempty = self.length == 0;\\n\\t}\\n\\n\\tfunction get(\\n\\t\\tpriceObsvec storage self,\\n\\t\\tuint index\\n\\t) internal view returns (PriceObservation memory) {\\n\\t\\tif (index > self.length) {\\n\\t\\t\\trevert IndexOutOfRangeErrMsg();\\n\\t\\t}\\n\\n\\t\\treturn self.data[index].value;\\n\\t}\\n\\n\\tfunction set(\\n\\t\\tpriceObsvec storage self,\\n\\t\\tuint index,\\n\\t\\tPriceObservation memory value\\n\\t) internal {\\n\\t\\tif (index > self.length) {\\n\\t\\t\\trevert IndexOutOfRangeErrMsg();\\n\\t\\t}\\n\\n\\t\\tself.data[index].value = value;\\n\\t\\tself.data[index].keyIndex = index;\\n\\t}\\n\\n\\t/// Add one item at the end of the list.\\n\\t/// Returns the index of the newly inserted item, which is also equal to the new number of elements.\\n\\tfunction push(\\n\\t\\tpriceObsvec storage self,\\n\\t\\tPriceObservation memory value\\n\\t) internal returns (uint) {\\n\\t\\tself.length += 1;\\n\\n\\t\\tself.data[self.length].value = value;\\n\\t\\tself.data[self.length].keyIndex = self.length;\\n\\n\\t\\treturn self.length;\\n\\t}\\n\\n\\tfunction len(priceObsvec storage self) internal view returns (uint) {\\n\\t\\treturn self.length;\\n\\t}\\n}\\n\\nstruct SafePriceData {\\n\\tuint safePriceCurrentIndex;\\n\\tpriceObsvec priceObservations;\\n}\\n\\nlibrary SafePriceUtil {\\n\\tusing PriceObsVec for priceObsvec;\\n\\n\\tfunction updateSafePrice(\\n\\t\\tSafePriceData storage self,\\n\\t\\tuint256 firstTokenReserve,\\n\\t\\tuint256 secondTokenReserve\\n\\t) internal {\\n\\t\\tif (firstTokenReserve == 0 || secondTokenReserve == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint currentRound = block.number;\\n\\n\\t\\tif (self.safePriceCurrentIndex > MAX_OBSERVATIONS) {\\n\\t\\t\\trevert ErrorSafePriceCurrentIndex(\\n\\t\\t\\t\\tself.safePriceCurrentIndex,\\n\\t\\t\\t\\tMAX_OBSERVATIONS\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tPriceObservation memory lastPriceObservation;\\n\\t\\tuint newIndex = 1;\\n\\t\\tif (!self.priceObservations.isEmpty()) {\\n\\t\\t\\tlastPriceObservation = self.priceObservations.get(\\n\\t\\t\\t\\tself.safePriceCurrentIndex\\n\\t\\t\\t);\\n\\t\\t\\tnewIndex = (self.safePriceCurrentIndex % MAX_OBSERVATIONS) + 1;\\n\\t\\t}\\n\\n\\t\\tif (lastPriceObservation.recordingRound == currentRound) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tPriceObservation memory newPriceObservation = computeNewObservation(\\n\\t\\t\\tcurrentRound,\\n\\t\\t\\tfirstTokenReserve,\\n\\t\\t\\tsecondTokenReserve,\\n\\t\\t\\tlastPriceObservation\\n\\t\\t);\\n\\n\\t\\tif (self.priceObservations.len() == MAX_OBSERVATIONS) {\\n\\t\\t\\tself.priceObservations.set(newIndex, newPriceObservation);\\n\\t\\t} else {\\n\\t\\t\\tself.priceObservations.push(newPriceObservation);\\n\\t\\t}\\n\\n\\t\\tself.safePriceCurrentIndex = newIndex;\\n\\t}\\n\\n\\tfunction computeNewObservation(\\n\\t\\tuint newRound,\\n\\t\\tuint256 newFirstReserve,\\n\\t\\tuint256 newSecondReserve,\\n\\t\\tPriceObservation memory currentPriceObservation\\n\\t) internal pure returns (PriceObservation memory newPriceObservation) {\\n\\t\\tuint256 newWeight = currentPriceObservation.recordingRound == 0\\n\\t\\t\\t? 1\\n\\t\\t\\t: newRound - currentPriceObservation.recordingRound;\\n\\n\\t\\tnewPriceObservation = currentPriceObservation;\\n\\t\\tnewPriceObservation.firstTokenReserveAccumulated +=\\n\\t\\t\\tnewWeight *\\n\\t\\t\\tnewFirstReserve;\\n\\t\\tnewPriceObservation.secondTokenReserveAccumulated +=\\n\\t\\t\\tnewWeight *\\n\\t\\t\\tnewSecondReserve;\\n\\t\\tnewPriceObservation.weightAccumulated += newWeight;\\n\\t\\tnewPriceObservation.recordingRound = newRound;\\n\\t}\\n}\\n\",\"keccak256\":\"0x2ed6db9a453cbcbd6dbbadad61623ca90cfa5f7b0715cfbca27dfa7ae73de753\",\"license\":\"MIT\"},\"contracts/pair/contexts/AddLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"../../common/libs/Types.sol\\\";\\n\\nstruct AddLiquidityContext {\\n\\tuint256 liq;\\n\\tuint256 deposit;\\n}\\n\",\"keccak256\":\"0x0846a74727f7345ccee06f6cc4a27486a20b8c3c66007e2f28d396e6c2f86248\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516122e63803806122e683398101604081905261002f91610233565b610038336101c7565b6001600160a01b03821661009d5760405162461bcd60e51b815260206004820152602160248201527f506169723a20496e76616c696420747261646520746f6b656e206164647265736044820152607360f81b60648201526084015b60405180910390fd5b6001600160a01b0381166100f35760405162461bcd60e51b815260206004820152601f60248201527f506169723a20496e76616c6964206261736520706169722061646472657373006044820152606401610094565b6001600160a01b0382166080819052604080516395d89b4160e01b81529051600092916395d89b4191600480830192869291908290030181865afa15801561013f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610167919081019061027c565b51116101b55760405162461bcd60e51b815260206004820152601960248201527f506169723a20496e76616c696420747261646520746f6b656e000000000000006044820152606401610094565b6001600160a01b031660a05250610348565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461022e57600080fd5b919050565b6000806040838503121561024657600080fd5b61024f83610217565b915061025d60208401610217565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561028e57600080fd5b81516001600160401b038111156102a457600080fd5b8201601f810184136102b557600080fd5b80516001600160401b038111156102ce576102ce610266565b604051601f8201601f19908116603f011681016001600160401b03811182821017156102fc576102fc610266565b60405281815282820160200186101561031457600080fd5b60005b8281101561033357602081850181015183830182015201610317565b50600091810160200191909152949350505050565b60805160a051611f106103d6600039600081816102010152818161024901528181610812015281816109f6015281816113a601526118d60152600081816101ae015281816103c10152818161056101528181610755015281816108a80152818161095401528181610b1001528181610bbc01528181610ef70152818161172f01526117db0152611f106000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639ec5a8941161008c578063cef2f8e911610066578063cef2f8e914610196578063d83678ac146101a9578063e1015bb6146101d0578063f2fde38b146101e357600080fd5b80639ec5a8941461017c578063aace52fe14610185578063cd3293de1461018e57600080fd5b80633b22fc03116100c85780633b22fc03146101335780635541955f1461013c578063715018a61461014f5780638da5cb5b1461015757600080fd5b80630766a2be146100ef57806307fefe4814610104578063323a5e0b1461012a575b600080fd5b6101026100fd366004611be9565b6101f6565b005b610117610112366004611c1a565b610440565b6040519081526020015b60405180910390f35b61011760015481565b61011760045481565b61010261014a366004611c4f565b61064d565b610102610685565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610121565b61011760035481565b61011760025481565b610117610699565b6101026101a4366004611cbc565b6106b0565b6101647f000000000000000000000000000000000000000000000000000000000000000081565b6101176101de366004611ce8565b6109d4565b6101026101f1366004611d20565b610c40565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102475760405162461bcd60e51b815260040161023e90611d44565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d83678ac6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c99190611d69565b6001600160a01b03166102df6020830183611d20565b6001600160a01b0316146103355760405162461bcd60e51b815260206004820152601a60248201527f506169723a20696e76616c69642072657761726420746f6b656e000000000000604482015260640161023e565b61033e81610cb9565b8060200135600360008282546103549190611d9c565b9091555050604051602082810135825233917f9ac954606f877c9c9e6deec30e9265abff5a57c7123a34777ca9321eb6c26d8e910160405180910390a26040516370a0823160e01b8152306004820181905290600080516020611ebb833981519152906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042c9190611daf565b60405190815260200160405180910390a250565b6000336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190611d69565b6001600160a01b03166104bf6000546001600160a01b031690565b6001600160a01b0316146104e55760405162461bcd60e51b815260040161023e90611d44565b60006127106104f48585611dc8565b6104fe9190611df5565b905061050a8185611e09565b9150600061051782610d46565b90506105268160400151610ddd565b600160008282546105379190611d9c565b909155505080516001600160a01b0387161580159061055a575060008260200151115b15610611577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb8861059c8560200151610ddd565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190611e1c565b50610623565b60208201516106209082611d9c565b90505b61062c81610ddd565b6002600082825461063d9190611d9c565b9091555093979650505050505050565b610655610e93565b61066184876000610eed565b61067d61067336869003860186611e3e565b8787868686610f99565b505050505050565b61068d610e93565b6106976000611301565b565b60006002546001546106ab9190611d9c565b905090565b336001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190611d69565b6001600160a01b031661072d6000546001600160a01b031690565b6001600160a01b0316146107535760405162461bcd60e51b815260040161023e90611d44565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb8361078c84610ddd565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156107d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fb9190611e1c565b50604051634828ced960e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634828ced990602401600060405180830381600087803b15801561085e57600080fd5b505af1158015610872573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b03808616600483018190529350600080516020611ebb83398151915292507f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109139190611daf565b60405190815260200160405180910390a26040516370a0823160e01b8152306004820181905290600080516020611ebb833981519152906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561099b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bf9190611daf565b60405190815260200160405180910390a25050565b60006109de610e93565b6109e88383611351565b600454306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614908115610a2c57610a278561135e565b610a35565b610a3585611384565b8060045411610a865760405162461bcd60e51b815260206004820181905260248201527f506169723a20696e76616c6964206c6971756964697479206164646974696f6e604482015260640161023e565b80600454610a949190611e09565b60408051602080890135825281018390529194506001600160a01b038616917fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee45910160405180910390a26040516370a0823160e01b81526001600160a01b038086166004830181905291600080516020611ebb833981519152917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7b9190611daf565b60405190815260200160405180910390a26040516370a0823160e01b8152306004820181905290600080516020611ebb833981519152906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c279190611daf565b60405190815260200160405180910390a2505092915050565b610c48610e93565b6001600160a01b038116610cad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023e565b610cb681611301565b50565b610cc66020820182611d20565b6040516323b872dd60e01b8152336004820152306024820152602083013560448201526001600160a01b0391909116906323b872dd906064016020604051808303816000875af1158015610d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d429190611e1c565b5050565b610d6a60405180606001604052806000815260200160008152602001600081525090565b6000612710610d7b846101f4611dc8565b610d859190611df5565b90506000612710610d978560c8611dc8565b610da19190611df5565b9050600081610db08487611e09565b610dba9190611e09565b604080516060810182529485526020850193909352918301919091525092915050565b60008160025410610e05578160026000828254610dfa9190611e09565b909155509192915050565b81600254600154610e169190611d9c565b10610e4b57506002548190610e2b9082611e09565b60016000828254610e3c9190611e09565b90915550506000600255919050565b60405162461bcd60e51b815260206004820152601f60248201527f416d6f756e7420746f2062652074616b656e20697320746f6f206c6172676500604482015260640161023e565b6000546001600160a01b031633146106975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161023e565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610f246020850185611d20565b6001600160a01b0316141580610f3d5750808360200135105b15610f8a5760405162461bcd60e51b815260206004820152601a60248201527f506169723a20426164207265636569766564207061796d656e74000000000000604482015260640161023e565b610f94838361145c565b505050565b6000610fa3610699565b90506000846001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110099190611daf565b9050600061102561101e8a60200151876114e7565b8484611512565b90508082116110765760405162461bcd60e51b815260206004820152601860248201527f506169723a206e6f7420656e6f75676820726573657276650000000000000000604482015260640161023e565b6001600160a01b0386166000908152600560205260409020611099908484611531565b60006110a58484611643565b905060006110b88b60200151868661164f565b60405162ffdfc960e31b81526001600160a01b038b811660048301526024820183905260448201899052919250908916906307fefe48906064016020604051808303816000875af1158015611111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111359190611daf565b90508281101561117b5760405162461bcd60e51b815260206004820152601160248201527014db1a5c1c1859d948115e18d959591959607a1b604482015260640161023e565b806000036111bd5760405162461bcd60e51b815260206004820152600f60248201526e16995c9bc81bdd5d08185b5bdd5b9d608a1b604482015260640161023e565b6111c98b8b8a84611680565b600061123d6111d6610699565b8a6001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611214573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112389190611daf565b611643565b90508083111561128f5760405162461bcd60e51b815260206004820152601860248201527f4552524f525f4b5f494e56415249414e545f4641494c45440000000000000000604482015260640161023e565b886001600160a01b03168b6001600160a01b03167ff28b12fec161da274c54399738657d50f53663799a86a4c2e8898efdc9228ad18e60200151858b6040516112eb939291909283526020830191909152604082015260600190565b60405180910390a3505050505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610d428282610fa0610eed565b600081602001359050610d4260405180604001604052808381526020018381525061185d565b600061138f82611894565b905060008061139c6118c9565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600090815260056020526040902091935091506113e4818484611531565b60006113f08484611643565b90506114136040518060400160405280878152602001886020013581525061185d565b60008061141e6118c9565b91509150600061142e8383611643565b90508084111561145157604051631d9ab40760e31b815260040160405180910390fd5b505050505050505050565b6114696020830183611d20565b6040516323b872dd60e01b81526001600160a01b0383811660048301523060248301526020850135604483015291909116906323b872dd906064016020604051808303816000875af11580156114c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f949190611e1c565b60006127106114f58361195e565b6114ff9085611dc8565b6115099190611df5565b90505b92915050565b60008261151f8386611dc8565b6115299190611df5565b949350505050565b81158061153c575080155b1561154657505050565b8254439062010000101561157c57835460405163e3bb1f6360e01b8152600481019190915262010000602482015260440161023e565b6115a76040518060800160405280600081526020016000815260200160008152602001600081525090565b6003850154600190156115e55785546115c49060018801906119c2565b86549092506115d7906201000090611ea6565b6115e2906001611d9c565b90505b828260600151036115f857505050505050565b600061160684878786611a56565b600388015490915061ffff190161162a57611625600188018383611b0d565b611639565b6116376001880182611b67565b505b5090945550505050565b60006115098284611dc8565b60008061165c8386611dc8565b9050600061166a8686611d9c565b90506116768183611df5565b9695505050505050565b8360200151600260008282546116969190611d9c565b909155505060405163cef2f8e960e01b81526001600160a01b0384811660048301526024820183905283169063cef2f8e990604401600060405180830381600087803b1580156116e557600080fd5b505af11580156116f9573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b03808716600483018190529350600080516020611ebb83398151915292507f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179a9190611daf565b60405190815260200160405180910390a26040516370a0823160e01b8152306004820181905290600080516020611ebb833981519152906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611822573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118469190611daf565b60405190815260200160405180910390a250505050565b8060200151600160008282546118739190611d9c565b909155505080516004805460009061188c908490611d9c565b909155505050565b60008060006118a16118c9565b909250905081156118b257816118b8565b83602001355b915061152984602001358383611512565b6000806118d4610699565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119569190611daf565b915091509091565b60006001821080611970575061271082115b156119b65760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420736c6970706167652076616c756560501b604482015260640161023e565b61150c82612710611e09565b6119ed6040518060800160405280600081526020016000815260200160008152602001600081525090565b8260020154821115611a125760405163038f948b60e21b815260040160405180910390fd5b506000908152602091825260409081902081516080810183526001820154815260028201549381019390935260038101549183019190915260040154606082015290565b611a816040518060800160405280600081526020016000815260200160008152602001600081525090565b60008260600151600014611aa3576060830151611a9e9087611e09565b611aa6565b60015b8392509050611ab58582611dc8565b82518390611ac4908390611d9c565b905250611ad18482611dc8565b82602001818151611ae29190611d9c565b905250604082018051829190611af9908390611d9c565b905250506060810194909452509192915050565b8260020154821115611b325760405163038f948b60e21b815260040160405180910390fd5b600082815260209384526040908190208251600182015593820151600285015581015160038401556060015160048301559055565b60006001836002016000828254611b7e9190611d9c565b909155505050600280830180546000908152602085815260408083208651600182015591860151948201949094558385015160038201556060850151600490910155905480825291902081905592915050565b600060408284031215611be357600080fd5b50919050565b600060408284031215611bfb57600080fd5b6115098383611bd1565b6001600160a01b0381168114610cb657600080fd5b600080600060608486031215611c2f57600080fd5b8335611c3a81611c05565b95602085013595506040909401359392505050565b60008060008060008060e08789031215611c6857600080fd5b8635611c7381611c05565b95506020870135611c8381611c05565b9450611c928860408901611bd1565b93506080870135611ca281611c05565b9598949750929560a08101359460c0909101359350915050565b60008060408385031215611ccf57600080fd5b8235611cda81611c05565b946020939093013593505050565b60008060608385031215611cfb57600080fd5b611d058484611bd1565b91506040830135611d1581611c05565b809150509250929050565b600060208284031215611d3257600080fd5b8135611d3d81611c05565b9392505050565b6020808252600b908201526a1b9bdd08185b1b1bddd95960aa1b604082015260600190565b600060208284031215611d7b57600080fd5b8151611d3d81611c05565b634e487b7160e01b600052601160045260246000fd5b8082018082111561150c5761150c611d86565b600060208284031215611dc157600080fd5b5051919050565b808202811582820484141761150c5761150c611d86565b634e487b7160e01b600052601260045260246000fd5b600082611e0457611e04611ddf565b500490565b8181038181111561150c5761150c611d86565b600060208284031215611e2e57600080fd5b81518015158114611d3d57600080fd5b60006040828403128015611e5157600080fd5b506040805190810167ffffffffffffffff81118282101715611e8357634e487b7160e01b600052604160045260246000fd5b6040528235611e9181611c05565b81526020928301359281019290925250919050565b600082611eb557611eb5611ddf565b50069056fe8ad64a0ac7700dd8425ab0499f107cb6e2cd1581d803c5b8c1c79dcb8190b1afa26469706673582212208139772988db1fd28bb14b14bac99199f492d9361052c91afb241d36e7fcaa2864736f6c634300081a0033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "This contract manages a trading pair in the DEX, handling liquidity, trading, and fee mechanisms.",
    "errors": {
      "ErrorSafePriceCurrentIndex(uint256,uint256)": [
        {
          "params": {
            "currentIndex": "the current index",
            "maxIndex": "the maximum possible index"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addLiquidity((address,uint256),address)": {
        "params": {
          "from": "Address from which liquidity is added.",
          "wholePayment": "Details of the payment for adding liquidity."
        },
        "returns": {
          "liqAdded": "Amount of liquidity added."
        }
      },
      "completeSell(address,uint256)": {
        "params": {
          "amount": "Amount to be transferred.",
          "to": "Address to which the amount is transferred."
        }
      },
      "constructor": {
        "details": "Constructor for initializing the Pair contract.",
        "params": {
          "basePairAddr": "Address of the base pair.",
          "tradeToken_": "Address of the trade token."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reserve()": {
        "returns": {
          "_0": "The reserve amount."
        }
      },
      "sell(address,address,(address,uint256),address,uint256,uint256)": {
        "params": {
          "caller": "Address of the caller.",
          "inPayment": "Details of the payment for the sell order.",
          "outPair": "Address of the pair to sell to.",
          "referrerOfCaller": "Address of the referrer of the caller.",
          "slippage": "Maximum slippage allowed.",
          "totalFeePercent": "Total fee percentage."
        }
      },
      "takeFees(address,uint256,uint256)": {
        "details": "This must be called on the out pair side",
        "params": {
          "amount": "amount to compute and deduct fee from",
          "referrer": "the user address to receive part of fee",
          "totalFeePercent": "the fee percentage"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Pair",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ErrorKInvariantFailed()": [
        {
          "notice": "K invariant failed"
        }
      ],
      "ErrorSafePriceCurrentIndex(uint256,uint256)": [
        {
          "notice": "The current safe price index of `currentIndex` is greater than the maximum number of observations `maxIndex`"
        }
      ],
      "IndexOutOfRangeErrMsg()": [
        {
          "notice": "index out of range"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "addLiquidity((address,uint256),address)": {
        "notice": "Adds liquidity to the pair."
      },
      "completeSell(address,uint256)": {
        "notice": "Completes a sell order on the outPair side."
      },
      "reserve()": {
        "notice": "Returns the total amount of tradeToken that can be bought from this Pair."
      },
      "sell(address,address,(address,uint256),address,uint256,uint256)": {
        "notice": "Executes a sell order."
      },
      "takeFees(address,uint256,uint256)": {
        "notice": "Takes fee and update balances of beneficiaries"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2871,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "deposits",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2873,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "sales",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2875,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "rewards",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2877,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "lpSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2885,
        "contract": "contracts/pair/Pair.sol:Pair",
        "label": "safePrices",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(SafePriceData)3937_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(SafePriceData)3937_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SafePriceData)",
        "numberOfBytes": "32",
        "value": "t_struct(SafePriceData)3937_storage"
      },
      "t_mapping(t_uint256,t_struct(IndexValue)3782_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IndexValue)",
        "numberOfBytes": "32",
        "value": "t_struct(IndexValue)3782_storage"
      },
      "t_struct(IndexValue)3782_storage": {
        "encoding": "inplace",
        "label": "struct IndexValue",
        "members": [
          {
            "astId": 3778,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "keyIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3781,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(PriceObservation)3776_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PriceObservation)3776_storage": {
        "encoding": "inplace",
        "label": "struct PriceObservation",
        "members": [
          {
            "astId": 3769,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "firstTokenReserveAccumulated",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3771,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "secondTokenReserveAccumulated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3773,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "weightAccumulated",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3775,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "recordingRound",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SafePriceData)3937_storage": {
        "encoding": "inplace",
        "label": "struct SafePriceData",
        "members": [
          {
            "astId": 3933,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "safePriceCurrentIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3936,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "priceObservations",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(priceObsvec)3793_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(priceObsvec)3793_storage": {
        "encoding": "inplace",
        "label": "struct priceObsvec",
        "members": [
          {
            "astId": 3787,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(IndexValue)3782_storage)"
          },
          {
            "astId": 3790,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "keys",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3792,
            "contract": "contracts/pair/Pair.sol:Pair",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}