{
  "address": "0x06E1A0fAD44fc7eBDC68900ad487eb386a037A0c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tradeToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "basePairAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "BurntFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liqAdded",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SellExecuted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment",
          "name": "wholePayment",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liqAdded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rps",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rewardPerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "depValuePerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "pair",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tradeToken",
                  "type": "address"
                }
              ],
              "internalType": "struct LpToken.LpAttributes",
              "name": "attributes",
              "type": "tuple"
            }
          ],
          "internalType": "struct LpToken.LpBalance",
          "name": "liquidity",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "liqToRemove",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rewardPerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "depValuePerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "pair",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tradeToken",
                  "type": "address"
                }
              ],
              "internalType": "struct LpToken.LpAttributes",
              "name": "attributes",
              "type": "tuple"
            }
          ],
          "internalType": "struct LpToken.LpBalance",
          "name": "liq",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "depositClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sales",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrerOfCaller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenPayment",
          "name": "inPayment",
          "type": "tuple"
        },
        {
          "internalType": "contract Pair",
          "name": "outPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slippage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFeePercent",
          "type": "uint256"
        }
      ],
      "name": "sell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "burntFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFeePercent",
          "type": "uint256"
        }
      ],
      "name": "takeFeesAndTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toBurn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 7,
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradeToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"basePairAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BurntFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqAdded\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SellExecuted\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment\",\"name\":\"wholePayment\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liqAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rps\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depValuePerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"}],\"internalType\":\"struct LpToken.LpAttributes\",\"name\":\"attributes\",\"type\":\"tuple\"}],\"internalType\":\"struct LpToken.LpBalance\",\"name\":\"liquidity\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"liqToRemove\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depValuePerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradeToken\",\"type\":\"address\"}],\"internalType\":\"struct LpToken.LpAttributes\",\"name\":\"attributes\",\"type\":\"tuple\"}],\"internalType\":\"struct LpToken.LpBalance\",\"name\":\"liq\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"depositClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrerOfCaller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPayment\",\"name\":\"inPayment\",\"type\":\"tuple\"},{\"internalType\":\"contract Pair\",\"name\":\"outPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeePercent\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burntFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeePercent\",\"type\":\"uint256\"}],\"name\":\"takeFeesAndTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBurn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract manages a trading pair in the DEX, handling liquidity, trading, and fee mechanisms.\",\"kind\":\"dev\",\"methods\":{\"addLiquidity((address,uint256,uint256),address)\":{\"params\":{\"from\":\"Address from which liquidity is added.\",\"wholePayment\":\"Details of the payment for adding liquidity.\"},\"returns\":{\"liqAdded\":\"Amount of liquidity added.\"}},\"constructor\":{\"details\":\"Constructor for initializing the Pair contract.\",\"params\":{\"basePairAddr\":\"Address of the base pair.\",\"tradeToken_\":\"Address of the trade token.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLiquidity((uint256,uint256,(uint256,uint256,address,address)),uint256,address)\":{\"details\":\"This function updates the LP's liquidity balance and claims a proportionate amount of the deposit.      It ensures that the LP's deposit value per share is up-to-date before calculating the deposit to be claimed.\",\"params\":{\"from\":\"The address from which the liquidity is being removed.\",\"liqToRemove\":\"The amount of liquidity to be removed from the pool.\",\"liquidity\":\"The current liquidity balance of the LP token, including attributes like `depValuePerShare`.\"},\"returns\":{\"depositClaimed\":\"The amount of deposit claimed by the LP.\",\"liq\":\"The updated liquidity balance after removal.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reserve()\":{\"returns\":{\"_0\":\"The reserve amount.\"}},\"sell(address,address,(address,uint256,uint256),address,uint256,uint256)\":{\"params\":{\"caller\":\"Address of the caller.\",\"inPayment\":\"Details of the payment for the sell order.\",\"outPair\":\"Address of the pair to sell to.\",\"referrerOfCaller\":\"Address of the referrer of the caller.\",\"slippage\":\"Maximum slippage allowed.\",\"totalFeePercent\":\"Total fee percentage.\"}},\"takeFeesAndTransferTokens(address,address,uint256,uint256)\":{\"details\":\"This must be called on the out pair side\",\"params\":{\"amount\":\"amount to compute and deduct fee from\",\"receiver\":\"the address buying this token\",\"referrer\":\"the user address to receive part of fee\",\"totalFeePercent\":\"the fee percentage\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Pair\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity((address,uint256,uint256),address)\":{\"notice\":\"Adds liquidity to the pair.\"},\"removeLiquidity((uint256,uint256,(uint256,uint256,address,address)),uint256,address)\":{\"notice\":\"Removes liquidity from the pool and claims the corresponding deposit.\"},\"reserve()\":{\"notice\":\"Returns the total amount of tradeToken that can be bought from this Pair.\"},\"sell(address,address,(address,uint256,uint256),address,uint256,uint256)\":{\"notice\":\"Executes a sell order.\"},\"takeFeesAndTransferTokens(address,address,uint256,uint256)\":{\"notice\":\"Takes fee and update balances of beneficiaries\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pair/Pair.sol\":\"Pair\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/common/Amm.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Amm {\\n\\tfunction calculateKConstant(\\n\\t\\tuint256 firstTokenAmt,\\n\\t\\tuint256 secondTokenAmt\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn firstTokenAmt * secondTokenAmt;\\n\\t}\\n\\n\\tfunction quote(\\n\\t\\tuint256 firstTokenAmount,\\n\\t\\tuint256 firstTokenReserve,\\n\\t\\tuint256 secondTokenReserve\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn (firstTokenAmount * secondTokenReserve) / firstTokenReserve;\\n\\t}\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn quote(amountIn, reserveIn + amountIn, reserveOut);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0dc4954af8d679148ea9400064c994e8588a26ed72480d414eb9ef0d51817353\",\"license\":\"MIT\"},\"contracts/common/libs/Fee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./Math.sol\\\";\\nimport \\\"./Number.sol\\\";\\n\\nlibrary FeeUtil {\\n\\tusing Number for uint256;\\n\\n\\t/// @dev The maximum percentage value, represented with 2 decimal places (100.00%).\\n\\tuint256 constant MAX_PERCENT = 100_00;\\n\\n\\t/// @dev Struct to hold the different fee values: burn, referrer, and liquidity providers.\\n\\tstruct Values {\\n\\t\\tuint256 toBurnValue; // The portion of the fee that will be burned.\\n\\t\\tuint256 referrerValue; // The portion of the fee allocated to the referrer.\\n\\t\\tuint256 liqProvidersValue; // The portion of the fee allocated to liquidity providers.\\n\\t}\\n\\n\\t/// @dev Balance factor used for calculating ratios, with up to three decimal places of precision.\\n\\tuint64 constant RATIO_BALANCE_FACTOR = 1_000;\\n\\n\\t/// @dev Minimum fee percentage (0.10%).\\n\\tuint64 constant MIN_FEE = 10;\\n\\n\\t/// @dev First fee threshold percentage (0.30%).\\n\\tuint64 constant FIRST_FEE = 30;\\n\\n\\t/// @dev Second fee threshold percentage (9.00%).\\n\\tuint64 constant SECOND_FEE = 9_00;\\n\\n\\t/// @dev Maximum fee percentage (100.00%).\\n\\tuint64 constant THIRD_FEE = uint64(MAX_PERCENT);\\n\\n\\t/**\\n\\t * @notice Calculates the fee percentage based on the total sales of a pair, total liquidity, and the number of pairs.\\n\\t * @param pairTotalSales The total sales amount for the pair.\\n\\t * @param totalLiq The total liquidity across all pairs.\\n\\t * @param pairsCount The number of pairs.\\n\\t * @return percent The calculated fee percentage.\\n\\t */\\n\\tfunction feePercent(\\n\\t\\tuint256 pairTotalSales,\\n\\t\\tuint256 totalLiq,\\n\\t\\tuint64 pairsCount\\n\\t) internal pure returns (uint256 percent) {\\n\\t\\tuint64 ratio = _pairRatio(pairTotalSales, totalLiq, pairsCount);\\n\\n\\t\\t(\\n\\t\\t\\tuint64 minIn,\\n\\t\\t\\tuint64 maxIn,\\n\\t\\t\\tuint64 minOut,\\n\\t\\t\\tuint64 maxOut\\n\\t\\t) = _getInterValues(ratio, pairsCount);\\n\\n\\t\\tpercent = MathUtil.linearInterpolation(\\n\\t\\t\\tminIn,\\n\\t\\t\\tmaxIn,\\n\\t\\t\\tratio,\\n\\t\\t\\tminOut,\\n\\t\\t\\tmaxOut\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the interpolation values based on the ratio and the number of pairs.\\n\\t * @param ratio The calculated pair ratio.\\n\\t * @param pairsCount The number of pairs.\\n\\t * @return minIn The minimum input for interpolation.\\n\\t * @return maxIn The maximum input for interpolation.\\n\\t * @return minOut The minimum output for interpolation.\\n\\t * @return maxOut The maximum output for interpolation.\\n\\t */\\n\\tfunction _getInterValues(\\n\\t\\tuint256 ratio,\\n\\t\\tuint64 pairsCount\\n\\t)\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns (uint64 minIn, uint64 maxIn, uint64 minOut, uint64 maxOut)\\n\\t{\\n\\t\\tminIn = 1;\\n\\t\\tmaxIn = RATIO_BALANCE_FACTOR;\\n\\t\\tminOut = MIN_FEE;\\n\\t\\tmaxOut = FIRST_FEE;\\n\\n\\t\\tuint64 MAX_RATIO_BALANCE_FACTOR = _maxRatioBalanceFactor(pairsCount);\\n\\n\\t\\tuint64 count = 0;\\n\\t\\twhile (ratio > maxIn) {\\n\\t\\t\\tminIn = maxIn + 1;\\n\\t\\t\\tminOut = maxOut + 1;\\n\\n\\t\\t\\tif (count == 0) {\\n\\t\\t\\t\\tmaxIn = MAX_RATIO_BALANCE_FACTOR / 2;\\n\\t\\t\\t\\tmaxOut = SECOND_FEE;\\n\\t\\t\\t} else if (count == 1) {\\n\\t\\t\\t\\tmaxIn = MAX_RATIO_BALANCE_FACTOR;\\n\\t\\t\\t\\tmaxOut = THIRD_FEE;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(\\n\\t\\t\\t\\t\\t\\\"FeeUtil._getInterValues: max call depth for interpolation values\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates the maximum ratio balance factor based on the number of pairs.\\n\\t * @param pairsCount The number of pairs.\\n\\t * @return max The maximum ratio balance factor.\\n\\t */\\n\\tfunction _maxRatioBalanceFactor(\\n\\t\\tuint64 pairsCount\\n\\t) private pure returns (uint64 max) {\\n\\t\\tmax = pairsCount * RATIO_BALANCE_FACTOR;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Computes the pair ratio based on total sales, total liquidity, and the number of pairs.\\n\\t * @param pairTotalSales The total sales amount for the pair.\\n\\t * @param totalLiq The total liquidity across all pairs.\\n\\t * @param pairsCount The number of pairs.\\n\\t * @return ratio The computed pair ratio.\\n\\t */\\n\\tfunction _pairRatio(\\n\\t\\tuint256 pairTotalSales,\\n\\t\\tuint256 totalLiq,\\n\\t\\tuint64 pairsCount\\n\\t) private pure returns (uint64 ratio) {\\n\\t\\tuint256 value = (pairTotalSales * RATIO_BALANCE_FACTOR) /\\n\\t\\t\\t_liqRatio(totalLiq, pairsCount);\\n\\t\\tratio = value.clamp(1, _maxRatioBalanceFactor(pairsCount));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Computes the liquidity ratio, which is the total sales divided by the number of pairs.\\n\\t * @param sales The total sales amount.\\n\\t * @param pairsCount The number of pairs.\\n\\t * @return gRatio The computed liquidity ratio.\\n\\t */\\n\\tfunction _liqRatio(\\n\\t\\tuint256 sales,\\n\\t\\tuint64 pairsCount\\n\\t) private pure returns (uint256 gRatio) {\\n\\t\\trequire(pairsCount > 0, \\\"FeeUtil: no available pairs\\\");\\n\\n\\t\\tgRatio = sales / pairsCount;\\n\\t\\tif (gRatio <= 1) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Computes the total fee shares.\\n\\t * @param self The Values struct containing the fee shares.\\n\\t * @return The total fee value.\\n\\t */\\n\\tfunction total(Values memory self) internal pure returns (uint256) {\\n\\t\\treturn self.toBurnValue + self.referrerValue + self.liqProvidersValue;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Splits the fee into shares for burning, referrer, and liquidity providers.\\n\\t * @param fee The total fee amount.\\n\\t * @return A Values struct with the split values.\\n\\t */\\n\\tfunction splitFee(uint256 fee) internal pure returns (Values memory) {\\n\\t\\tuint256 toBurnValue = (fee * 5_00) / MAX_PERCENT; // 5%\\n\\t\\tuint256 referrerValue = (fee * 2_00) / MAX_PERCENT; // 2%\\n\\t\\tuint256 liqProvidersValue = fee - toBurnValue - referrerValue;\\n\\n\\t\\treturn Values(toBurnValue, referrerValue, liqProvidersValue);\\n\\t}\\n}\\n\",\"keccak256\":\"0x9718201490c3267a88628f5c57fcef55fcea7edee487e83aa5e6bfe3d246e673\",\"license\":\"MIT\"},\"contracts/common/libs/Math.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary MathUtil {\\n\\t/// out = (minOut * (maxIn - currentIn) + maxOut * (currentIn - minIn)) / (maxIn - minIn)\\n\\t/// https://en.wikipedia.org/wiki/LinearInterpolation\\n\\tfunction linearInterpolation(\\n\\t\\tuint256 minIn,\\n\\t\\tuint256 maxIn,\\n\\t\\tuint256 currentIn,\\n\\t\\tuint256 minOut,\\n\\t\\tuint256 maxOut\\n\\t) internal pure returns (uint256) {\\n\\t\\tif (currentIn < minIn || currentIn > maxIn) {\\n\\t\\t\\trevert(\\\"Math.linearInterpolation: Invalid values\\\");\\n\\t\\t}\\n\\n\\t\\tuint256 minOutWeighted = minOut * (maxIn - currentIn);\\n\\t\\tuint256 maxOutWeighted = maxOut * (currentIn - minIn);\\n\\t\\tuint256 inDiff = maxIn - minIn;\\n\\n\\t\\treturn (minOutWeighted + maxOutWeighted) / inDiff;\\n\\t}\\n}\\n\",\"keccak256\":\"0x74d46feaf93a836c38a6dfd5499971c312d241cdba33839f25f37d216b8ac0c1\",\"license\":\"MIT\"},\"contracts/common/libs/Number.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Number {\\n\\t/// @notice Restrict a value to a certain interval (Inspired by the `clamp` method in Rust number types).\\n\\t/// @dev Returns `max` if `self` is greater than `max`, and `min` if `self` is less than `min`.\\n\\t///      Otherwise, returns `self`.\\n\\t/// @param self The value to be clamped.\\n\\t/// @param min The minimum value allowed.\\n\\t/// @param max The maximum value allowed.\\n\\t/// @return clamped The clamped value.\\n\\t/// @dev Panics if `min > max`.\\n\\tfunction clamp(\\n\\t\\tuint256 self,\\n\\t\\tuint64 min,\\n\\t\\tuint64 max\\n\\t) internal pure returns (uint64 clamped) {\\n\\t\\tassert(min <= max);\\n\\t\\tif (self < min) {\\n\\t\\t\\tclamped = min;\\n\\t\\t} else if (self > max) {\\n\\t\\t\\tclamped = max;\\n\\t\\t} else {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tclamped := self\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Takes a specific amount from a value, reducing the original value and returning the taken amount.\\n\\t/// @dev If `value` is greater than or equal to `amount`, it subtracts `amount` from `value` and returns `amount`.\\n\\t///      If `value` is less than `amount`, it returns all of `value` and sets `value` to 0.\\n\\t/// @param value The original value, which will be reduced by the taken amount.\\n\\t/// @param amount The amount to be taken from `value`.\\n\\t/// @return remaining The remaining value after the amount is taken.\\n\\t/// @return taken The actual amount taken.\\n\\tfunction take(\\n\\t\\tuint256 value,\\n\\t\\tuint256 amount\\n\\t) internal pure returns (uint256 remaining, uint256 taken) {\\n\\t\\trequire(amount <= value, \\\"Invalid take amount\\\");\\n\\n\\t\\ttaken = amount;\\n\\t\\tremaining = value - amount;\\n\\t}\\n}\\n\",\"keccak256\":\"0xb42a8c4d6be9415ebc920221a765d0a2f0b7932402263bbf10bcd6194d5d3c76\",\"license\":\"MIT\"},\"contracts/common/libs/Slippage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Slippage {\\n\\tuint256 constant MAX_PERCENTAGE = 100_00;\\n\\n\\tfunction _checkSlippage(uint256 slippage) private pure returns (uint256) {\\n\\t\\tif (slippage < 1 || slippage > MAX_PERCENTAGE) {\\n\\t\\t\\trevert(\\\"Invalid slippage value\\\");\\n\\t\\t}\\n\\n\\t\\treturn MAX_PERCENTAGE - slippage;\\n\\t}\\n\\n\\tfunction compute(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 slippage\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn (amount * _checkSlippage(slippage)) / MAX_PERCENTAGE;\\n\\t}\\n}\\n\",\"keccak256\":\"0x36826bc6f26a64cf828533937fcec13c961404cc6eaf03089da2e2406b11f338\",\"license\":\"MIT\"},\"contracts/common/libs/TokenPayments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SFT } from \\\"../../modules/SFT.sol\\\";\\nimport { WEDU } from \\\"./WEDU.sol\\\";\\n\\nstruct TokenPayment {\\n\\taddress token;\\n\\tuint256 amount;\\n\\tuint256 nonce;\\n}\\n\\nlibrary TokenPayments {\\n\\tusing Address for address;\\n\\n\\tfunction receiveToken(TokenPayment memory payment) internal {\\n\\t\\treceiveToken(payment, msg.sender);\\n\\t}\\n\\n\\tfunction receiveToken(TokenPayment memory payment, address from) internal {\\n\\t\\tif (msg.value > 0) {\\n\\t\\t\\t// Native payment (ETH)\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tpayment.amount == msg.value,\\n\\t\\t\\t\\t\\\"TokenPayments: ETH amount mismatch\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tfrom == msg.sender,\\n\\t\\t\\t\\t\\\"TokenPayments: Native payment must be from caller\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Wrap EDU into WEDU\\n\\t\\t\\tWEDU(payable(payment.token)).deposit{ value: msg.value }();\\n\\t\\t} else if (payment.nonce == 0) {\\n\\t\\t\\t// ERC20 payment\\n\\t\\t\\tIERC20(payment.token).transferFrom(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tpayment.amount\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\t// SFT payment\\n\\t\\t\\tSFT(payment.token).safeTransferFrom(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tpayment.nonce,\\n\\t\\t\\t\\tpayment.amount,\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction sendToken(TokenPayment memory payment, address to) internal {\\n\\t\\tif (payment.nonce == 0) {\\n\\t\\t\\tbool shouldMoveEthBalance = false;\\n\\t\\t\\tif (!to.isContract()) {\\n\\t\\t\\t\\tuint256 beforeBal = address(this).balance;\\n\\n\\t\\t\\t\\t// Try to withdraw ETH assuming payment.token is WEDU\\n\\t\\t\\t\\t(shouldMoveEthBalance, ) = payment.token.call(\\n\\t\\t\\t\\t\\tabi.encodeWithSignature(\\\"withdraw(uint256)\\\", payment.amount)\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Checks to ensure balance movements\\n\\t\\t\\t\\tif (shouldMoveEthBalance) {\\n\\t\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t\\t(beforeBal + payment.amount) == address(this).balance,\\n\\t\\t\\t\\t\\t\\t\\\"Failed to withdraw WEDU\\\"\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (shouldMoveEthBalance) {\\n\\t\\t\\t\\tpayable(to).transfer(payment.amount);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tIERC20(payment.token).transfer(to, payment.amount);\\n\\t\\t\\t}\\n\\t\\t} else if (payment.nonce == 0) {\\n\\t\\t\\t// ERC20 payment\\n\\t\\t\\tIERC20(payment.token).transfer(to, payment.amount);\\n\\t\\t} else {\\n\\t\\t\\t// SFT payment\\n\\t\\t\\tSFT(payment.token).safeTransferFrom(\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tto,\\n\\t\\t\\t\\tpayment.nonce,\\n\\t\\t\\t\\tpayment.amount,\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction approve(TokenPayment memory payment, address to) internal {\\n\\t\\tif (payment.nonce == 0) {\\n\\t\\t\\t// ERC20 approval\\n\\t\\t\\tIERC20(payment.token).approve(to, payment.amount);\\n\\t\\t} else {\\n\\t\\t\\t// SFT approval\\n\\t\\t\\tSFT(payment.token).setApprovalForAll(to, true);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x8cfef7ce9a1ef1a70d0e7e21a020cd91444b551772cee7b4cb1342f55ef802b5\",\"license\":\"MIT\"},\"contracts/common/libs/WEDU.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @title WEDU (Wrapped EduChain) Token\\n/// @notice This contract wraps EduChain (EDU) native tokens into ERC20-compliant WEDU tokens.\\ncontract WEDU is ERC20 {\\n    \\n    /// @notice Constructor initializes the ERC20 token with name and symbol.\\n    constructor() ERC20(\\\"Wrapped EduChain\\\", \\\"WEDU\\\") {}\\n\\n    /// @notice Fallback function to receive EDU and automatically wrap it into WEDU.\\n    /// The received EDU will be wrapped as WEDU and credited to the sender.\\n    receive() external payable {\\n        deposit();\\n    }\\n\\n    /// @notice Wraps EDU into WEDU tokens. The amount of WEDU minted equals the amount of EDU sent.\\n    /// @dev This function mints WEDU tokens equivalent to the amount of EDU sent by the user.\\n    function deposit() public payable {\\n        _mint(msg.sender, msg.value);\\n    }\\n\\n    /// @notice Unwraps WEDU tokens back into EDU.\\n    /// @param amount The amount of WEDU tokens to unwrap.\\n    /// @dev This function burns the specified amount of WEDU tokens and sends the equivalent amount of EDU to the user.\\n    function withdraw(uint256 amount) public {\\n        require(balanceOf(msg.sender) >= amount, \\\"WEDU: Insufficient balance\\\");\\n        _burn(msg.sender, amount);\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    /// @notice Allows an approved spender to use WEDU tokens on behalf of the sender.\\n    /// @param owner The address of the token owner.\\n    /// @param spender The address of the spender allowed to use the tokens.\\n    /// @dev This function mints WEDU tokens to the owner and approves the spender to use the minted tokens.\\n    function receiveForSpender(address owner, address spender) public payable {\\n        _mint(owner, msg.value);\\n        _approve(owner, spender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0xd2a66249f1bc04375c7067d47e2edf948d9dd0affa8c9300c4b78174826b1b41\",\"license\":\"MIT\"},\"contracts/common/utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nfunction isERC20(address tokenAddress) returns (bool) {\\n\\tif (address(0) == tokenAddress) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t(bool success, bytes memory name) = tokenAddress.call(\\n\\t\\tabi.encodeWithSignature(\\\"name()\\\")\\n\\t);\\n\\trequire(success, \\\"Unable to check low level call for token address\\\");\\n\\n\\treturn name.length > 0;\\n}\\n\",\"keccak256\":\"0xcfbdbd53e3abe5819b6040075577afb51e41dec5f9a4136c4c0baee09cedb0fa\",\"license\":\"MIT\"},\"contracts/modules/LpToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport { SFT } from \\\"./SFT.sol\\\";\\n\\ncontract LpToken is SFT {\\n\\tstruct LpAttributes {\\n\\t\\tuint256 rewardPerShare;\\n\\t\\tuint256 depValuePerShare;\\n\\t\\taddress pair;\\n\\t\\taddress tradeToken;\\n\\t}\\n\\n\\tstruct LpBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tLpAttributes attributes;\\n\\t}\\n\\n\\tconstructor() SFT(\\\"Academy-DEX LP Token\\\", \\\"LPADEX\\\") {}\\n\\n\\t/// @notice Returns the SFT balance of a user including detailed attributes.\\n\\t/// @param user The address of the user to check.\\n\\t/// @return An array of `LpBalance` containing the user's balance details.\\n\\tfunction lpBalanceOf(\\n\\t\\taddress user\\n\\t) public view returns (LpBalance[] memory) {\\n\\t\\tSftBalance[] memory _sftBals = _sftBalance(user);\\n\\t\\tLpBalance[] memory balance = new LpBalance[](_sftBals.length);\\n\\n\\t\\tfor (uint256 i; i < _sftBals.length; i++) {\\n\\t\\t\\tSftBalance memory _sftBal = _sftBals[i];\\n\\n\\t\\t\\tbalance[i] = LpBalance({\\n\\t\\t\\t\\tnonce: _sftBal.nonce,\\n\\t\\t\\t\\tamount: _sftBal.amount,\\n\\t\\t\\t\\tattributes: abi.decode(_sftBal.attributes, (LpAttributes))\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\tfunction mint(\\n\\t\\tuint256 rewardPerShare,\\n\\t\\tuint256 lpAmount,\\n\\t\\taddress pair,\\n\\t\\taddress tradeToken,\\n\\t\\taddress to,\\n\\t\\tuint256 depValuePerShare\\n\\t) external onlyOwner returns (uint256) {\\n\\t\\trequire(lpAmount > 0, \\\"LpToken: LP Amount must be greater than 0\\\");\\n\\n\\t\\tbytes memory attributes = abi.encode(\\n\\t\\t\\tLpAttributes({\\n\\t\\t\\t\\trewardPerShare: rewardPerShare,\\n\\t\\t\\t\\tpair: pair,\\n\\t\\t\\t\\ttradeToken: tradeToken,\\n\\t\\t\\t\\tdepValuePerShare: depValuePerShare\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\treturn _mint(to, lpAmount, attributes);\\n\\t}\\n\\n\\tfunction getBalanceAt(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce\\n\\t) public view returns (LpBalance memory) {\\n\\t\\trequire(hasSFT(user, nonce), \\\"No Lp balance found at nonce for user\\\");\\n\\n\\t\\treturn\\n\\t\\t\\tLpBalance({\\n\\t\\t\\t\\tnonce: nonce,\\n\\t\\t\\t\\tamount: balanceOf(user, nonce),\\n\\t\\t\\t\\tattributes: abi.decode(\\n\\t\\t\\t\\t\\t_getRawTokenAttributes(nonce),\\n\\t\\t\\t\\t\\t(LpAttributes)\\n\\t\\t\\t\\t)\\n\\t\\t\\t});\\n\\t}\\n\\n\\tfunction split(\\n\\t\\tuint256 nonce,\\n\\t\\taddress[] calldata addresses,\\n\\t\\tuint256[] calldata portions\\n\\t) external returns (uint256[] memory splitNonces) {\\n\\t\\trequire(addresses.length > 1, \\\"LpToken: addresses too short\\\");\\n\\t\\trequire(\\n\\t\\t\\taddresses.length == portions.length,\\n\\t\\t\\t\\\"LpToken: Portions addresses missmatch\\\"\\n\\t\\t);\\n\\n\\t\\taddress caller = msg.sender;\\n\\t\\tLpBalance memory lpBalance = getBalanceAt(caller, nonce);\\n\\n\\t\\t_burn(caller, nonce, lpBalance.amount);\\n\\t\\tuint256 totalSplitAmount = 0;\\n\\t\\tsplitNonces = new uint256[](addresses.length);\\n\\n\\t\\tbytes memory attributes = abi.encode(lpBalance.attributes);\\n\\t\\tfor (uint256 i; i < addresses.length; i++) {\\n\\t\\t\\taddress to = addresses[i];\\n\\t\\t\\tuint256 amount = portions[i];\\n\\t\\t\\ttotalSplitAmount += amount;\\n\\n\\t\\t\\tsplitNonces[i] = _mint(to, amount, attributes);\\n\\t\\t}\\n\\t\\trequire(\\n\\t\\t\\ttotalSplitAmount == lpBalance.amount,\\n\\t\\t\\t\\\"LpToken: Invalid Portions\\\"\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xf19157852da0914fdfe53e5250247e77e49dacfe4c2853e071d85359ef0d055f\",\"license\":\"MIT\"},\"contracts/modules/SFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract SFT is ERC1155, Ownable {\\n\\tusing Counters for Counters.Counter;\\n\\tusing EnumerableSet for EnumerableSet.UintSet;\\n\\n\\tstruct SftBalance {\\n\\t\\tuint256 nonce;\\n\\t\\tuint256 amount;\\n\\t\\tbytes attributes;\\n\\t}\\n\\n\\tCounters.Counter private _nonceCounter;\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\n\\t// Mapping from nonce to token attributes as bytes\\n\\tmapping(uint256 => bytes) private _tokenAttributes;\\n\\n\\t// Mapping from address to list of owned token nonces\\n\\tmapping(address => EnumerableSet.UintSet) private _addressToNonces;\\n\\n\\tconstructor(string memory name_, string memory symbol_) ERC1155(\\\"\\\") {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t}\\n\\n\\t/// @dev Internal function to mint new tokens with attributes and store the nonce.\\n\\tfunction _mint(\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attributes\\n\\t) internal returns (uint256 nonce) {\\n\\t\\t_nonceCounter.increment();\\n\\t\\tnonce = _nonceCounter.current();\\n\\n\\t\\t// Store the attributes\\n\\t\\t_tokenAttributes[nonce] = attributes;\\n\\n\\t\\t// Mint the token with the nonce as its ID\\n\\t\\tsuper._mint(to, nonce, amount, \\\"\\\");\\n\\n\\t\\t// Track the nonce for the address\\n\\t\\t_addressToNonces[to].add(nonce);\\n\\t}\\n\\n\\t/// @dev Returns the name of the token.\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/// @dev Returns the symbol of the token.\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/// @dev Returns the token name and symbol.\\n\\tfunction tokenInfo() public view returns (string memory, string memory) {\\n\\t\\treturn (_name, _symbol);\\n\\t}\\n\\n\\t/// @dev Returns raw token attributes by nonce.\\n\\t/// @param nonce The nonce of the token.\\n\\t/// @return Attributes in bytes.\\n\\tfunction _getRawTokenAttributes(\\n\\t\\tuint256 nonce\\n\\t) internal view returns (bytes memory) {\\n\\t\\treturn _tokenAttributes[nonce];\\n\\t}\\n\\n\\t/// @dev Returns the list of nonces owned by an address.\\n\\t/// @param owner The address of the token owner.\\n\\t/// @return Array of nonces.\\n\\tfunction getNonces(address owner) public view returns (uint256[] memory) {\\n\\t\\treturn _addressToNonces[owner].values();\\n\\t}\\n\\n\\t/// @dev Checks if the address owns a specific nonce.\\n\\t/// @param owner The address of the token owner.\\n\\t/// @param nonce The nonce to check.\\n\\t/// @return True if the address owns the nonce, otherwise false.\\n\\tfunction hasSFT(address owner, uint256 nonce) public view returns (bool) {\\n\\t\\treturn _addressToNonces[owner].contains(nonce);\\n\\t}\\n\\n\\t/// @dev Burns the tokens of a specific nonce and mints new tokens with updated attributes.\\n\\t/// @param user The address of the token holder.\\n\\t/// @param nonce The nonce of the token to update.\\n\\t/// @param amount The amount of tokens to mint.\\n\\t/// @param attr The new attributes to assign.\\n\\t/// @return The new nonce for the minted tokens.\\n\\tfunction update(\\n\\t\\taddress user,\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory attr\\n\\t) public onlyOwner returns (uint256) {\\n\\t\\t_burn(user, nonce, amount);\\n\\t\\treturn amount > 0 ? _mint(user, amount, attr) : 0;\\n\\t}\\n\\n\\t/// @dev Returns the balance of the user with their token attributes.\\n\\t/// @param user The address of the user.\\n\\t/// @return Array of SftBalance containing nonce, amount, and attributes.\\n\\tfunction _sftBalance(\\n\\t\\taddress user\\n\\t) internal view returns (SftBalance[] memory) {\\n\\t\\tuint256[] memory nonces = getNonces(user);\\n\\t\\tSftBalance[] memory balance = new SftBalance[](nonces.length);\\n\\n\\t\\tfor (uint256 i; i < nonces.length; i++) {\\n\\t\\t\\tuint256 nonce = nonces[i];\\n\\t\\t\\tbytes memory attributes = _tokenAttributes[nonce];\\n\\t\\t\\tuint256 amount = balanceOf(user, nonce);\\n\\n\\t\\t\\tbalance[i] = SftBalance({\\n\\t\\t\\t\\tnonce: nonce,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tattributes: attributes\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn balance;\\n\\t}\\n\\n\\t/// @dev Override _beforeTokenTransfer to handle address-to-nonce mapping.\\n\\t/// @param operator The address performing the transfer.\\n\\t/// @param from The address sending tokens.\\n\\t/// @param to The address receiving tokens.\\n\\t/// @param ids The token IDs being transferred.\\n\\t/// @param amounts The amounts of tokens being transferred.\\n\\t/// @param data Additional data.\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal virtual override {\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n\\t\\tfor (uint256 i = 0; i < ids.length; i++) {\\n\\t\\t\\tuint256 id = ids[i];\\n\\n\\t\\t\\t_addressToNonces[from].remove(id);\\n\\t\\t\\t_addressToNonces[to].add(id);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x3ea75d1aa27796704284d1b50778916448d13c2917465a784da0490402501682\",\"license\":\"MIT\"},\"contracts/pair/Knowable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract KnowablePair is Ownable {\\n\\tmodifier isKnownPair() {\\n\\t\\trequire(owner() == Ownable(msg.sender).owner(), \\\"not allowed\\\");\\n\\t\\trequire(msg.sender != address(this), \\\"self cannnot be known pair\\\");\\n\\t\\t_;\\n\\t}\\n}\\n\",\"keccak256\":\"0x2e3711baeb401b25f62f5adad04d3be63fff037ac9e20af7fb03476b03ff026b\",\"license\":\"MIT\"},\"contracts/pair/Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../common/libs/Fee.sol\\\";\\nimport \\\"../common/libs/Slippage.sol\\\";\\nimport \\\"../common/libs/TokenPayments.sol\\\";\\n\\nimport \\\"./contexts/AddLiquidity.sol\\\";\\n\\nimport \\\"../common/Amm.sol\\\";\\nimport \\\"./Knowable.sol\\\";\\n\\nimport { LpToken } from \\\"../modules/LpToken.sol\\\";\\nimport \\\"../common/utils.sol\\\";\\n\\nuint256 constant RPS_DIVISION_CONSTANT = 1e36;\\n\\nlibrary DeployPair {\\n\\tfunction newPair(\\n\\t\\taddress tradeToken,\\n\\t\\taddress basePairAddr\\n\\t) external returns (Pair) {\\n\\t\\treturn new Pair(tradeToken, basePairAddr);\\n\\t}\\n}\\n\\n/**\\n * @title Pair\\n * @dev This contract manages a trading pair in the DEX, handling liquidity, trading, and fee mechanisms.\\n */\\ncontract Pair is Ownable, KnowablePair {\\n\\tusing FeeUtil for FeeUtil.Values;\\n\\tusing TokenPayments for TokenPayment;\\n\\n\\t// Reserve data\\n\\tuint256 public deposits;\\n\\tuint256 public sales;\\n\\tuint256 private depValuePerShare;\\n\\n\\tuint256 public lpSupply;\\n\\n\\taddress public tradeToken;\\n\\tPair basePair;\\n\\n\\tuint256 constant MIN_MINT_DEPOSIT = 4_000;\\n\\n\\tevent LiquidityAdded(\\n\\t\\taddress indexed from,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 liqAdded\\n\\t);\\n\\tevent SellExecuted(\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 fee\\n\\t);\\n\\n\\t/**\\n\\t * @dev Constructor for initializing the Pair contract.\\n\\t * @param tradeToken_ Address of the trade token.\\n\\t * @param basePairAddr Address of the base pair.\\n\\t */\\n\\tconstructor(address tradeToken_, address basePairAddr) {\\n\\t\\t_setTradeToken(tradeToken_);\\n\\t\\t_setBasePair(basePairAddr);\\n\\t}\\n\\n\\tfunction _setTradeToken(address tradeToken_) internal virtual {\\n\\t\\trequire(tradeToken_ != address(0), \\\"Pair: Invalid trade token address\\\");\\n\\n\\t\\trequire(isERC20(tradeToken_), \\\"Pair: Invalid trade token\\\");\\n\\t\\ttradeToken = tradeToken_;\\n\\t}\\n\\n\\tfunction _setBasePair(address basePairAddr) internal virtual {\\n\\t\\trequire(basePairAddr != address(0), \\\"Pair: Invalid base pair address\\\");\\n\\n\\t\\tbasePair = Pair(basePairAddr);\\n\\t\\trequire(\\n\\t\\t\\tisERC20(Pair(basePairAddr).tradeToken()),\\n\\t\\t\\t\\\"Pair: Invalid base pair contract\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tmodifier onlyBasePair() {\\n\\t\\trequire(msg.sender == address(basePair), \\\"not allowed\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to check and receive a payment.\\n\\t * @param payment Payment details.\\n\\t * @param from Address from which payment is received.\\n\\t */\\n\\tfunction _checkAndReceivePayment(\\n\\t\\tTokenPayment calldata payment,\\n\\t\\taddress from\\n\\t) internal {\\n\\t\\t_checkAndReceivePayment(payment, from, MIN_MINT_DEPOSIT);\\n\\t}\\n\\n\\tfunction _checkAndReceivePayment(\\n\\t\\tTokenPayment calldata payment,\\n\\t\\taddress from,\\n\\t\\tuint256 min\\n\\t) internal {\\n\\t\\tif (payment.token != address(tradeToken) || payment.amount < min) {\\n\\t\\t\\trevert(\\\"Pair: Bad received payment\\\");\\n\\t\\t}\\n\\n\\t\\tpayment.receiveToken(from);\\n\\t}\\n\\n\\tfunction _getReserves()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256 paymentTokenReserve, uint256 baseTokenReserve)\\n\\t{\\n\\t\\treturn (reserve(), basePair.reserve());\\n\\t}\\n\\n\\tfunction _getLiqAdded(\\n\\t\\tTokenPayment calldata payment\\n\\t) internal view returns (uint256) {\\n\\t\\t(\\n\\t\\t\\tuint256 paymentTokenReserve,\\n\\t\\t\\tuint256 baseTokenReserve\\n\\t\\t) = _getReserves();\\n\\n\\t\\t// In case of initial liquidity\\n\\t\\tpaymentTokenReserve = paymentTokenReserve <= 0\\n\\t\\t\\t? payment.amount\\n\\t\\t\\t: paymentTokenReserve;\\n\\n\\t\\treturn Amm.quote(payment.amount, paymentTokenReserve, baseTokenReserve);\\n\\t}\\n\\n\\tfunction _takeFromReserve(uint256 amount) internal returns (uint256 taken) {\\n\\t\\tif (sales >= amount) {\\n\\t\\t\\tsales -= amount;\\n\\t\\t\\treturn amount;\\n\\t\\t}\\n\\n\\t\\tif ((deposits + sales) >= amount) {\\n\\t\\t\\ttaken = amount;\\n\\t\\t\\t_takeFromDeposits(taken - sales);\\n\\t\\t\\tsales = 0;\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"Amount to be taken is too large\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tevent BurntFees(address indexed pair, uint256 fee);\\n\\n\\t/**\\n\\t * @notice Takes fee and update balances of beneficiaries\\n\\t * @dev This must be called on the out pair side\\n\\t * @param referrer the user address to receive part of fee\\n\\t * @param receiver the address buying this token\\n\\t * @param amount amount to compute and deduct fee from\\n\\t * @param totalFeePercent the fee percentage\\n\\t */\\n\\tfunction takeFeesAndTransferTokens(\\n\\t\\taddress receiver,\\n\\t\\taddress referrer,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 totalFeePercent\\n\\t) external isKnownPair returns (uint256 amountOut, uint256 toBurn) {\\n\\t\\t_takeFromReserve(amount);\\n\\n\\t\\tuint256 fee = (totalFeePercent * amount) / FeeUtil.MAX_PERCENT;\\n\\t\\tamountOut = amount - fee;\\n\\n\\t\\trequire(amountOut != 0, \\\"Pair: Zero out amount\\\");\\n\\n\\t\\tFeeUtil.Values memory values = FeeUtil.splitFee(fee);\\n\\n\\t\\ttoBurn = values.toBurnValue;\\n\\t\\t// Distribute values\\n\\t\\t{\\n\\t\\t\\tif (referrer != address(0) && values.referrerValue > 0) {\\n\\t\\t\\t\\tTokenPayment({\\n\\t\\t\\t\\t\\tnonce: 0,\\n\\t\\t\\t\\t\\tamount: values.referrerValue,\\n\\t\\t\\t\\t\\ttoken: tradeToken\\n\\t\\t\\t\\t}).sendToken(referrer);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttoBurn += values.referrerValue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Increasing sales genrally implies the `toBurn`\\n\\t\\t\\t// is available for ecosystem wide usage\\n\\t\\t\\trequire(toBurn > 0, \\\"Pair: Swap amount too low\\\");\\n\\t\\t\\tsales += toBurn;\\n\\n\\t\\t\\t// Give liqProviders value\\n\\t\\t\\tif (lpSupply > 0) {\\n\\t\\t\\t\\t_addToDeposits(values.liqProvidersValue);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tsales += values.liqProvidersValue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Send bought tokens to receiver\\n\\t\\t\\tTokenPayment({ nonce: 0, amount: amountOut, token: tradeToken })\\n\\t\\t\\t\\t.sendToken(receiver);\\n\\t\\t\\tif (basePair == (this)) {\\n\\t\\t\\t\\t// Zero out toBurn since base pair is the pair that collects the burn fees\\n\\t\\t\\t\\ttoBurn = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit BurntFees(address(this), toBurn);\\n\\t}\\n\\n\\tfunction _executeSell(\\n\\t\\tuint256 amountIn,\\n\\t\\taddress from,\\n\\t\\taddress referrer,\\n\\t\\tPair outPair,\\n\\t\\tuint256 slippage,\\n\\t\\tuint256 totalFeePercent\\n\\t) private returns (uint256 burntFee) {\\n\\t\\tuint256 inTokenReserve = reserve();\\n\\t\\tuint256 outTokenReserve = outPair.reserve();\\n\\n\\t\\tuint256 amountOutMin = Amm.quote(\\n\\t\\t\\tSlippage.compute(amountIn, slippage),\\n\\t\\t\\tinTokenReserve,\\n\\t\\t\\toutTokenReserve\\n\\t\\t);\\n\\t\\trequire(outTokenReserve > amountOutMin, \\\"Pair: not enough reserve\\\");\\n\\n\\t\\tuint256 initialK = Amm.calculateKConstant(\\n\\t\\t\\tinTokenReserve,\\n\\t\\t\\toutTokenReserve\\n\\t\\t);\\n\\n\\t\\tuint256 amountOut = 0;\\n\\t\\t{\\n\\t\\t\\tuint256 amountOutOptimal = Amm.getAmountOut(\\n\\t\\t\\t\\tamountIn,\\n\\t\\t\\t\\tinTokenReserve,\\n\\t\\t\\t\\toutTokenReserve\\n\\t\\t\\t);\\n\\t\\t\\t(amountOut, burntFee) = outPair.takeFeesAndTransferTokens(\\n\\t\\t\\t\\tfrom,\\n\\t\\t\\t\\treferrer,\\n\\t\\t\\t\\tamountOutOptimal,\\n\\t\\t\\t\\ttotalFeePercent\\n\\t\\t\\t);\\n\\n\\t\\t\\trequire(amountOut >= amountOutMin, \\\"Pair: Slippage Exceeded\\\");\\n\\n\\t\\t\\tsales += amountIn;\\n\\t\\t}\\n\\n\\t\\tuint256 newK = Amm.calculateKConstant(reserve(), outPair.reserve());\\n\\t\\trequire(initialK <= newK, \\\"ERROR_K_INVARIANT_FAILED\\\");\\n\\n\\t\\temit SellExecuted(\\n\\t\\t\\tfrom,\\n\\t\\t\\taddress(outPair),\\n\\t\\t\\tamountIn,\\n\\t\\t\\tamountOut,\\n\\t\\t\\ttotalFeePercent\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _insertLiqValues(AddLiquidityContext memory context) internal {\\n\\t\\tlpSupply += context.liq;\\n\\t\\t_addToDeposits(context.deposit);\\n\\t}\\n\\n\\tfunction _addLiq(TokenPayment calldata wholePayment) internal virtual {\\n\\t\\tuint256 liqAdded = _getLiqAdded(wholePayment);\\n\\n\\t\\t(\\n\\t\\t\\tuint256 paymentTokenReserve,\\n\\t\\t\\tuint256 baseTokenReserve\\n\\t\\t) = _getReserves();\\n\\n\\t\\tuint256 initialK = Amm.calculateKConstant(\\n\\t\\t\\tpaymentTokenReserve,\\n\\t\\t\\tbaseTokenReserve\\n\\t\\t);\\n\\n\\t\\t_insertLiqValues(\\n\\t\\t\\tAddLiquidityContext({ deposit: wholePayment.amount, liq: liqAdded })\\n\\t\\t);\\n\\n\\t\\t// Check K values\\n\\t\\t(\\n\\t\\t\\tuint256 newPaymentTokenReserve,\\n\\t\\t\\tuint256 newBaseTokenReserve\\n\\t\\t) = _getReserves();\\n\\t\\tuint256 newK = Amm.calculateKConstant(\\n\\t\\t\\tnewPaymentTokenReserve,\\n\\t\\t\\tnewBaseTokenReserve\\n\\t\\t);\\n\\n\\t\\trequire(newK > initialK, \\\"Pair: K Invariant Failed\\\");\\n\\t}\\n\\n\\tfunction _takeFromDeposits(uint256 deduction) internal {\\n\\t\\tif (deduction <= 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint256 rpsDecrease = (deduction * RPS_DIVISION_CONSTANT) / lpSupply;\\n\\t\\trequire(\\n\\t\\t\\trpsDecrease > 0 &&\\n\\t\\t\\t\\trpsDecrease <= depValuePerShare &&\\n\\t\\t\\t\\tdeduction <= deposits,\\n\\t\\t\\t\\\"Pair: Invalid deposits deduction\\\"\\n\\t\\t);\\n\\n\\t\\tdepValuePerShare -= rpsDecrease;\\n\\t\\tdeposits -= deduction;\\n\\t}\\n\\n\\tfunction _addToDeposits(uint256 addition) internal {\\n\\t\\tuint256 rpsIncrease = (addition * RPS_DIVISION_CONSTANT) / lpSupply;\\n\\n\\t\\trequire(rpsIncrease > 0, \\\"Pair: Invalid deposit addition\\\");\\n\\n\\t\\tdepValuePerShare += rpsIncrease;\\n\\t\\tdeposits += addition;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Adds liquidity to the pair.\\n\\t * @param wholePayment Details of the payment for adding liquidity.\\n\\t * @param from Address from which liquidity is added.\\n\\t * @return liqAdded Amount of liquidity added.\\n\\t */\\n\\tfunction addLiquidity(\\n\\t\\tTokenPayment calldata wholePayment,\\n\\t\\taddress from\\n\\t) external onlyOwner returns (uint256 liqAdded, uint256 rps) {\\n\\t\\t_checkAndReceivePayment(wholePayment, from);\\n\\n\\t\\tuint256 initalLp = lpSupply;\\n\\n\\t\\trps = depValuePerShare;\\n\\t\\t_addLiq(wholePayment);\\n\\n\\t\\trequire(lpSupply > initalLp, \\\"Pair: invalid liquidity addition\\\");\\n\\t\\tliqAdded = lpSupply - initalLp;\\n\\n\\t\\temit LiquidityAdded(from, wholePayment.amount, liqAdded);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Removes liquidity from the pool and claims the corresponding deposit.\\n\\t * @dev This function updates the LP's liquidity balance and claims a proportionate amount of the deposit.\\n\\t *      It ensures that the LP's deposit value per share is up-to-date before calculating the deposit to be claimed.\\n\\t * @param liquidity The current liquidity balance of the LP token, including attributes like `depValuePerShare`.\\n\\t * @param liqToRemove The amount of liquidity to be removed from the pool.\\n\\t * @param from The address from which the liquidity is being removed.\\n\\t * @return liq The updated liquidity balance after removal.\\n\\t * @return depositClaimed The amount of deposit claimed by the LP.\\n\\t */\\n\\tfunction removeLiquidity(\\n\\t\\tLpToken.LpBalance memory liquidity,\\n\\t\\tuint256 liqToRemove,\\n\\t\\taddress from\\n\\t)\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t\\treturns (LpToken.LpBalance memory liq, uint256 depositClaimed)\\n\\t{\\n\\t\\trequire(liquidity.amount > 0, \\\"Pair: LP balance is zero\\\");\\n\\t\\trequire(\\n\\t\\t\\tliqToRemove <= liquidity.amount && liqToRemove <= lpSupply,\\n\\t\\t\\t\\\"Pair: Invalid liquidity removal amount\\\"\\n\\t\\t);\\n\\n\\t\\t// Calculate the total deposit that can be claimed based on the updated depValuePerShare\\n\\t\\tuint256 totalDepositClaimed = 0;\\n\\t\\tif (liquidity.attributes.depValuePerShare < depValuePerShare) {\\n\\t\\t\\ttotalDepositClaimed =\\n\\t\\t\\t\\t((depValuePerShare - liquidity.attributes.depValuePerShare) *\\n\\t\\t\\t\\t\\tliquidity.amount) /\\n\\t\\t\\t\\tRPS_DIVISION_CONSTANT;\\n\\t\\t}\\n\\n\\t\\t// Update the global deposits after claiming\\n\\t\\t_takeFromDeposits(totalDepositClaimed);\\n\\n\\t\\t// Reduce global lpSupply by the LP's total liquidity amount\\n\\t\\tlpSupply -= liquidity.amount;\\n\\n\\t\\t// Update the LP's deposit value per share to the current depValuePerShare\\n\\t\\tliquidity.attributes.depValuePerShare = depValuePerShare;\\n\\n\\t\\t// Calculate the deposit to be claimed based on the liquidity being removed\\n\\t\\tdepositClaimed = (liqToRemove * totalDepositClaimed) / liquidity.amount;\\n\\t\\tliquidity.amount -= liqToRemove;\\n\\n\\t\\t// If there is remaining liquidity, update the pool with the remaining deposit and liquidity\\n\\t\\tif (liquidity.amount > 0) {\\n\\t\\t\\t_insertLiqValues(\\n\\t\\t\\t\\tAddLiquidityContext({\\n\\t\\t\\t\\t\\tdeposit: totalDepositClaimed - depositClaimed,\\n\\t\\t\\t\\t\\tliq: liquidity.amount\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Transfer the claimed deposit to the `from` address\\n\\t\\tif (depositClaimed > 0) {\\n\\t\\t\\tTokenPayment({\\n\\t\\t\\t\\tnonce: 0,\\n\\t\\t\\t\\tamount: depositClaimed,\\n\\t\\t\\t\\ttoken: tradeToken\\n\\t\\t\\t}).sendToken(from);\\n\\t\\t}\\n\\n\\t\\t// Return the updated liquidity balance and claimed deposit\\n\\t\\treturn (liquidity, depositClaimed);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Executes a sell order.\\n\\t * @param caller Address of the caller.\\n\\t * @param referrerOfCaller Address of the referrer of the caller.\\n\\t * @param inPayment Details of the payment for the sell order.\\n\\t * @param outPair Address of the pair to sell to.\\n\\t * @param slippage Maximum slippage allowed.\\n\\t * @param totalFeePercent Total fee percentage.\\n\\t */\\n\\tfunction sell(\\n\\t\\taddress caller,\\n\\t\\taddress referrerOfCaller,\\n\\t\\tTokenPayment calldata inPayment,\\n\\t\\tPair outPair,\\n\\t\\tuint256 slippage,\\n\\t\\tuint256 totalFeePercent\\n\\t) external onlyOwner returns (uint256 burntFee) {\\n\\t\\t_checkAndReceivePayment(inPayment, caller, 0);\\n\\t\\tburntFee = _executeSell(\\n\\t\\t\\tinPayment.amount,\\n\\t\\t\\tcaller,\\n\\t\\t\\treferrerOfCaller,\\n\\t\\t\\toutPair,\\n\\t\\t\\tslippage,\\n\\t\\t\\ttotalFeePercent\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the total amount of tradeToken that can be bought from this Pair.\\n\\t * @return The reserve amount.\\n\\t */\\n\\tfunction reserve() public view returns (uint256) {\\n\\t\\treturn deposits + sales;\\n\\t}\\n}\\n\",\"keccak256\":\"0x18c2d0a0c96f296c380fa8307097761b89349eaba3f37a7de1b24a89948d99c6\",\"license\":\"MIT\"},\"contracts/pair/contexts/AddLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nstruct AddLiquidityContext {\\n\\tuint256 liq;\\n\\tuint256 deposit;\\n}\\n\",\"keccak256\":\"0x1cd9e262aeb44e80c8fdcb37dfef00a4b62a75d42292b1d9c38011b508d353a1\",\"license\":\"MIT\"}},\"version\":1}"
}